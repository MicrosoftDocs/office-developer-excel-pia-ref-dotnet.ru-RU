<Type Name="TextConnection" FullName="Microsoft.Office.Interop.Excel.TextConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="501c6ebc8a77ba133658ccd6644b87ad9afb0275" /><Meta Name="ms.sourcegitcommit" Value="f58b07bd9753015d401a69461f61bc174edee843" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/27/2021" /><Meta Name="ms.locfileid" Value="50009690" /></Metadata><TypeSignature Language="C#" Value="public interface TextConnection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract TextConnection" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.TextConnection" />
  <TypeSignature Language="VB.NET" Value="Public Interface TextConnection" />
  <TypeSignature Language="C++ CLI" Value="public interface class TextConnection" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000244D3-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="313ed-101">Содержит параметры контракта службы, позволяющие Excel подключаться к источнику данных канала данных.</span><span class="sxs-lookup"><span data-stu-id="313ed-101">Contains Service Contract settings that enable Excel to connect to a Data Feed data source.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-102">Возвращает объект <see cref="T:Microsoft.Office.Interop.Excel.Application" /> Application, который представляет приложение Excel.</span><span class="sxs-lookup"><span data-stu-id="313ed-102">Returns an Application <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Excel application.</span></span> <span data-ttu-id="313ed-103">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="313ed-103">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public object Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Connection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Connection { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1432)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1432)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-104">Возвращает или задает строку с именами текстовых файлов, которые позволяют Excel подключаться к текстовым источникам данных.</span><span class="sxs-lookup"><span data-stu-id="313ed-104">Returns or sets a string that contains text file names that enable Excel to connect to text data sources.</span></span> <span data-ttu-id="313ed-105"><b>Object</b> (<b>object</b> in C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-105"><b>Object</b> (<b>object</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-106">Возвращает 32-битное integer, которое указывает приложение, в котором был создан указанный объект.</span><span class="sxs-lookup"><span data-stu-id="313ed-106">Returns a 32-bit integer that indicates the application in which the specified object was created.</span></span> <span data-ttu-id="313ed-107">Только для чтения <b>— integer</b> <b>(int</b> in C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-107">Read-only <b>Integer</b> (<b>int</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="313ed-108">Так как объект был создан в Excel, это свойство возвращает значение 5843454C, которое представляет строку "XCEL".</span><span class="sxs-lookup"><span data-stu-id="313ed-108">Because the object was created in Excel, this property returns the hexadecimal value, 5843454C, which represents the string "XCEL".</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-109">Возвращает объект <b>(</b> <b>объект</b> в C#), представляюs родительский объект указанного <b>объекта TextConnection.</b></span><span class="sxs-lookup"><span data-stu-id="313ed-109">Returns an <b>Object</b> (<b>object</b> in C#) that represents the parent object of the specified <b>TextConnection</b> object.</span></span> <span data-ttu-id="313ed-110">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="313ed-110">Read-only.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileColumnDataTypes">
      <MemberSignature Language="C#" Value="public object TextFileColumnDataTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TextFileColumnDataTypes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileColumnDataTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileColumnDataTypes As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TextFileColumnDataTypes { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1865)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1865)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-111">Возвращает или задает упорядоченный массив констант, определяющий типы данных, применяемые к соответствующим столбцам в текстовом файле, импортируемом в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-111">Returns or sets an ordered array of constants that specify the data types applied to the corresponding columns in the text file that you’re importing into a query table.</span></span> <span data-ttu-id="313ed-112">Константа по умолчанию для каждого столбца <b>— xlGeneral.</b></span><span class="sxs-lookup"><span data-stu-id="313ed-112">The default constant for each column is <b>xlGeneral</b>.</span></span> <span data-ttu-id="313ed-113"><b>Object</b> (<b>object</b> in C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-113"><b>Object</b> (<b>object</b> in C#).</span></span> <span data-ttu-id="313ed-114">Для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="313ed-114">Read/Write.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileCommaDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileCommaDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileCommaDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileCommaDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileCommaDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileCommaDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1862)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1862)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1862)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-115"><b>Имеет</b> true, если запятая является запятой при импорте текстового файла в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-115"><b>True</b> if the comma is the delimiter when you import a text file into a query table.</span></span> <span data-ttu-id="313ed-116"><b>False,</b> если вы хотите использовать какой-либо другой символ в качестве разлитера.</span><span class="sxs-lookup"><span data-stu-id="313ed-116"><b>False</b> if you want to use some other character as the delimiter.</span></span> <span data-ttu-id="313ed-117">Значение по умолчанию — <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="313ed-117">The default value is <b>False</b>.</span></span> <span data-ttu-id="313ed-118">Чтение и <b>написание boolean</b> (<b>bool</b> в C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-118">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileConsecutiveDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileConsecutiveDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileConsecutiveDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileConsecutiveDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileConsecutiveDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileConsecutiveDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1859)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1859)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-119"><b>Имеет</b> true, если при импорте текстового файла в таблицу запросов последовательные делеметры обрабатываются как отдельные.</span><span class="sxs-lookup"><span data-stu-id="313ed-119"><b>True</b> if consecutive delimiters are treated as a single delimiter when you import a text file into a query table.</span></span> <span data-ttu-id="313ed-120">Значение по умолчанию — <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="313ed-120">The default value is <b>False</b>.</span></span> <span data-ttu-id="313ed-121"><b>Boolean</b> (<b>bool</b> in C#) Read/Write.</span><span class="sxs-lookup"><span data-stu-id="313ed-121"><b>Boolean</b> (<b>bool</b> in C#) Read/Write.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileDecimalSeparator">
      <MemberSignature Language="C#" Value="public string TextFileDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextFileDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextFileDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1870)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1870)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-122">Возвращает или задает знак десятичных символов, который Excel использует при импорте текстового файла в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-122">Returns or sets the decimal separator character that Excel uses when you import a text file into a query table.</span></span> <span data-ttu-id="313ed-123">По умолчанию это системный знак десятичных символов.</span><span class="sxs-lookup"><span data-stu-id="313ed-123">The default is the system decimal separator character.</span></span> <span data-ttu-id="313ed-124">Строка чтения и <b>записи</b> (<b>строка</b> на C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-124">Read/Write <b>String</b> (<b>string</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileFixedColumnWidths">
      <MemberSignature Language="C#" Value="public object TextFileFixedColumnWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TextFileFixedColumnWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileFixedColumnWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileFixedColumnWidths As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TextFileFixedColumnWidths { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1866)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1866)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-125">Возвращает или задает массив, соответствующий ширине столбцов (в символах) текстового файла, импортируемого в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-125">Returns or sets an array of integers that correspond to the widths of the columns (in characters) in the text file that you’re importing into a query table.</span></span> <span data-ttu-id="313ed-126">Допустимая ширина — от 1 до 32767 символов.</span><span class="sxs-lookup"><span data-stu-id="313ed-126">Valid widths are from 1 through 32767 characters.</span></span> <span data-ttu-id="313ed-127">Объект <b>Read/Write</b> (<b>объект</b> на C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-127">Read/Write <b>Object</b> (<b>object</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileHeaderRow">
      <MemberSignature Language="C#" Value="public bool TextFileHeaderRow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileHeaderRow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileHeaderRow" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileHeaderRow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileHeaderRow { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(3118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-128">Возвращает или задает значение, которое указывает, следует ли рассматривать первую строку (из начальной строки) как строку с загонщиком.</span><span class="sxs-lookup"><span data-stu-id="313ed-128">Returns or sets value that specifies whether or not the first row (from the starting row) should be treated as a header row.</span></span> <span data-ttu-id="313ed-129"><b>Boolean</b> (<b>bool</b> in C#) Read/Write.</span><span class="sxs-lookup"><span data-stu-id="313ed-129"><b>Boolean</b> (<b>bool</b> in C#) Read/Write.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileOtherDelimiter">
      <MemberSignature Language="C#" Value="public string TextFileOtherDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextFileOtherDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileOtherDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileOtherDelimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextFileOtherDelimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1864)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1864)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-130">Возвращает или задает символ, используемый в качестве замещения при импорте текстового файла в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-130">Returns or sets the character used as the delimiter when you import a text file into a query table.</span></span> <span data-ttu-id="313ed-131">Значение по умолчанию — <b>Nothing</b> (ссылка null (Nothing in Visual Basic) в C#.</span><span class="sxs-lookup"><span data-stu-id="313ed-131">The default value is <b>Nothing</b> (a null reference (Nothing in Visual Basic) in C#).</span></span> <span data-ttu-id="313ed-132">Строка чтения и <b>записи</b> <b>(строка</b> на C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-132">Read/Write <b>String</b> (<b>string</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileParseType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTextParsingType TextFileParseType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTextParsingType TextFileParseType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileParseType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileParseType As XlTextParsingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTextParsingType TextFileParseType { Microsoft::Office::Interop::Excel::XlTextParsingType get(); void set(Microsoft::Office::Interop::Excel::XlTextParsingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1857)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1857)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTextParsingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-133">Возвращает или задает формат столбца для данных в текстовом файле, импортируемых в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-133">Returns or sets the column format for the data in the text file that you’re importing into a query table.</span></span> <span data-ttu-id="313ed-134">Чтение и написание <see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" /> .</span><span class="sxs-lookup"><span data-stu-id="313ed-134">Read/Write <see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFilePlatform">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlPlatform TextFilePlatform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlPlatform TextFilePlatform" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFilePlatform" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFilePlatform As XlPlatform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlPlatform TextFilePlatform { Microsoft::Office::Interop::Excel::XlPlatform get(); void set(Microsoft::Office::Interop::Excel::XlPlatform value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1855)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1855)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlPlatform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-135">Возвращает или задает источник текстового файла, импортируемого в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-135">Returns or sets the origin of the text file you’re importing into the query table.</span></span> <span data-ttu-id="313ed-136">Это свойство определяет, какая кодовая страница используется при импорте данных.</span><span class="sxs-lookup"><span data-stu-id="313ed-136">This property determines which code page is used during the data import.</span></span> <span data-ttu-id="313ed-137">Чтение и написание <see cref="T:Microsoft.Office.Interop.Excel.XlPlatform" /> .</span><span class="sxs-lookup"><span data-stu-id="313ed-137">Read/write <see cref="T:Microsoft.Office.Interop.Excel.XlPlatform" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFilePromptOnRefresh">
      <MemberSignature Language="C#" Value="public bool TextFilePromptOnRefresh { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFilePromptOnRefresh" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFilePromptOnRefresh" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFilePromptOnRefresh As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFilePromptOnRefresh { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1869)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1869)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-138"><b>Имеет</b> true, если необходимо указать имя импортируемого текстового файла при каждом обновлении таблицы запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-138"><b>True</b> if you want to specify the name of the imported text file each time the query table is refreshed.</span></span> <span data-ttu-id="313ed-139">Диалоговое окно "Импорт текстового файла" позволяет указать путь и имя файла.</span><span class="sxs-lookup"><span data-stu-id="313ed-139">The Import Text File dialog box allows you to specify the path and file name.</span></span> <span data-ttu-id="313ed-140">Значение по умолчанию — <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="313ed-140">The default value is <b>False</b>.</span></span> <span data-ttu-id="313ed-141">Чтение и <b>написание boolean</b> (<b>bool</b> в C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-141">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileSemicolonDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileSemicolonDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileSemicolonDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileSemicolonDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileSemicolonDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileSemicolonDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1861)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1861)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1861)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-142"><b>Значение true,</b> если замещение пустяковой замещение при импорте текстового файла в таблицу запросов, а значение свойства <see cref="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileParseType" /> — <b>xlDelimited.</b></span><span class="sxs-lookup"><span data-stu-id="313ed-142"><b>True</b> if the semicolon is the delimiter when you import a text file into a query table, and if the value of the <see cref="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileParseType" /> property is <b>xlDelimited</b>.</span></span> <span data-ttu-id="313ed-143">Значение по умолчанию — <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="313ed-143">The default value is <b>False</b>.</span></span> <span data-ttu-id="313ed-144">Чтение и <b>написание boolean</b> (<b>bool</b> в C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-144">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileSpaceDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileSpaceDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileSpaceDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileSpaceDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileSpaceDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileSpaceDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1863)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1863)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1863)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-145"><b>Имеет</b> true, если знак пробела является замещением при импорте текстового файла в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-145"><b>True</b> if the space character is the delimiter when you import a text file into a query table.</span></span> <span data-ttu-id="313ed-146">Значение по умолчанию — <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="313ed-146">The default value is <b>False</b>.</span></span> <span data-ttu-id="313ed-147">Чтение и <b>написание boolean</b> (<b>bool</b> в C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-147">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileStartRow">
      <MemberSignature Language="C#" Value="public int TextFileStartRow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextFileStartRow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileStartRow" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileStartRow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextFileStartRow { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1856)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1856)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-148">Возвращает или задает номер строки, с которого начинается разбиение текста при импорте текстового файла в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-148">Returns or sets the row number at which text parsing will begin when you import a text file into a query table.</span></span> <span data-ttu-id="313ed-149">Допустимые значения : integers from 1–32767.</span><span class="sxs-lookup"><span data-stu-id="313ed-149">Valid values are integers from 1 through 32767.</span></span> <span data-ttu-id="313ed-150">Значение по умолчанию равно 1.</span><span class="sxs-lookup"><span data-stu-id="313ed-150">The default value is 1.</span></span> <span data-ttu-id="313ed-151">Чтение и <b>написание integer</b> <b>(int int</b> in C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-151">Read/Write <b>Integer</b> (<b>int</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileTabDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileTabDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileTabDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileTabDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileTabDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileTabDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1860)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1860)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-152"><b>Имеет</b> true, если символ вкладки является замещением при импорте текстового файла в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-152"><b>True</b> if the tab character is the delimiter when you import a text file into a query table.</span></span> <span data-ttu-id="313ed-153">Значение по умолчанию — <b>False</b>.</span><span class="sxs-lookup"><span data-stu-id="313ed-153">The default value is <b>False</b>.</span></span> <span data-ttu-id="313ed-154">Чтение и <b>написание boolean</b> (<b>bool</b> в C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-154">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileTextQualifier">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTextQualifier TextFileTextQualifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTextQualifier TextFileTextQualifier" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileTextQualifier" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileTextQualifier As XlTextQualifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTextQualifier TextFileTextQualifier { Microsoft::Office::Interop::Excel::XlTextQualifier get(); void set(Microsoft::Office::Interop::Excel::XlTextQualifier value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1858)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1858)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTextQualifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-155">Возвращает или задает квалификатор текста при импорте текстового файла в таблицу запросов.</span><span class="sxs-lookup"><span data-stu-id="313ed-155">Returns or sets the text qualifier when you import a text file into a query table.</span></span> <span data-ttu-id="313ed-156">Квалификатор текста указывает, что заключенные данные заключены в текстовый формат.</span><span class="sxs-lookup"><span data-stu-id="313ed-156">The text qualifier specifies that the enclosed data is in text format.</span></span> <span data-ttu-id="313ed-157">Чтение и написание <see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" /> .</span><span class="sxs-lookup"><span data-stu-id="313ed-157">Read/Write <see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileThousandsSeparator">
      <MemberSignature Language="C#" Value="public string TextFileThousandsSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextFileThousandsSeparator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileThousandsSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileThousandsSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextFileThousandsSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1871)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1871)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-158"><b>Для</b> Excel засвещается, что числа, импортируемые как текст, начинаются с символа "-" как отрицательного символа.</span><span class="sxs-lookup"><span data-stu-id="313ed-158"><b>True</b> for Excel to treat numbers imported as text that begin with a "-" symbol as a negative symbol.</span></span> <span data-ttu-id="313ed-159"><b>False</b> для Excel для того, чтобы числа, импортируемые как текст, начинались с символа "-" как текста.</span><span class="sxs-lookup"><span data-stu-id="313ed-159"><b>False</b> for Excel to treat numbers imported as text that begin with a "-" symbol as text.</span></span> <span data-ttu-id="313ed-160">Чтение и <b>написание boolean</b> (<b>bool</b> в C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-160">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileTrailingMinusNumbers">
      <MemberSignature Language="C#" Value="public bool TextFileTrailingMinusNumbers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileTrailingMinusNumbers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileTrailingMinusNumbers" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileTrailingMinusNumbers As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileTrailingMinusNumbers { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2164)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2164)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2164)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-161"><b>Для</b> Excel имеется true, чтобы числа, импортируемые как текст, начинались с символа "-" как отрицательного символа.</span><span class="sxs-lookup"><span data-stu-id="313ed-161"><b>True</b> for Excel to treat numbers imported as text that begin with a "-" symbol as a negative symbol.</span></span> <span data-ttu-id="313ed-162"><b>False</b> для Excel для того, чтобы числа, импортируемые как текст, начинались с символа "-" как текста.</span><span class="sxs-lookup"><span data-stu-id="313ed-162"><b>False</b> for Excel to treat numbers imported as text that begin with a "-" symbol as text.</span></span> <span data-ttu-id="313ed-163">Чтение и <b>написание boolean</b> (<b>bool</b> в C#).</span><span class="sxs-lookup"><span data-stu-id="313ed-163">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileVisualLayout">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTextVisualLayoutType TextFileVisualLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTextVisualLayoutType TextFileVisualLayout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileVisualLayout" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileVisualLayout As XlTextVisualLayoutType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTextVisualLayoutType TextFileVisualLayout { Microsoft::Office::Interop::Excel::XlTextVisualLayoutType get(); void set(Microsoft::Office::Interop::Excel::XlTextVisualLayoutType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2245)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2245)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2245)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTextVisualLayoutType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="313ed-164">Возвращает или задает enumeration, которое указывает, является ли визуальный макет импортируемого текста <see cref="T:Microsoft.Office.Interop.Excel.XlTextVisualLayoutType" /> слева направо или справа налево.</span><span class="sxs-lookup"><span data-stu-id="313ed-164">Returns or sets an <see cref="T:Microsoft.Office.Interop.Excel.XlTextVisualLayoutType" /> enumeration that indicates whether the visual layout of the text being imported is left-to-right or right-to-left.</span></span> <span data-ttu-id="313ed-165">Для чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="313ed-165">Read/Write.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>