<Type Name="FormatCondition" FullName="Microsoft.Office.Interop.Excel.FormatCondition">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a635d52289eab8b27e83a83f54b3afc26b142b07" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="09/03/2018" />
    <Meta Name="ms.locfileid" Value="20584415" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface FormatCondition" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract FormatCondition" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.FormatCondition" />
  <TypeSignature Language="VB.NET" Value="Public Interface FormatCondition" />
  <TypeSignature Language="C++ CLI" Value="public interface class FormatCondition" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00024425-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="85bf6-101">Представляет условное форматирование.</span>
      <span class="sxs-lookup">
        <span data-stu-id="85bf6-101">Represents a conditional format.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="85bf6-102">
        <para>Объект <b>FormatCondition</b> входит в состав <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> семейства сайтов. Коллекция <b>FormatConditions</b> может содержать до трех условные форматы для указанного диапазона.</para>
        <para>Использования <b>FormatConditions</b>(<paramref name="index" />), где индекс — номер индекса условное форматирование, чтобы возвратить объект <b>FormatCondition</b> .</para>
        <para>Использования <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> метод для создания нового условное форматирование. Если предпринимается попытка создания более трех условные форматы для одного диапазона, происходит сбой метода <b>Add</b> . Если диапазон имеет три формата, можно использовать <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> можно использовать метод, чтобы изменить один из форматов, или <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> метод для удаления формат и затем использовать метод <b>Add</b> для создания нового формата.</para> Использование 
      <para><see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Font" />, <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Borders" />, и <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Interior" /> свойства <b>FormatCondition</b> объекта, чтобы управлять внешним видом форматирование ячеек. Некоторые свойства этих объектов не поддерживаются в условное форматирование в объектной модели. В следующей таблице перечислены свойства, которые могут использоваться с условным форматированием.</para><list type="table"><item><term><b>Шрифта</b></term><description><b>Полужирный</b><b>цвета</b><b>ColorIndex</b><b>FontStyle</b><b>Italic</b><b>зачеркивание</b><b>Подчеркивание</b>подчеркивания учета не может использоваться.</description></item> Можно использовать стилей границ 
        <item><term><b>границы</b></term><description><b>внизу</b><b>слева</b><b>право</b><b>цвета</b><b>стиля</b>следующие (все остальные не поддерживаются): <b>xlNone</b>, <b>xlSolid</b>, <b>xlDash</b><b>xlDot</b>, <b>xlDashDot</b>, <b>xlDashDotDot</b>, <b>xlGray50</b>, <b>xlGray75</b>и <b>xlGray25</b>. <b>В начало</b><b>Вес</b> Можно использовать следующие Вес границы (все остальные не поддерживаются): <b>xlWeightHairline</b> и <b>xlWeightThin</b>.</description></item><item><term><b>Внутренняя</b></term><description><b>цвета</b><b>ColorIndex</b><b>шаблон</b><b>PatternColorIndex</b></description></item></list><para></para></span>
      <span class="sxs-lookup">
        <span data-stu-id="85bf6-102">
          <para>The <b>FormatCondition</b> object is a member of the <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> collection. The <b>FormatConditions</b> collection can contain up to three conditional formats for a given range.</para>
          <para>Use <b>FormatConditions</b>(<paramref name="index" />), where index is the index number of the conditional format, to return a <b>FormatCondition</b> object.</para>
          <para>Use the <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to create a new conditional format. If you try to create more than three conditional formats for a single range, the <b>Add</b> method fails. If a range has three formats, you can use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to change one of the formats, or you can use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> method to delete a format and then use the <b>Add</b> method to create a new format.</para>
          <para>Use the <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Font" />, <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Borders" />, and <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Interior" /> properties of the <b>FormatCondition</b> object to control the appearance of formatted cells. Some properties of these objects aren’t supported by the conditional format object model. The properties that can be used with conditional formatting are listed in the following table.</para>
          <list type="table">
            <item>
              <term>
                <b>Font</b>
              </term>
              <description>
                <b>Bold</b>
                <b>Color</b>
                <b>ColorIndex</b>
                <b>FontStyle</b>
                <b>Italic</b>
                <b>Strikethrough</b>
                <b>Underline</b>The accounting underline styles cannot be used.</description>
            </item>
            <item>
              <term>
                <b>Border</b>
              </term>
              <description>
                <b>Bottom</b>
                <b>Color</b>
                <b>Left</b>
                <b>Right</b>
                <b>Style</b>The following border styles can be used (all others aren’t supported): <b>xlNone</b>, <b>xlSolid</b>, <b>xlDash</b>, <b>xlDot</b>, <b>xlDashDot</b>, <b>xlDashDotDot</b>, <b>xlGray50</b>, <b>xlGray75</b>, and <b>xlGray25</b>.<b>Top</b><b>Weight</b>The following border weights can be used (all others aren’t supported): <b>xlWeightHairline</b> and <b>xlWeightThin</b>.</description>
            </item>
            <item>
              <term>
                <b>Interior</b>
              </term>
              <description>
                <b>Color</b>
                <b>ColorIndex</b>
                <b>Pattern</b>
                <b>PatternColorIndex</b>
              </description>
            </item>
          </list>
          <para></para>
        </span>
      </span>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-103">Возвращает <see cref="T:Microsoft.Office.Interop.Excel.Application" /> объект, представляющий приложение Microsoft Excel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-103">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Microsoft Excel application.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppliesTo">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range AppliesTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range AppliesTo" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.AppliesTo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppliesTo As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ AppliesTo { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2626)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2626)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-104">Возвращает <see cref="T:Microsoft.Office.Interop.Excel.Range" /> объект, задающий диапазон ячеек, к которым применяется правило форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-104">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Range" /> object specifying the cell range to which the formatting rule is applied.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Range" />
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Borders">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Borders Borders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Borders Borders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Borders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Borders As Borders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Borders ^ Borders { Microsoft::Office::Interop::Excel::Borders ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(435)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Borders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-105">Возвращает <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> коллекции, представляющей границы стиля или диапазона ячеек (в том числе диапазон, определенный как часть условное форматирование).</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-105">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> collection that represents the borders of a style or a range of cells (including a range defined as part of a conditional format).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-106">Возвращает 32-битное целое число, указывающее на приложение, в котором объект был создан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-106">Returns a 32-bit integer that indicates the application in which this object was created.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="85bf6-107">
            <para>Если объект был создан в Microsoft Excel, данное свойство возвращает строку XCEL, что эквивалентно шестнадцатеричный номер 5843454 C.</para> Свойство 
          <para><b>создателя</b> предназначено для использования в Microsoft Excel для Macintosh, где каждое приложение имеет код создателя четырех символов. Например, Microsoft Excel содержит код создателя XCEL.</para><para></para></span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-107">
              <para>If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.</para>
              <para>The <b>Creator</b> property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateOperator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTimePeriods DateOperator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTimePeriods DateOperator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.DateOperator" />
      <MemberSignature Language="VB.NET" Value="Public Property DateOperator As XlTimePeriods" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTimePeriods DateOperator { Microsoft::Office::Interop::Excel::XlTimePeriods get(); void set(Microsoft::Office::Interop::Excel::XlTimePeriods value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2614)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2614)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTimePeriods</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-108">Указывает <see cref="T:Microsoft.Office.Interop.Excel.XlTimePeriods" /> оператора даты, используемый в формате условие.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-108">Specifies the <see cref="T:Microsoft.Office.Interop.Excel.XlTimePeriods" /> Date operator used in the format condition.</span>
          </span>
          <span data-ttu-id="85bf6-109">Для чтения и записи.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-109">Read/write.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlTimePeriods" />
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(117)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-110">Удаляет объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-110">Deletes the object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Font Font { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Font Font" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Font" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Font ^ Font { Microsoft::Office::Interop::Excel::Font ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(146)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(146)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-111">Возвращает <see cref="T:Microsoft.Office.Interop.Excel.Font" /> объект, представляющий шрифт указанный объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-111">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Font" /> object that represents the font of the specified object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Formula1">
      <MemberSignature Language="C#" Value="public string Formula1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Formula1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Formula1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Formula1 As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Formula1 { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1579)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-112">Возвращает значение или выражение, связанное с условной проверки формата или данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-112">Returns the value or expression associated with the conditional format or data validation.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="85bf6-113">
            <para>Свойства <b>Formula1</b> может быть константа, строковое значение, ссылка на ячейку или формулу.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-113">
              <para>The <b>Formula1</b> property can be a constant value, a string value, a cell reference, or a formula.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Formula2">
      <MemberSignature Language="C#" Value="public string Formula2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Formula2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Formula2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Formula2 As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Formula2 { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1580)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-114">Возвращает значение или выражение, связанное с вторая часть условной проверки формата или данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-114">Returns the value or expression associated with the second part of a conditional format or data validation.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="85bf6-115">Свойство <para><b>Formula2</b> используется только при условной проверки данных форматирование <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Operator" /> свойство является <b>xlBetween</b> или <b>xlNotBetween</b>. Может быть константа, строковое значение, ссылка на ячейку или формулу.</para><para></para></span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-115">
              <para>The <b>Formula2</b> property is used only when the data validation conditional format <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Operator" /> property is <b>xlBetween</b> or <b>xlNotBetween</b>. Can be a constant value, a string value, a cell reference, or a formula.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interior">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Interior Interior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Interior Interior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Interior" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Interior As Interior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Interior ^ Interior { Microsoft::Office::Interop::Excel::Interior ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(129)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(129)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Interior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-116">Возвращает <see cref="T:Microsoft.Office.Interop.Excel.Interior" /> объект, представляющий внутренней указанный объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-116">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Interior" /> object that represents the interior of the specified object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modify">
      <MemberSignature Language="C#" Value="public void Modify (Microsoft.Office.Interop.Excel.XlFormatConditionType Type, object Operator, object Formula1, object Formula2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Modify([in]valuetype Microsoft.Office.Interop.Excel.XlFormatConditionType Type, [in]object Operator, [in]object Formula1, [in]object Formula2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Modify (Type As XlFormatConditionType, Optional Operator As Object, Optional Formula1 As Object, Optional Formula2 As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2623)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFormatConditionType" />
        <Parameter Name="Operator" Type="System.Object" />
        <Parameter Name="Formula1" Type="System.Object" />
        <Parameter Name="Formula2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">
          <span data-ttu-id="85bf6-117">Требуется <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-117">Required <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" />.</span>
          </span>
          <span data-ttu-id="85bf6-118">Указывает, будет ли условное форматирование на основе значения ячейки или выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-118">Specifies whether the conditional format is based on a cell value or an expression.</span>
          </span>
          <span data-ttu-id="85bf6-119">Может иметь одно из следующих констант <b>XlFormatCondition</b> :<b>xlCellValue</b><b>xlExpression</b></span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-119">Can be one of the following <b>XlFormatCondition</b> constants:<b>xlCellValue</b><b>xlExpression</b></span>
          </span>
        </param>
        <param name="Operator">
          <span data-ttu-id="85bf6-120">Необязательные <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-120">Optional <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" />.</span>
          </span>
          <span data-ttu-id="85bf6-121">Оператор условного форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-121">The conditional format operator.</span>
          </span>
          <span data-ttu-id="85bf6-122">Может иметь одно из следующих констант <b>XlFormatConditionOperator</b> :<b>xlBetween</b><b>xlEqual</b><b>xlGreater</b><b>xlGreaterEqual</b><b>xlLess</b><b>xlLessEqua</b>l<b>xlNotBetween</b><b>xlNotEqual</b>Если <paramref name="Type" />, — это <b>xlExpression</b><paramref name="Operator" /> аргумент учитывается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-122">Can be one of the following <b>XlFormatConditionOperator</b> constants:<b>xlBetween</b><b>xlEqual</b><b>xlGreater</b><b>xlGreaterEqual</b><b>xlLess</b><b>xlLessEqua</b>l<b>xlNotBetween</b><b>xlNotEqual</b>If <paramref name="Type" />, is <b>xlExpression</b>, the <paramref name="Operator" /> argument is ignored.</span>
          </span>
        </param>
        <param name="Formula1">
          <span data-ttu-id="85bf6-123">Необязательный элемент <b>Object</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-123">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="85bf6-124">Значение или выражение, связанное с условное форматирование.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-124">The value or expression associated with the conditional format.</span>
          </span>
          <span data-ttu-id="85bf6-125">Может быть константа, строковое значение, ссылка на ячейку или формулу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-125">Can be a constant value, a string value, a cell reference, or a formula.</span>
          </span>
        </param>
        <param name="Formula2">
          <span data-ttu-id="85bf6-126">Необязательный элемент <b>Object</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-126">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="85bf6-127">Значение или выражение, связанное с условное форматирование.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-127">The value or expression associated with the conditional format.</span>
          </span>
          <span data-ttu-id="85bf6-128">Может быть константа, строковое значение, ссылка на ячейку или формулу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-128">Can be a constant value, a string value, a cell reference, or a formula.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="85bf6-129">Изменяет существующий условное форматирование.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-129">Modifies an existing conditional format.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyAppliesToRange">
      <MemberSignature Language="C#" Value="public void ModifyAppliesToRange (Microsoft.Office.Interop.Excel.Range Range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ModifyAppliesToRange([in]class Microsoft.Office.Interop.Excel.Range Range) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.ModifyAppliesToRange(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ModifyAppliesToRange(Microsoft::Office::Interop::Excel::Range ^ Range);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2627)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Range" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Range">
          <span data-ttu-id="85bf6-130">Диапазон, к которому будет применяться это правило форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-130">The range to which this formatting rule will be applied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="85bf6-131">Задает диапазон ячеек, к которому применяется этот правила форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-131">Sets the cell range to which this formatting rule applies.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="85bf6-132">
            <para>Диапазон должен быть в стиль ссылок A1 и полностью содержаться в таблице, являющийся родительским <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> семейства сайтов. Он может включать оператор диапазона (двоеточие), оператор пересечения (пробел) или оператор объединения (запятая). Также можно использовать знак доллара, но они обрабатываются.</para>
            <para>Также можно использовать локально определенное имя в любой части диапазона, но имя должно быть языке макрос.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-132">
              <para>The range must be in the A1 reference style and be entirely contained within the sheet that is the parent of the <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> collection. It can include the range operator (a colon), the intersection operator (a space), or the union operator (a comma). Dollar signs can also be used but they are ignored.</para>
              <para>You can also use a local defined name in any part of the range, but the name must be in the language of the macro.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyEx">
      <MemberSignature Language="C#" Value="public void ModifyEx (Microsoft.Office.Interop.Excel.XlFormatConditionType Type, object Operator, object Formula1, object Formula2, object String, object Operator2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ModifyEx([in]valuetype Microsoft.Office.Interop.Excel.XlFormatConditionType Type, [in]object Operator, [in]object Formula1, [in]object Formula2, [in]object String, [in]object Operator2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.ModifyEx(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ModifyEx (Type As XlFormatConditionType, Optional Operator As Object, Optional Formula1 As Object, Optional Formula2 As Object, Optional String As Object, Optional Operator2 As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1581)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFormatConditionType" />
        <Parameter Name="Operator" Type="System.Object" />
        <Parameter Name="Formula1" Type="System.Object" />
        <Parameter Name="Formula2" Type="System.Object" />
        <Parameter Name="String" Type="System.Object" />
        <Parameter Name="Operator2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">To be added.</param>
        <param name="Operator">To be added.</param>
        <param name="Formula1">To be added.</param>
        <param name="Formula2">To be added.</param>
        <param name="String">To be added.</param>
        <param name="Operator2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public object NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NumberFormat { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-133">Возвращает или задает формат применяется к ячейке, если правило условного форматирования имеет значение <b>True</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-133">Returns or sets the number format applied to a cell if the conditional formatting rule evaluates to <b>True</b>.</span>
          </span>
          <span data-ttu-id="85bf6-134">Чтение и запись <b>объектов</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-134">Read/write <b>Object</b>.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="85bf6-135">
            <b>Объект</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-135">
              <b>Object</b>
            </span>
          </span>
        </value>
        <remarks>
          <span data-ttu-id="85bf6-136">
            <para>Числовой формат задается с помощью одной кодов формата, отображаются на вкладке "число" диалогового окна Формат ячеек. Используйте встроенные числовой формат, например «Общие» или создать пользовательский числовой формат.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-136">
              <para>The number format is specified using the same format codes displayed on the Number tab of the Format Cells dialog box. You can use a built-in number format, for example "General", or create a custom number format.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Operator">
      <MemberSignature Language="C#" Value="public int Operator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Operator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Operator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Operator As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Operator { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(797)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-137">Возвращает оператор условного форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-137">Returns the operator for the conditional format.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-138">Возвращает родительский объект для указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-138">Returns the parent object for the specified object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(985)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(985)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(985)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-139">Возвращает или задает значение приоритета правила условного форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-139">Returns or sets the priority value of the conditional formatting rule.</span>
          </span>
          <span data-ttu-id="85bf6-140">Приоритет определяет порядок вычисления, при наличии нескольких правила условного форматирования на листе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-140">The priority determines the order of evaluation when multiple conditional formatting rules exist in a worksheet.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="85bf6-141">
            <b>Integer</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-141">
              <b>Integer</b>
            </span>
          </span>
        </value>
        <remarks>
          <span data-ttu-id="85bf6-142">
            <para>При задании приоритета, значение должно быть положительное целое число от 1 до общее число правила условного форматирования в рабочем листе. Приоритет должен быть уникальное значение для всех правил в рабочем листе, поэтому изменение приоритета для указанного правила условного форматирования может стать причиной значение приоритета других правил на листе перемещать.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-142">
              <para>When setting the priority, the value must be a positive integer between 1 and the total number of conditional formatting rules on the worksheet. The priority must be a unique value for all rules on the worksheet, so changing the priority for the specified conditional formatting rule may cause the priority value of the other rules on the worksheet to be shifted.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PTCondition">
      <MemberSignature Language="C#" Value="public bool PTCondition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PTCondition" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.PTCondition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PTCondition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PTCondition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2631)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-143">Возвращает <b>логическое</b> значение, указывающее, если условное форматирование применяется к диаграмме сводной таблицы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-143">Returns a <b>Boolean</b> value indicating if the conditional format is being applied to a PivotTable chart.</span>
          </span>
          <span data-ttu-id="85bf6-144">Только для чтения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-144">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="85bf6-145">
            <b>Boolean</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-145">
              <b>Boolean</b>
            </span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScopeType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlPivotConditionScope ScopeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlPivotConditionScope ScopeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.ScopeType" />
      <MemberSignature Language="VB.NET" Value="Public Property ScopeType As XlPivotConditionScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlPivotConditionScope ScopeType { Microsoft::Office::Interop::Excel::XlPivotConditionScope get(); void set(Microsoft::Office::Interop::Excel::XlPivotConditionScope value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2615)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2615)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlPivotConditionScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-146">Возвращает или задает одной из констант из <see cref="T:Microsoft.Office.Interop.Excel.XlPivotConditionScope" /> перечисления, который определяет область условное форматирование, при применении диаграммы сводной таблицы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-146">Returns or sets one of the constants of the <see cref="T:Microsoft.Office.Interop.Excel.XlPivotConditionScope" /> enumeration, which determines the scope of the conditional format when it is applied to a PivotTable chart.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlPivotConditionScope" />
        </value>
        <remarks>
          <span data-ttu-id="85bf6-147">
            <para>Значение по умолчанию — <see cref="F:Microsoft.Office.Interop.Excel.XlPivotConditionScope.xlSelectionScope" />, который задает область с помощью <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.AppliesTo" />свойство.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-147">
              <para>The default value is <see cref="F:Microsoft.Office.Interop.Excel.XlPivotConditionScope.xlSelectionScope" />, which sets the scope using the <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.AppliesTo" />property.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFirstPriority">
      <MemberSignature Language="C#" Value="public void SetFirstPriority ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFirstPriority() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.SetFirstPriority" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFirstPriority ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFirstPriority();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2629)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-148">Устанавливает значение приоритета для данного правила условного форматирования значение «1», чтобы вычисляется перед всех правил в рабочем листе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-148">Sets the priority value for this conditional formatting rule to "1" so that it will be evaluated before all other rules on the worksheet.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="85bf6-149">
            <para>При наличии нескольких правила условного форматирования на листе, если правило не было установлено ранее приоритет «1», этот метод будет отображено приоритет все существующие правила на листе увеличено с помощью одного.</para>
            <para>
              <b>Примечание</b>: уровни приоритета для правила условного форматирования, применяются на основе уровне рабочего листа.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-149">
              <para>When you have multiple conditional formatting rules  in a worksheet, if the rule was not previously set to priority "1", this method will cause the priority of all other existing rules on the worksheet to be increased by one.</para>
              <para>
                <b>Note</b>: Priority levels for conditional formatting rules are applied on a worksheet-level basis.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLastPriority">
      <MemberSignature Language="C#" Value="public void SetLastPriority ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLastPriority() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatCondition.SetLastPriority" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLastPriority ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLastPriority();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2630)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-150">Задает порядок вычисления для данного правила условного форматирования, поэтому оценивается после всех правил в рабочем листе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-150">Sets the evaluation order for this conditional formatting rule so it is evaluated after all other rules on the worksheet.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="85bf6-151">
            <para>Фактический vaule приоритет будет совпадать с общим количеством правила условного форматирования в рабочем листе. При наличии нескольких правила условного форматирования на лист, этот метод будет отображено приоритет правила, которые имели значение приоритета, больше, чем правило будет увеличено с помощью одного.</para>
            <para>
              <b>Примечание</b>: уровни приоритета для правила условного форматирования, применяются на основе уровне рабочего листа.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-151">
              <para>The actual vaule of the priority will be equal to the total number of conditional formatting rules on the worksheet. When you have multiple conditional formatting rules  in a worksheet, this method will cause the priority of rules that had a priority value greater than this rule to be increased by one.</para>
              <para>
                <b>Note</b>: Priority levels for conditional formatting rules are applied on a worksheet-level basis.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopIfTrue">
      <MemberSignature Language="C#" Value="public bool StopIfTrue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StopIfTrue" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.StopIfTrue" />
      <MemberSignature Language="VB.NET" Value="Public Property StopIfTrue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StopIfTrue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2625)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2625)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2625)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-152">Возвращает или задает <b>логическое</b> значение, определяющее, если должно оцениваться дополнительных правил форматирования для ячейки, если текущее правило имеет значение <b>True</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-152">Returns or sets a <b>Boolean</b> value that determines if additional formatting rules on the cell should be evaluated if the current rule evaluates to <b>True</b>.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="85bf6-153">
            <b>Boolean</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-153">
              <b>Boolean</b>
            </span>
          </span>
        </value>
        <remarks>
          <span data-ttu-id="85bf6-154">
            <para>Для поддержки обратной совместимости, значение по умолчанию для этого свойства — <b>True</b>, которое является противоположным образом поведение форматирования правила, созданные в пользовательском интерфейсе.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-154">
              <para>To support backward compatibility, the default value for this property is <b>True</b>, which is the opposite behavior of a formatting rule created in the user interface.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(138)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(138)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(138)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-155">Возвращает или задает <b>строковое</b> значение, задающее текст, используемый с правила условного форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-155">Returns or sets a <b>String</b> value specifying the text used by the conditional formatting rule.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="85bf6-156">
            <b>Строка</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-156">
              <b>String</b>
            </span>
          </span>
        </value>
        <remarks>
          <span data-ttu-id="85bf6-157">
            <para>Это свойство игнорируется, если <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Type" /> не задано значение <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlTextString" />.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-157">
              <para>This property is ignored if the <see cref="P:Microsoft.Office.Interop.Excel.FormatCondition.Type" /> property is not set to <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlTextString" />.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOperator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlContainsOperator TextOperator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlContainsOperator TextOperator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.TextOperator" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOperator As XlContainsOperator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlContainsOperator TextOperator { Microsoft::Office::Interop::Excel::XlContainsOperator get(); void set(Microsoft::Office::Interop::Excel::XlContainsOperator value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2613)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2613)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlContainsOperator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-158">Возвращает или задает одной из констант из <see cref="T:Microsoft.Office.Interop.Excel.XlContainsOperator" /> перечисление, определяющее поиск текста с помощью правила условного форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-158">Returns or sets one of the constants of the <see cref="T:Microsoft.Office.Interop.Excel.XlContainsOperator" /> enumeration, specifying the text search performed by the conditional formatting rule.</span>
          </span>
        </summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlContainsOperator" />
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public int Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatCondition.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Type { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(108)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(108)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="85bf6-159">Возвращает тип объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-159">Returns the object type.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="85bf6-160">
            <para>Тип объекта может иметь одно из следующих <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" /> констант:</para>
            <para>
              <b>xlCellValue</b>
            </para>
            <para>
              <b>xlExpression</b>
            </para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85bf6-160">
              <para>The object type can be one of the following <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" /> constants:</para>
              <para>
                <b>xlCellValue</b>
              </para>
              <para>
                <b>xlExpression</b>
              </para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>