<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0e8779a13b1ae831ceba99e1523c885328838f42" /><Meta Name="ms.sourcegitcommit" Value="f58b07bd9753015d401a69461f61bc174edee843" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/27/2021" /><Meta Name="ms.locfileid" Value="50008605" /></Metadata><TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Используется в качестве контейнера для функций листа Excel, которые можно Visual Basic.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата проблемы — дата проблемы безопасности.</param>
        <param name="Arg2">Первый интерес — дата первого интереса для системы безопасности.</param>
        <param name="Arg3">Расчет — дата расчета безопасности</param>
        <param name="Arg4">Rate — годовая ставка купона для системы безопасности.</param>
        <param name="Arg5">Par — значение четности безопасности.</param>
        <param name="Arg6">Частота — количество выплат по купонам в год.</param>
        <param name="Arg7">Basis — тип отсчета дня для использования.</param>
        <summary>Возвращает начисляемую процентную сумму для системы безопасности, которая периодически платит проценты.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>В следующей таблице описываются значения, которые можно использовать <paramref name="Arg5" /> для .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский (30/360)</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата проблемы безопасности.</param>
        <param name="Arg2">Дата начала срока действия системы безопасности.</param>
        <param name="Arg3">Годовая ставка купона для системы безопасности.</param>
        <param name="Arg4">Значение четности безопасности. Если опустить par, ACCRINTM использует 1000 долларов США.</param>
        <param name="Arg5">Тип используемого отсчета дней.</param>
        <summary>Возвращает начисляемую процентную сумму для системы безопасности, которая выплатит проценты в течение срока.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>В следующей таблице описываются значения, которые можно использовать <paramref name="Arg5" /> для .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский (30/360)</description>
            </item>
          </list>
          <para>Следующий список содержит сведения, которые необходимо знать при работе с ACCRINTM:</para>
          <list type="bullet">
            <item>
              <description>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. </description>
            </item>
            <item>
              <description>Проблема, возраст и основа усечены до integers. </description>
            </item>
            <item>
              <description>Если проблема или срок действия не являются допустимой датой, ACCRINTM создает ошибку. </description>
            </item>
            <item>
              <description>Если ≤ 0 или ≤ 0, ACCRINTM создает ошибку. </description>
            </item>
            <item>
              <description>Если за &lt; основу 0 или &gt; 4, ACCRINTM будет создавать ошибку. </description>
            </item>
            <item>
              <description>Если проблема ≥ возраста, ACCRINTM генерирует ошибку. </description>
            </item>
            <item>
              <description>ACCRINTM вычисляется следующим образом: </description>
            </item>
          </list>
          <para>где:</para>
          <para>A = количество начисленных дней, подсчитыванных на ежемесячной основе. Для процентов по срокам возраста используется число дней от даты выпуска до даты возраста.</para>
          <para>D = ежегодный год.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Косинус нужного угла должен быть от -1 до 1.</param>
        <summary>Возвращает арккосинус (или обратное косинус) числа. Арккосинус — это угол, косинус которого <paramref name="Arg1" /> . Возвращенный угол задается в радианах в диапазоне от 0 (ноль) до pi.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если вы хотите преобразовать результат из радиан в градусы, умножьте его на 180/PI() или используйте метод Degrees.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Любое реальное число, равное или больше 1.</param>
        <summary>Возвращает обратный гиперболический косинус числа. Число должно быть больше или равно 1. Обратный гиперболический косинус — это значение, гиперболический косинус которого равен <paramref name="Arg1" /> acosh(Cosh(number)). <paramref name="Arg1" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Коттангенс нужного угла.</param>
        <summary>Возвращает арккотангенс числа в радианах в диапазоне от 0 до Pi.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Гиперболический котангенс нужного угла.</param>
        <summary>Возвращает обратный гиперболический котангенс числа.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Function_num — число от 1 до 19, которое определяет используемую функцию.</param>
        <param name="Arg2">Options — числовая величина, которая определяет, какие значения игнорировать в диапазоне оценки функции.</param>
        <param name="Arg3">Ref1 — первый числовой аргумент для функций, которые принимают несколько числных аргументов, для которых необходимо агрегировать значение.</param>
        <param name="Arg4">Ref2 — Ref30 — числовая аргумента от 2 до 30, для которых необходимо агрегировать значение.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает совокупность в списке или базе данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Следующие ограничения применяются к аргументам Ref (Arg3 — Arg 30) на основе Function_num <b>значения.</b></para>
          <list type="table">
            <item>
              <term>1-13</term>
              <description>Допустимые типы:Any cell reference Unions Intersections Defined names Structured referencesInvalid types: Actual data Arrays</description>
              <description>Допустимые типы:Any cell reference Unions Intersections Defined names Structured referencesInvalid types: Actual data Arrays</description>
              <description>Допустимые типы:Any cell reference Unions Intersections Defined names Structured referencesInvalid types: Actual data Arrays</description>
            </item>
            <item>
              <term>14-17</term>
              <description>Valid types:Any cell reference Unions Intersections Defined names Structured references Actual data Arrays</description>
              <description>Valid types:Any cell reference Unions Intersections Defined names Structured references Actual data Arrays</description>
              <description>Ссылки не разрешены</description>
            </item>
          </list>
          <para>Если требуется второй аргумент ref, но он не предоставлен, AGGREGATE возвращает #VALUE! error.</para>
          <para>Если одна или несколько ссылок являются трех d ссылками, AGGREGATE возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость актива.</param>
        <param name="Arg2">Дата покупки актива.</param>
        <param name="Arg3">Дата окончания первого периода.</param>
        <param name="Arg4">Значение ссвечения в конце жизненного года актива.</param>
        <param name="Arg5">Период.</param>
        <param name="Arg6">Скорость амортизации.</param>
        <param name="Arg7">Используемый год.</param>
        <summary>Возвращает амортизация для каждого бухгалтерского периода. Эта функция предоставляется для французского бухгалтерского учета.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если актив приобретен в середине расчетного периода, учитывается расчетное амортизация. Метод похож на метод, за исключением того, что коэффициент амортизации применяется в вычислении в зависимости от жизненного времени <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> активов. В следующей таблице описываются значения, используемые в <paramref name="Arg7" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>360 дней (метод NASD)</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические</description>
            </item>
            <item>
              <term>3</term>
              <description>365 дней в году</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 дней в году (европейский метод)</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию.</para>
          <para>Эта функция будет возвращать амортизация до последнего периода жизненного срока активов или до тех пор, пока сумма амортизации не будет больше стоимости активов за вычетом значения для сноски.</para>
          <para>Коэффициенты амортизации:</para>
          <list type="table">
            <item>
              <term>От 3 до 4 лет</term>
              <description>1.5</description>
            </item>
            <item>
              <term>От 5 до 6 лет</term>
              <description>2 </description>
            </item>
            <item>
              <term>Более 6 лет</term>
              <description>2.5</description>
            </item>
          </list>
          <para>Амортизация будет увеличиваться до 50 процентов за период, предшествующий последнему периоду, и будет увеличиваться до 100 процентов за последний период.</para>
          <para>Если срок жизни активов находится в периоды от 0 (ноль) до 1, 1 и 2, 2 и 3 или 4 и 5, #NUM! возвращается значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость актива.</param>
        <param name="Arg2">Дата покупки актива.</param>
        <param name="Arg3">Дата окончания первого периода.</param>
        <param name="Arg4">Значение ссвечения в конце жизненного года актива.</param>
        <param name="Arg5">Период.</param>
        <param name="Arg6">Скорость амортизации.</param>
        <param name="Arg7">Используемый год.</param>
        <summary>Возвращает амортизации для каждого периода учета. Эта функция предоставляется для французского бухгалтерского учета.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если актив приобретен в середине расчетного периода, учитывается расчетное амортизация. В следующей таблице описываются значения, используемые для <paramref name="Arg7" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>360 дней (метод NASD)</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические</description>
            </item>
            <item>
              <term>3</term>
              <description>365 дней в году</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 дней в году (европейский метод)</description>
            </item>
          </list>
          <para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 30 условий, которые могут быть <b>истинными</b> или <b>ложными.</b></param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает <b>true,</b> если все его аргументы являются <b>истинными;</b> возвращает <b>false,</b> если один или несколько аргументов — <b>false.</b></summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы должны оцениваться логическими значениями, такими как <b>true</b> или <b>false,</b>или аргументами должны быть массивы или ссылки, содержащие логические значения. </para>
          <para>Если массив или опорный аргумент содержит текст или пустые ячейки, эти значения игнорируются. </para>
          <para>Если указанный диапазон не содержит логических значений, этот метод создает значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Если используется без квалификатора объекта, это свойство возвращает объект, который <see cref="T:Microsoft.Office.Interop.Excel.Application" /> представляет приложение Microsoft Excel. При этом используется с квалификатором объекта, это свойство возвращает объект, который представляет <see cref="T:Microsoft.Office.Interop.Excel.Application" /> создателя указанного объекта. Это свойство можно использовать с объектом автоматизации OLE для возврата приложения этого объекта. Только для чтения.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Цифры, которые вы хотите преобразовать.</param>
        <summary>Преобразует числовую в арабское.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст или ссылка на ячейку, содержаную текст, который необходимо изменить. Если текст не содержит букв полной ширины, текст не меняется.</param>
        <summary>Для языков двухбайтового набора символов (DBCS) изменяется полно ширина (двухбайтовые) символы на полу ширину (однобайтовые).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sine нужного угла, который должен быть от -1 до 1.</param>
        <summary>Возвращает арксинус или инверсию числа. Арксинус — это угол, под которым имеется <paramref name="Arg1" /> sine. Возвращенный угол задается в радианах в диапазоне от -pi/2 до pi/2.</summary>
        <returns>To be added.</returns>
        <remarks><para>Чтобы выразить арксинус в градусах, умножьте результат на 180/PI( или используйте <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> метод.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Любое реальное число.</param>
        <summary>Возвращает обратный гиперболический синус числа. Обратный гиперболический синус — это значение, гиперболический синус которого равен , поэтому <paramref name="Arg1" /> асинх(синх(число)) равно <paramref name="Arg1" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X-координата точки.</param>
        <param name="Arg2">Y-координата точки.</param>
        <summary>Возвращает арктангенс (или обратный тангенс) указанных координат x и y. Арктангенс — это угол от оси X до линии, содержащей начало (0, 0) и точку с координатами (x_num, y_num). Угол задается в радианах между -pi и pi, за исключением -pi.</summary>
        <returns>To be added.</returns>
        <remarks><para>Положительный результат представляет угол против часовой стрелки от оси X; отрицательный результат представляет угол по часовой стрелке. </para>
          <para>
            <b>Atan2(a,b)</b> равно <b>Atan(b/a)</b>за исключением того, что a может быть равно 0 в <b>Atan2</b>. </para>
          <para>Если оба <paramref name="Arg1" /> значения <paramref name="Arg2" /> и 0, Atan2 возвращает значение ошибки. </para>
          <para>Чтобы выражать арктангенс в градусах, умножьте результат на 180/PI( или используйте <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> метод.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Любое реальное число от 1 до -1.</param>
        <summary>Возвращает обратный гиперболический тангенс числа. Число должно быть от -1 до 1 (за исключением -1 и 1).</summary>
        <returns>To be added.</returns>
        <remarks><para>Обратный гиперболический тангенс — это значение, гиперболический тангенс которого <b>Arg1,</b>поэтому <b>Atanh(Tanh(number))</b> равно <paramref name="Arg1" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 30 аргументов, для которых необходимо среднее от абсолютных отклонений. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает среднее абсолютное отклонение точек данных от среднего значения. AveDev — это показатель вариативности набора данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>На AveDev</b> влияет единица измерения в входных данных. </para>
          <para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Уравнение для среднего отклонения:</para>
          <para>Рис. 1. Уравнение для среднего отклонения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 30 числных аргументов, для которых вы хотите получить среднее значение.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает среднее (арифметическое среднее) аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. Если вы хотите включить логические значения и текстовые представления чисел в ссылку в рамках вычисления, используйте функцию AVERAGEA. </para>
          <para>Метод <b>Average</b> измеряет центральное расположение, которое является расположением центра группы чисел в статистическом распределении. Три наиболее распространенных измерения центральной подмастисти:</para>
          <list type="bullet">
            <item>
              <description>Среднее арифметическое среднее значение, вычисляется путем добавления группы чисел и деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 делится на 30, разделенных на 6, что составляет 5. </description>
            </item>
            <item>
              <description>Медиана, которая является средним числом группы чисел; то есть в половине чисел имеются значения, которые больше медиана, а для половины чисел значения меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 имеет 4.</description>
            </item>
            <item>
              <description>Режим, который является наиболее частым числом в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 имеет 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной заметивности одинаковы. При неопределеном распределении группы чисел они могут быть разными.</para>
          <para>При усредневании ячеек помните о разнице между пустыми ячейками и ячейками, содержащими нулевое значение, особенно если вы спустили значение "Ноль" на вкладке "Вид" (команда "Параметры", меню "Инструменты"). Пустые ячейки не учитываются, но нулевое значение.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Одна или несколько ячеек в среднем.</param>
        <param name="Arg2">Критерии в виде числа, выражения, ссылки на ячейку или текста, которые определяют, какие ячейки являются усредно. Например, критерии могут быть выражены как 32, "32", &gt; "32", "apples" или B4.</param>
        <param name="Arg3">Фактический набор ячеек для среднего значения. Если опущен, используется диапазон.</param>
        <summary>Возвращает среднее (арифметическое среднее) всех ячеек в диапазоне, которые соответствуют заданным критериям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Ячейки в диапазоне, содержащие <b>true</b> или <b>false,</b> игнорируются. </para>
          <para>Если ячейка в диапазоне или average_range является пустой ячейкой, <b>AverageIf</b> игнорирует ее. </para>
          <para>Если ячейка в критерии пуста, <b>AverageIf</b> обрабатывает ее как значение 0. </para>
          <para>Если ячейки в диапазоне не соответствуют условиям, <b>AverageIf</b> создает значение ошибки. </para>
          <para>В критериях можно использовать поддеревные знаки, вопросии (?) и звездочки (*). Вопроси метка соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти действительный вопросии или звездочка, введите тильду (~) перед знаком. </para>
          <para>Average_range не должны иметь тот же размер и форму, что и диапазон. Фактические ячейки, которые усредно определяются с помощью верхней левой ячейки в average_range в качестве первой ячейки, а затем включая ячейки, соответствующие размеру и фигуре диапазону. Например,</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>Метод <b>AverageIf</b> измеряет центральное расположение, которое является расположением центра группы чисел в статистическом распределении. Три наиболее распространенных измерения центральной подмастисти:</para>
          <list type="bullet">
            <item>
              <description>Среднее арифметическое среднее, вычисляется путем добавления группы чисел и деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 делится на 30, разделенных на 6, что составляет 5. </description>
            </item>
            <item>
              <description>Медиана, которая является средним числом группы чисел; то есть в половине чисел имеются значения, которые больше медиана, а для половины чисел значения меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 имеет 4.</description>
            </item>
            <item>
              <description>Режим, который является наиболее частым числом в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 имеет 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной заметивности одинаковы. При неопределеном распределении группы чисел они могут быть разными.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Один или несколько диапазонов для оценки связанных критериев.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Возвращает среднее (арифметическое среднее) всех ячеек, которые соответствуют нескольким критериям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если ячейка в average_range пустая, <b>AverageIfs</b> игнорирует ее. </para>
          <para>Если ячейка в диапазоне критериев пуста, <b>AverageIfs</b> обрабатывает ее как значение 0. </para>
          <para>Ячейки в диапазоне, содержащие <b>true,</b> оцениваются как 1; ячейки в диапазоне, содержащие <b>значение false,</b> оцениваются как 0 (ноль). </para>
          <para>Каждая ячейка в average_range используется в среднем вычислении, только если для этой ячейки соответствуют все указанные условия. </para>
          <para>Если ячейки в average_range пустые или содержат текстовые значения, которые не могут быть переведены в числа, <b>AverageIfs</b> создает ошибку. </para>
          <para>Если ячеек, которые соответствуют всем критериям, нет, <b>AverageIfs</b> создает значение ошибки. </para>
          <para>В критериях можно использовать под wildcard characters, question mark (?) and asterisk (*). Знак вопроса соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти действительный вопросии или звездочка, введите тильду (~) перед знаком. </para>
          <para>Каждый criteria_range не должен иметь одинаковый размер и форму, average_range. Фактические ячейки, которые усредно определяются с помощью верхней левой ячейки в этой criteria_range в качестве первой ячейки, а затем включая ячейки, соответствующие размеру и фигуре для диапазона. Например,</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>Функция <b>AverageIfs</b> измеряет центральное расположение, которое является расположением центра группы чисел в статистическом распределении. Три наиболее распространенных измерения центральной подмастисти:</para>
          <list type="bullet">
            <item>
              <description>Среднее арифметическое среднее значение, вычисляется путем добавления группы чисел и деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 делится на 30, разделенных на 6, что составляет 5. </description>
            </item>
            <item>
              <description>Медиана, которая является средним числом группы чисел; то есть в половине чисел имеются значения, которые больше медиана, а для половины чисел значения меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 — это 4.</description>
            </item>
            <item>
              <description>Режим, который является наиболее частым числом в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 имеет 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной заметивности одинаковы. При неопределеном распределении группы чисел они могут быть разными.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число, которое вы хотите преобразовать в текст, или ссылку на ячейку, содержащую число, или формулу, которая оценивается как число.</param>
        <summary>Преобразует число в тайский текст и добавляет суффикс "Baht".</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер, который нужно преобразовать.</param>
        <param name="Arg2">Базовый радикс, в который нужно преобразовать номер.</param>
        <param name="Arg3">Минимальная длина возвращаемой строки. Если пропущенные нули в окнах не добавляются.</param>
        <summary>Преобразует число в текстовое представление с заданным радиксом (базовым).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение для оценки функции.</param>
        <param name="Arg2">Порядок функции Bessel. Если n не является integer, оно усечено.</param>
        <summary>Возвращает измененную функцию Bessel, которая эквивалентна функции Bessel, оцениваемой для исключительно мнимых аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не является числом, BesselI возвращает #VALUE! значение ошибки. </para>
          <para>Если n не является числом, BesselI создает значение ошибки. </para>
          <para>Если n &lt; 0, BesselI создает значение ошибки. </para>
          <para>Измененная функция Bessel в n-м порядке переменной x имеет порядок:</para>
          <para>Рис. 1. Функция Bessel переменной x</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение для оценки функции.</param>
        <param name="Arg2">Порядок функции Bessel. Если n не является integer, оно усечено.</param>
        <summary>Возвращает функцию Bessel.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не является числом, <b>BesselJ</b> создает значение ошибки. </para>
          <para>Если n не является числом, <b>BesselJ</b> возвращает значение ошибки. </para>
          <para>Если n &lt; 0, <b>BesselJ</b> создает значение ошибки. </para>
          <para>Функция Безеля n-го порядка переменной x имеет порядок: </para>
          <para>Рис. 1. Функция Bessel переменной x</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Рис. 2. Функция Гамма</para>
          <para> </para>
          <para> </para>
          <para>— гамма-функция.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение для оценки функции.</param>
        <param name="Arg2">Порядок функции. Если n не является integer, оно усечено.</param>
        <summary>Возвращает измененную функцию Bessel, которая эквивалентна функциям Безселя, вычисляемым для исключительно мнимых аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не является числом, <b>BesselK</b> создает значение ошибки. </para>
          <para>Если n не является числом, <b>BesselK</b> создает значение ошибки. </para>
          <para>Если n &lt; 0, <b>BesselK</b> создает значение ошибки. </para>
          <para>Измененная функция Bessel в n-м порядке переменной x имеет порядок: </para>
          <para>Рис. 1. Функция Bessel переменной x</para>
          <para> </para>
          <para> </para>
          <para>где Jn и Yn — это функции J и Y Bessel соответственно.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение для оценки функции.</param>
        <param name="Arg2">Порядок функции. Если n не является integer, оно усечено.</param>
        <summary>Возвращает функцию Bessel, которая также называется функцией Weber или Функцией Юйли.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не является числом, <b>BesselY</b> создает значение ошибки. </para>
          <para>Если n не является числом, <b>BesselY</b> создает значение ошибки. </para>
          <para>Если n &lt; 0, <b>BesselY</b> создает значение ошибки. </para>
          <para>N-й порядок функции Bessel переменной x: </para>
          <para>Рис. 1. Функция Bessel переменной x</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение между A и B для оценки функции.</param>
        <param name="Arg2">Параметр Alpha для распространения.</param>
        <param name="Arg3">Параметр Beta для распространения.</param>
        <param name="Arg4">Накопительный — логическое значение, которое определяет форму функции. Если совокупное <b>— true,</b>BETA. DIST возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция плотности вероятности.</param>
        <param name="Arg5">Необязательная нижняя граница интервала x.</param>
        <param name="Arg6">Необязательная верхняя граница интервала x.</param>
        <summary>Возвращает функцию накопительного распределения бета-версии.</summary>
        <returns>To be added.</returns>
        <remarks><para>Распределение бета-версий обычно используется для изучения вариантов в процентном соотношении между примерами, таких как доля дня, когда люди проводят просмотр телевизора:</para>
          <list type="bullet">
            <item>
              <description>Если какой-либо аргумент не <b></b> является числовым, Beta_Dist возвращает #VALUE! значение ошибки.</description>
            </item>
            <item>
              <description>Если альфа≤ 0 или ≤ 0, <b></b> Beta_Dist создает значение ошибки.</description>
            </item>
            <item>
              <description>Если x &lt; A, x B или A = B, Beta_Dist &gt; создает значение ошибки. <b></b></description>
            </item>
            <item>
              <description>Если опустить значения для A и B (нижняя и верхняя <b>граница),</b> Beta_Dist использует стандартное накопительное бета-распространение, чтобы A = 0 и B = 1.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность, связанная с бета-версией распространения.</param>
        <param name="Arg2">Параметр Alpha для распространения.</param>
        <param name="Arg3">Параметр Beta для распространения.</param>
        <param name="Arg4">Необязательная нижняя граница интервала x.</param>
        <param name="Arg5">Необязательная верхняя граница интервала x.</param>
        <summary>Возвращает обратное накопительное распределение для указанного бета-распространения. То есть, если вероятность = Beta_Dist(x,...), то Beta_Inv(,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Распределение бета-версий можно использовать при планировании проекта для моделирования времени завершения с учетом ожидаемого времени выполнения и вариативности:</para>
          <list type="bullet">
            <item>
              <description>Если какой-либо аргумент не <b></b> является числом, Beta_Inv создает значение ошибки.</description>
            </item>
            <item>
              <description>Если альфа≤ 0 или ≤ 0, <b></b> Beta_Inv генерирует значение ошибки.</description>
            </item>
            <item>
              <description>Если вероятность ≤ 0 или &gt; 1, <b></b> Beta_Inv создает значение ошибки.</description>
            </item>
            <item>
              <description>Если опустить значения для A и B (нижняя и верхняя <b>граница),</b> Beta_Inv использует стандартное накопительное бета-распространение, чтобы A = 0 и B = 1.</description>
            </item>
          </list>
          <para>Если значение вероятности <b>задано,</b> Beta_Inv ищет это значение x таким образом, чтобы Beta_Dist(x, alpha, beta, TRUE, A, B) = вероятность. Таким образом, <b>точность Beta_Inv</b> зависит от <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> точности. <b>Beta_Inv</b> использует метод итеративного поиска.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение между A и B для оценки функции.</param>
        <param name="Arg2">Параметр распространения.</param>
        <param name="Arg3">Параметр распространения.</param>
        <param name="Arg4">Необязательная нижняя граница интервала x.</param>
        <param name="Arg5">Необязательная верхняя граница интервала x.</param>
        <summary>Возвращает функцию накопительного распределения бета-версии.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> методе.</para>
          <para>Распределение бета-версий обычно используется для изучения вариантов в процентном соотношении между примерами, таких как доля дня, когда люди проводят просмотр телевизора.</para>
          <list type="bullet">
            <item>
              <description>Если какой-либо аргумент не является числовым, <b>BetaDist</b> возвращает #VALUE! значение ошибки.</description>
            </item>
            <item>
              <description>Если альфа≤ 0 или бета-версия ≤ 0, <b>BetaDist</b> генерирует значение ошибки.</description>
            </item>
            <item>
              <description>Если x &lt; A, x &gt; B или A = B, <b>BetaDist</b> создает значение ошибки.</description>
            </item>
            <item>
              <description>Если опустить значения для A и B, <b>BetaDist</b> использует стандартное накопительное бета-распространение, чтобы A = 0 и B = 1.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность, связанная с бета-версией распространения.</param>
        <param name="Arg2">Параметр Alpha для распространения.</param>
        <param name="Arg3">Параметр Beta для распространения.</param>
        <param name="Arg4">Необязательная нижняя граница интервала x.</param>
        <param name="Arg5">Необязательная верхняя граница интервала x.</param>
        <summary>Возвращает обратное накопительное распределение для указанного бета-распространения. То есть, если вероятность = BetaDist(x,...), то BetaInv(,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> методе.</para>
          <para>Распределение бета-версий можно использовать при планировании проекта для моделирования времени завершения с учетом ожидаемого времени выполнения и вариативности.</para>
          <list type="bullet">
            <item>
              <description>Если какой-либо аргумент не является числовым, <b>BetaInv</b> создает значение ошибки.</description>
            </item>
            <item>
              <description>Если альфа≤ 0 или бета-версия ≤ 0, <b>BetaInv</b> генерирует значение ошибки. </description>
            </item>
            <item>
              <description>Если вероятность ≤ 0 или &gt; 1, <b>BetaInv</b> создает значение ошибки. </description>
            </item>
            <item>
              <description>Если опустить значения для A и B, <b>BetaInv</b> использует стандартное накопительное бета-распространение, чтобы A = 0 и B = 1.</description>
            </item>
          </list>
          <para>При значении вероятности <b>BetaInv</b> ищет это значение x таким образом, чтобы betaDist(x, alpha, beta, A, B) = вероятность. Таким образом, точность <b>BetaInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" /> . <b>BetaInv</b> использует метод итеративного поиска. Если поиск не сошел после 100 итерации, функция генерирует значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Двоичный номер, который необходимо преобразовать. Число не может содержать более 10 символов (10 битов). Наиболее значимым битом числа является бит знака. Оставшиеся 9 битов — это биты величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <summary>Преобразует двоичное число в десятичное.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число не является допустимым двоичным номером или содержит более 10 символов (10 битов), Bin2Dec создает значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Двоичный номер, который необходимо преобразовать. Число не может содержать более 10 символов (10 битов). Наиболее значимым битом числа является бит знака. Оставшиеся 9 битов являются битами величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <param name="Arg2">Количество символов, которые необходимо использовать. Если места не заданы, <b>Bin2Hex использует</b> минимальное необходимое количество символов. Места полезны для заполнения возвращаемой величины с нулями в 0.</param>
        <summary>Преобразует двоичное число в hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число не является допустимым двоичным номером или содержит более 10 символов (10 бит), <b>Bin2Hex</b> создает ошибку. </para>
          <para>Если число отрицательное, <b>Bin2Hex</b> игнорирует места и возвращает 10-символьное число. </para>
          <para>Если <b>bin2Hex</b> требует больше знаков, чем помещает символы, создается ошибка. </para>
          <para>Если места не являются integer, оно усечено. </para>
          <para>Если число мест не задано, <b>bin2Hex</b> создает ошибку. </para>
          <para>Если места отрицательные, <b>Bin2Hex</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Двоичный номер, который необходимо преобразовать. Число не может содержать более 10 символов (10 битов). Наиболее значимым битом числа является бит знака. Оставшиеся 9 битов — это биты величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <param name="Arg2">Количество символов, которые необходимо использовать. Если место пропущено, <b>Bin2Oct</b> использует минимальное количество символов, необходимое. Места полезны для заполнения возвращаемой величины с нулями в 0.</param>
        <summary>Преобразует двоичное число в октальный.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число не является допустимым двоичным номером или содержит более 10 символов (10 битов), <b>Bin2Oct</b> создает ошибку. </para>
          <para>Если число отрицательное, <b>Bin2Oct</b> игнорирует места и возвращает 10-символьное октальный номер. </para>
          <para>Если <b>для Bin2Oct</b> требуется больше знаков, чем знаков, создается ошибка. </para>
          <para>Если место не является integer, оно усечено. </para>
          <para>Если количество мест не является числовым, <b>Bin2Oct</b> создает ошибку. </para>
          <para>Если места отрицательные, <b>Bin2Oct</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_s количество успешных пробных версиях.</param>
        <param name="Arg2">Пробные версия — количество независимых пробных версиях.</param>
        <param name="Arg3">Probability_s - вероятность успеха в каждой пробной версиях.</param>
        <param name="Arg4">Накопительный — логическое значение, которое определяет форму функции. Если совокупное имеет <b>true,</b>метод возвращает накопительную функцию распространения, что, скорее всего, number_s успешно; если имеется false, он возвращает функцию вероятности массового распространения, что является вероятностью того, что number_s <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> успешно. <b></b></param>
        <summary>Возвращает вероятность отдельного термина binomial distribution.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте метод <b>Binom_Dist</b> в проблемах с фиксированным числом тестов или пробных проб, когда результатом любой пробной проверки является только успех или сбой, когда пробные процессы независимы и вероятность успешного проведения эксперимента постоянна. Например, метод <b>Binom_Dist</b> может вычислить вероятность того, что два из трех следующих вешек будут мыжскому. </para>
          <list type="bullet">
            <item>
              <description>Number_s и пробных версиях усечены до нее. </description>
            </item>
            <item>
              <description>Если number_s, пробных или probability_s не является числом, метод <b></b> Binom_Dist создает ошибку. </description>
            </item>
            <item>
              <description>Если number_s &lt; 0 number_s &gt; пробных версиях, метод <b>Binom_Dist</b> создает ошибку. </description>
            </item>
            <item>
              <description>Если probability_s &lt; 0 или probability_s &gt; 1, <b></b> Binom_Dist вызывает ошибку. Функция массовой вероятности binomial: </description>
            </item>
          </list>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>is COMBIN(n,x).</para>
          <para>Накопительное биномиативное распределение:</para>
          <para>Рис. 3. Накопительное binomial distribution</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Количество независимых пробных версиях.</param>
        <param name="Arg2">Вероятность успеха в каждой пробной пробной версиях.</param>
        <param name="Arg3">Количество успешных пробных версиях.</param>
        <param name="Arg4">Если эта функция предоставляется, она возвращает вероятность того, что число успешных пробных периодов будет действовать между Arg3 и Arg4.</param>
        <summary>Возвращает вероятность получения результата пробной проверки с помощью биномиального распределения.</summary>
        <returns>Двойное с плавающей точкой</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Пробные версия — количество пробных пробных версиях в Штатах.</param>
        <param name="Arg2">Probability_s - вероятность успеха в каждой пробной версиях.</param>
        <param name="Arg3">Alpha — значение критерия.</param>
        <summary>Возвращает обратное для отдельного термина вероятность биномиального распространения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если метод Trials, Probability_s или Alpha не является <b></b> числом, Binom_Inv вызывает ошибку. </para>
          <para>Если пробные версия не являются integer, она усечена. </para>
          <para>В &lt; пробных версиях 0 метод <b>Binom_Inv</b> ошибку. </para>
          <para>Если Probability_s 0 Probability_s 1, метод Binom_Inv &lt; &gt; создает ошибку. <b></b> </para>
          <para>Если alpha &lt; 0 или Alpha &gt; 1, Binom_Inv метод создает ошибку. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Количество успешных пробных версиях.</param>
        <param name="Arg2">Количество независимых пробных версиях.</param>
        <param name="Arg3">Вероятность успеха в каждой пробной пробной версиях.</param>
        <param name="Arg4">Логическое значение, которое определяет форму функции. Если <b>совокупное</b>имеет true, <b>BinomDist</b> возвращает накопительную функцию распределения, что, скорее всего, number_s успешно; если <b></b>заведомо ложно, возвращается функция вероятности массовой работы, которая является вероятностью того, что number_s успешно.</param>
        <summary>Возвращает вероятность отдельного термина binomial distribution.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте <b>BinomDist</b> при проблемах с фиксированным числом тестов или пробных проб, когда результатом любой пробной проверки является только успех или сбой, когда пробные процессы независимы и вероятность успешного проведения эксперимента постоянна. Например, <b>BinomDist может</b> вычислить вероятность того, что два из трех следующих потомка будут мыжскому. </para>
          <para>Number_s и пробных версиях усечены до нее. </para>
          <para>Если number_s, пробных или probability_s не является числом, <b>BinomDist</b> создает ошибку. </para>
          <para>Если number_s &lt; 0 или number_s &gt; пробных версиях, <b>BinomDist</b> создает ошибку. </para>
          <para>Если probability_s &lt; 0 probability_s &gt; 1, <b>BinomDist</b> создает ошибку. </para>
          <para>Функция массовой вероятности binomial: </para>
          <para>Рис. 1. Функция массовой функции вероятности binomial</para>
          <para> </para>
          <para> </para>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>is COMBIN(n,x).</para>
          <para>Накопительное биномиативное распределение:</para>
          <para>Рис. 3. Накопительное binomial distribution</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <param name="Arg2">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <summary>Возвращает по битовую стрелку и из двух чисел.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <param name="Arg2">Количество битов, на которые нужно сместить Arg1 влево.</param>
        <summary>Возвращает значение, сдвинутое влево shift_amount битов.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <param name="Arg2">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <summary>Возвращает по битовую стрелку ИЛИ из 2 чисел.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <param name="Arg2">Количество битов, на которые вы хотите сместить Arg1 вправо.</param>
        <summary>Возвращает значение, сдвинутое вправо shift_amount битов.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <param name="Arg2">Десятичное представление двоичного номера, который необходимо оценить.</param>
        <summary>Возвращает по битовую стрелку "Exclusive Or" из двух чисел.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — значение, которые необходимо округить.</param>
        <param name="Arg2">Значительность — кратный, к которому нужно округить.</param>
        <summary>Возвращает число, округляемое вверх, от нуля до ближайшего кратного значения важности.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" /> методе.</para>
          <para>Например, если вы хотите избежать использования цен на продукт по цене 4,42 долларов США, используйте формулу Ceiling (4.42,0.05), чтобы округить цены до ближайшего предела.</para>
          <para>Если один из аргументов не является числом, <b>ceiling</b> создает ошибку. </para>
          <para>Независимо от знака числа значение округляется вверх при откорректированном от нуля. Если число имеет точную важность, округлка не происходит. </para>
          <para>Если число и важность имеют разные знаки, <b>ceiling</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, которые нужно округить.</param>
        <param name="Arg2">Несколько, к которым нужно округить.</param>
        <param name="Arg3">При заданном и ненулевом уровне эта функция округлялась от нуля.</param>
        <summary>Округлит число вверх до ближайшего или до ближайшего кратного значения.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — значение, которые нужно округить.</param>
        <param name="Arg2">Значительность — кратный, к которому нужно округить.</param>
        <summary>Возвращает указанное число, округлое до ближайшей кратной кратности важности.</summary>
        <returns>To be added.</returns>
        <remarks><para>Например, если вы хотите избежать использования цен на продукт по цене 4,42 долларов США, используйте формулу Ceiling (4.42,0.05), чтобы округить цены до ближайшего предела.</para>
          <para>В зависимости от знака количества и аргументов важности метод Ceiling_Precise <b>округляется</b> от нуля или к нулю.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Округляются к нулю.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Округляет от нуля.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Округляются к нулю.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Округляет от нуля.</description>
            </item>
          </list>
          <para>Если один из аргументов <b></b> не является числом, Ceiling_Precise создает ошибку. </para>
          <para>Если число имеет точную важность, округлка не происходит.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, по которому вы хотите оценить распределение.</param>
        <param name="Arg2">Количество степеней свобод.</param>
        <summary>Возвращает вероятность распределения хи-квадрата с одной стороны.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в этих <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> и других <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" /> методах.</para>
          <para>Распределение 2 связано с тестом 2. Используйте тест 2 для сравнения наблюдаемых и ожидаемых значений.</para>
          <para>Например, генетический эксперимент может демонстрировать, что в следующем поколении будет представлен определенный набор цветов. Сравнив полученные результаты с ожидаемыми, вы можете решить, является ли исходная версия допустимой.</para>
          <para>Если один из аргументов не является числовым, <b>chiDist</b> создает ошибку. </para>
          <para>Если x отрицательное, <b>ChiDist</b> создает ошибку. </para>
          <para>Если degrees_freedom не является integer, оно усечено. </para>
          <para>Если degrees_freedom &lt; 1 или degrees_freedom &gt; 10^10, <b>ChiDist</b> создает ошибку. </para>
          <para>
            <b>Хидист</b> вычисляется как ChiDist = P(X x), где X — это случайная переменная &gt; 2.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность, связанная с распределением в квадрате хи.</param>
        <param name="Arg2">Количество степеней свобод.</param>
        <summary>Возвращает обратное однохвостовую вероятность распределения хи-квадрата.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в этих <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" /> и других <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" /> методах.</para>
          <para>Если вероятность = ChiDist(x,...), то ChiInv(,...) = x. Используйте эту функцию для сравнения наблюдаемых результатов с ожидаемыми, чтобы определить, является ли исходная версия допустимой.</para>
          <para>Если один из аргументов не является числовым, <b>ChiInv</b> создает ошибку. </para>
          <para>Если вероятность &lt; 0 или вероятность &gt; 1, <b>ChiInv</b> создает ошибку. </para>
          <para>Если degrees_freedom не является integer, оно усечено. </para>
          <para>Если degrees_freedom &lt; 1 или degrees_freedom ≥ 10^10, <b>ChiInv</b> создает ошибку.</para>
          <para>Учитывая значение вероятности, <b>ChiInv</b> ищет это значение x таким образом, чтобы ChiDist(x, degrees_freedom) = вероятность. Таким образом, точность <b>chiInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" /> . <b>В Хиинве</b> используется метод итеративного поиска. Если поиск не сошел после 64 итерации, функция генерирует ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, по которому вы хотите оценить распределение.</param>
        <param name="Arg2">Deg_freedom - количество степеней свобод.</param>
        <param name="Arg3">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное имеет</b>CHISQ_DIST возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция плотности вероятности.</param>
        <summary>Возвращает распределение в квадрате хи.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не является числовым, CHISQ_DIST возвращает #VALUE! значение ошибки. </para>
          <para>Если x отрицательный, CHISQ_DIST возвращает #NUM! значение ошибки. </para>
          <para>Если deg_freedom не является integer, оно усечено. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, по которому вы хотите оценить распределение.</param>
        <param name="Arg2">Количество степеней свобод.</param>
        <summary>Возвращает правое правое распределение в квадрате.</summary>
        <returns>To be added.</returns>
        <remarks><para>Распределение 2 связано с тестом 2. Используйте тест 2 для сравнения наблюдаемых и ожидаемых значений.</para>
          <para>Например, генетический эксперимент может демонстрировать, что в следующем поколении будет представлен определенный набор цветов. Сравнив полученные результаты с ожидаемыми, вы можете решить, является ли исходная версия допустимой.</para>
          <para>Если один из аргументов <b></b> не является числовым, ChiSq_Dist_RT создает ошибку. </para>
          <para>Если x отрицательное, <b>ChiSq_Dist_RT</b> создает ошибку. </para>
          <para>Если degrees_freedom не является integer, оно усечено. </para>
          <para>Если degrees_freedom &lt; 1 degrees_freedom &gt; 10^10, <b></b> ChiSq_Dist_RT создает ошибку. <b>ChiSq_Dist_RT</b> вычисляется как ChiSq_Dist_RT = P(X x), где &gt; X — это случайная переменная 2.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с распределением в квадрате хи.</param>
        <param name="Arg2">Deg_freedom - количество степеней свобод.</param>
        <summary>Возвращает обратную левовую вероятность распределения в квадрате хи.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числовым, ChiSq_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или &lt; вероятность &gt; 1, ChiSq_Inv возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если deg_freedom не является integer, оно усечено. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность, связанная с распределением в квадрате хи.</param>
        <param name="Arg2">Количество степеней свобод.</param>
        <summary>Возвращает обратное правое правое распределение в квадрате.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если вероятность = ChiSq_Dist_RT(x,...), ChiSq_Inv_RT(,...) = x. Используйте эту функцию для сравнения наблюдаемых результатов с ожидаемыми, чтобы определить допустимую исходную версию.</para>
          <para>Если один из аргументов <b></b> не является числовым, ChiSq_Inv_RT создает ошибку. </para>
          <para>Если вероятность &lt; 0 или &gt; 1, ChiSq_Inv_RT создает ошибку. <b></b> </para>
          <para>Если degrees_freedom не является integer, оно усечено. </para>
          <para>Если degrees_freedom &lt; 1 или degrees_freedom ≥ 10^10, <b></b> ChiSq_Inv_RT создает ошибку.</para>
          <para>При значении вероятности <b></b> ChiSq_Inv_RT ищет значение x таким образом, чтобы ChiSq_Dist_RT(x, degrees_freedom) = вероятность. Таким образом, <b>точность ChiSq_Inv_RT</b> зависит от <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> точности. <b>ChiSq_Inv_RT</b> использует метод итеративного поиска. Если поиск не сошел после 64 итерации, функция генерирует ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон данных, содержащий наблюдения для тестирования с ожидаемыми значениями.</param>
        <param name="Arg2">Диапазон данных, содержащий отношение общего числа строк и столбцов к общему продукту.</param>
        <summary>Возвращает тест на независимость.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiSq_Test</b> возвращает значение из распределения хи-квадрата (2) для статистики и соответствующих степеней свободности. Вы можете использовать тесты 7, чтобы определить, проверяются ли результаты эксперимента.</para>
          <para>Если actual_range и expected_range разное количество точек <b>данных,</b> ChiSq_Test возвращает значение #N/A. </para>
          <para>В тесте 2 сначала вычисляется статистика 2 по формуле: </para>
          <para>Рис. 1. Формула для теста в квадрате x</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <list type="bullet">
            <item>
              <description>Aij = фактическая частота в i-й строке, столбце j-th</description>
            </item>
            <item>
              <description>Eij = ожидаемая частота в i-й строке, столбце j-th</description>
            </item>
            <item>
              <description>r = число или строки</description>
            </item>
            <item>
              <description>c = количество столбцов</description>
            </item>
          </list>
          <para>Низкое значение 2 является индикатором независимости. Как видно из формулы, 2 всегда положительное или 0 и равно 0, только если Aij = Eij для каждого i,j.</para>
          <para>
            <b>ChiSq_Test</b> возвращает вероятность того, что значение статистики 2 по крайней мере до максимального значения, вычисляемого по формуле выше, могло случайно произойти при предположении о независимости. При вычислении этой <b>вероятности</b> ChiSq_Test использует распределение 2 с соответствующим количеством степеней свободности df. Если r &gt; 1 и c &gt; 1, то df = (r - 1)(c - 1). Если r = 1 и c &gt; 1, то df = c - 1 или если r &gt; 1 и c = 1, то df = r - 1. r = c= 1 не разрешено и создает ошибку.</para>
          <para>Использование <b>ChiSq_Test</b> подходит, если размер Eij не слишком мал. Некоторые статистики указывают, что каждый Eij должен быть больше или равен 5.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон данных, содержащий наблюдения для тестирования с ожидаемыми значениями.</param>
        <param name="Arg2">Функция ImportantThis заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" /> методе. Диапазон данных, содержащий отношение общего числа строк и столбцов к общему продукту.</param>
        <summary>Возвращает тест на независимость.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ХиТест</b> возвращает значение из распределения хи-квадрата (2) для статистики и соответствующих степеней свободности. Чтобы определить, проверяются ли результаты эксперимента, можно использовать тесты 2.</para>
          <para>Если actual_range и expected_range разное количество точек данных, <b>ChiTest</b> возвращает значение #N/A ошибки. </para>
          <para>В тесте 2 сначала вычисляется статистика 2 по формуле: </para>
          <para>Рис. 1. Формула для теста в квадрате x</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <list type="bullet">
            <item>
              <description>Aij = фактическая частота в i-й строке, столбце j-th</description>
            </item>
            <item>
              <description>Eij = ожидаемая частота в i-й строке, столбце j-th</description>
            </item>
            <item>
              <description>r = число или строки</description>
            </item>
            <item>
              <description>c = количество столбцов</description>
            </item>
          </list>
          <para> </para>
          <para>Низкое значение s2 является индикатором независимости. Как видно из формулы, 2 всегда положительное или 0 и равно 0, только если Aij = Eij для каждого i,j.</para>
          <para>
            <b>ChiTest</b> возвращает вероятность того, что значение статистики 2 по крайней мере так же высоко, как значение, рассчитанное по формуле выше, могло случайно произойти при предположении о независимости. При вычислении этой вероятности <b>хитест</b> использует распределение 2 с соответствующим количеством степеней свободности df. Если r &gt; 1 и c &gt; 1, то df = (r - 1)(c - 1). Если r = 1 и c &gt; 1, то df = c - 1 или если r &gt; 1 и c = 1, то df = r - 1. r = c= 1 не разрешено и создает ошибку.</para>
          <para>Использование <b>хитеста</b> наиболее подходит, если Eij не слишком мал. Некоторые статистики указывают, что каждый Eij должен быть больше или равен 5.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Указывает, какой аргумент значения выбран. Arg1 должен быть числом от 1 до 29 или формулой или ссылкой на ячейку, содержащую число от 1 до 29.</param>
        <param name="Arg2">От 1 до 29 аргументов значения, из которых choose выбирает значение или действие для выполнения на основе Arg1. Аргументами могут быть числа, ссылки на ячейки, определенные имена, формулы, функции или текст.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Используется <paramref name="Arg1" /> в качестве индекса для возврата значения из списка аргументов значения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если <paramref name="Arg1" /> значение 1, <b>выберите</b> значение 1; если значение 2, <b>выберите</b> возвращает значение2 и так далее. </para>
          <para>Если значение меньше 1 или больше числа последнего значения в списке, выбор создает <paramref name="Arg1" /> ошибку. <b></b> </para>
          <para>Если <paramref name="Arg1" /> это доля, она усечена до наименьшего integer перед его использования. </para>
          <para>Если <paramref name="Arg1" /> это массив, каждое значение вычисляется при оценке <b>Choose.</b> </para>
          <para>Аргументами значения для <b>выбора могут</b> быть как ссылки на диапазон, так и отдельные значения. Например, формула:</para>
          <para>=SUM(Choose(2,A1:A10,B1:B10,C1:C10))</para>
          <para>оценивается в:</para>
          <para>=SUM(B1:B10)</para>
          <para>который затем возвращает значение на основе значений в диапазоне B1:B10.</para>
          <para>Сначала <b>вычисляется</b> функция Choose, возвращая ссылку B1:B10. Затем функция SUM оценивается с помощью B1:B10, результата функции <b>Choose,</b> в качестве ее аргумента.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Любые сведения о таблицах, из которых нужно удалить непечатаемые символы.</param>
        <summary>Удаляет из текста все непечатаемые символы.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте <b>очистку</b> текста, импортируемого из других приложений, который содержит символы, которые могут не печататься в операционной системе. Например, с помощью <b></b> clean можно удалить низкоуровневый код компьютера, который часто находится в начале и конце файлов данных и не может быть напечатан.</para>
          <para>
            <b>Важно!</b>Функция <b>Clean</b> предназначена для удаления первых 32 непечатающих символов в 7-битовом коде ASCII (значения от 0 до 31) из текста. В наборе символов Юникод имеются дополнительные символы без отпечаток (значения 127, 129, 141, 143, 144 и 157). Сама по себе функция <b>Clean</b> не удаляет эти дополнительные непечатающие символы.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Количество элементов.</param>
        <param name="Arg2">Количество элементов в каждой комбинации.</param>
        <summary>Возвращает количество комбинаций для заданного количества элементов. Используйте <b>Combin,</b> чтобы определить общее возможное число групп для заданного количества элементов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Числовая аргумента усечена до integers. </para>
          <para>Если один из аргументов не является числовым, <b>в Combin</b> создается ошибка. </para>
          <para>Если число &lt; 0, number_chosen 0 или &lt; &lt; number_chosen, <b>объединение</b> создает ошибку. </para>
          <para>Сочетание — это любой набор или подмножество элементов независимо от их внутреннего порядка. Сочетания отличаются от перезапусков, для которых имеет значение внутренний порядок. </para>
          <para>Число сочетаний: число = n и number_chosen = k: </para>
          <para>Рис. 1. Число комбинаций</para>
          <para> </para>
          <para> </para>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Общее количество элементов.</param>
        <param name="Arg2">Количество элементов в каждой комбинации.</param>
        <summary>Возвращает количество сочетаний с повторениями для заданного количества элементов.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Реальный коэффициент сложного числа.</param>
        <param name="Arg2">Мнимый коэффициент сложного числа.</param>
        <param name="Arg3">Суффикс мнимого компонента сложного числа. Если опущен, предполагается, что суффикс имеет "i".</param>
        <summary>Преобразует реальные и мнимые коэффициенты в сложное число формы x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Все функции сложных номеров принимают "i" и "j" для суффикса, но ни "I", ни "J". Использование верхнего регистра создает ошибку. Все функции, которые принимают два или более сложных чисел, требуют, чтобы все суффиксы совпадали.</para>
          <para>Если <paramref name="Arg1" /> он не является числом, <b>complex</b> создает ошибку. </para>
          <para>Если <paramref name="Arg2" /> он не является числом, <b>complex</b> создает ошибку. </para>
          <para>Если <paramref name="Arg3" /> нет ни "i", ни "j", <b>complex</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Уровень важности, используемый для вычисления уровня уверенности. Уровень уверенности равен 100*(1 - alpha)%, или, другими словами, альфа-уровень 0,05 означает уровень достоверности 95 процентов.</param>
        <param name="Arg2">Стандартное отклонение для диапазона данных и считается известным.</param>
        <param name="Arg3">Размер примера.</param>
        <summary>Возвращает значение, которое можно использовать для создания интервала уверенности для местного значения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в этих <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" /> и других <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" /> методах.</para>
          <para>Интервал уверенности — это диапазон значений. Ваш пример означает, x, находится в центре этого диапазона, а диапазон — x ± <b>Confidence.</b> Например, если x — это пример средней доставки для продуктов, упорядоченных по почте, то x ± <b>Достоверность</b> — это диапазон средств для людей. Для любого мягчего погонщика в этом диапазоне вероятность получения примера выше, чем у буквы x; для любого мягца,0, а не в этом диапазоне, вероятность получения образца имеет более высокую степень от 10, чем x, меньше, чем альфа-. Другими словами, предположим, что мы используем x, standard_dev и размер для создания двуххвостого теста на уровне важности альфа-теста, который означается для людей, — г0. Затем мы не будем отклонить эту версию, если 10 находится в доверии, и отклонить ее, если 10 не находится в интервале доверия. Интервал вероятности не позволяет нам сделать вывод о том, что существует вероятность 1 — альфа, что следующий пакет займет время доставки с интервалом вероятности. </para>
          <para>Если какой-либо аргумент не является числом, <b>confidence</b> создает ошибку. </para>
          <para>Если альфа≤ 0 или ≥ 1, <b>достоверность</b> создает ошибку. </para>
          <para>Если standard_dev ≤ 0, <b>достоверность</b> создает ошибку. </para>
          <para>Если размер не является integer, он усечен. </para>
          <para>Если размер &lt; 1, <b>достоверность</b> создает ошибку. </para>
          <para>Если предполагается, что альфа-уровень равен 0,05, необходимо вычислить область под стандартной кривой нормали, равной (1 – альфа) или 95 процентам. Это значение ± 1,96. Таким образом, имеется доверительный интервал: </para>
          <para>Рис. 1. Интервал уверенности</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Уровень важности, используемый для вычисления уровня уверенности. Уровень уверенности равен 100*(1 - alpha)%, или, другими словами, альфа-уровень 0,05 означает уровень достоверности 95 процентов.</param>
        <param name="Arg2">Стандартное отклонение для диапазона данных и считается известным.</param>
        <param name="Arg3">Размер примера.</param>
        <summary>Возвращает значение, которое можно использовать для создания интервала уверенности для омулицы.</summary>
        <returns>To be added.</returns>
        <remarks><para>Интервал уверенности — это диапазон значений. Ваш пример означает, x, находится в центре этого диапазона, а диапазон — x ± <b>Confidence_Norm.</b> Например, если x — это пример средней доставки для продуктов, упорядоченных по почте, x <b>± Confidence_Norm</b> является диапазоном средств для доставки. Для любого мягчего погонщика в этом диапазоне вероятность получения примера выше, чем у 10, чем у X, выше, чем у альфа-связи; для любого мягца,0, а не в этом диапазоне, вероятность получения образца имеет более высокую степень от 10, чем x, меньше, чем альфа-. Другими словами, предположим, что x, standard_dev и размер используются для создания двуххвостого теста на уровне важности альфа-теста, который означается для заметивности, — г0. Затем мы не будем отклонить эту предположения, если 10 находится в доверии и будет отклонить эту предположения, если 10 не находится в интервале доверия. Интервал вероятности не позволяет сделать вывод о том, что существует вероятность 1 — альфа, что следующий пакет займет время доставки с интервалом вероятности.</para>
          <para>Если какой-либо аргумент не <b></b> является числовым, Confidence_Norm создает ошибку. </para>
          <para>Если альфа≤ 0 или ≥ 1, <b></b> Confidence_Norm создает ошибку. </para>
          <para>Если standard_dev ≤ 0, <b>Confidence_Norm</b> создает ошибку. </para>
          <para>Если размер не является integer, он усечен. </para>
          <para>Если размер &lt; 1, <b>Confidence_Norm</b> создает ошибку. </para>
          <para>Если предполагается, что альфа-альфа равен 0,05, вычислим область под стандартной обычной кривой, равной (1 — альфа) или 95 процентов. Это значение ± 1,96. Таким образом, имеется доверительный интервал: </para>
          <para>Рис. 1. Интервал уверенности</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alpha — уровень важности, используемый для вычисления уровня уверенности. Уровень уверенности равен 100*(1 - alpha)%, или, другими словами, альфа-уровень 0,05 означает уровень достоверности 95 процентов.</param>
        <param name="Arg2">Standard_dev - стандартное отклонение для диапазона данных и считается известным.</param>
        <param name="Arg3">Size — размер примера.</param>
        <summary>Возвращает доверительный интервал для омулица, используя распределение учащихся.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числовым, Confidence_T возвращает #VALUE! значение ошибки. </para>
          <para>Если альфа≤ 0 или ≥ 1, <b></b> Confidence_T возвращает #NUM! значение ошибки. </para>
          <para>Если standard_dev ≤ 0, <b>Confidence_T</b> возвращает #NUM! значение ошибки. </para>
          <para>Если размер не является integer, он усечен. </para>
          <para>Если размер равен <b>1,</b> Confidence_T возвращает #DIV/0! значение ошибки. </para>
          <para>Если размер равен <b>1,</b> Confidence_T возвращает #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение в from_units для преобразования.</param>
        <param name="Arg2">Единицы для числа.</param>
        <param name="Arg3">Единицы для результата. <b>Convert</b> принимает следующие текстовые значения (в кавычках) для from_unit и to_unit, перечисленных в разделе "Примечания" ниже.</param>
        <summary>Преобразует число из одной системы показателей в другую. Например, <b>convert</b> может преобразовывать таблицу расстояний в расстоянии в таблицу расстояний в минутах.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Гистограмма</term>
              <description>"g"</description>
            </item>
            <item>
              <term>Slug</term>
              <description>"sg"</description>
            </item>
            <item>
              <term>Массовая массы (avoirdupois)</term>
              <description>"lbm"</description>
            </item>
            <item>
              <term>U (атомарная массовая единица)</term>
              <description>"u"</description>
            </item>
            <item>
              <term>Массовая хлама (avoirdupois)</term>
              <description>"желтая"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Meter</term>
              <description>"m"</description>
            </item>
            <item>
              <term>Домили</term>
              <description>"mi"</description>
            </item>
            <item>
              <term>Nautical mile</term>
              <description>"Nmi"</description>
            </item>
            <item>
              <term>Дюйма</term>
              <description>"in"</description>
            </item>
            <item>
              <term>Foot</term>
              <description>"ft"</description>
            </item>
            <item>
              <term>Вайс</term>
              <description>"yd"</description>
            </item>
            <item>
              <term>Angstrom</term>
              <description>"ang"</description>
            </item>
            <item>
              <term>Pica (1/72 in.)</term>
              <description>"Pica"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Year</term>
              <description>"yr"</description>
            </item>
            <item>
              <term>Day</term>
              <description>"day"</description>
            </item>
            <item>
              <term>Часы</term>
              <description>"hr"</description>
            </item>
            <item>
              <term>Минуты</term>
              <description>"mn"</description>
            </item>
            <item>
              <term>Секунды</term>
              <description>"sec"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Pascal</term>
              <description>"Pa" (или "p")</description>
            </item>
            <item>
              <term>Висявь</term>
              <description>"atm" (или "at")</description>
            </item>
            <item>
              <term>mm of The</term>
              <description>"mmHg"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Ньютон</term>
              <description>"N"</description>
            </item>
            <item>
              <term>Dyne</term>
              <description>"dyn" (или "dy")</description>
            </item>
            <item>
              <term>Сила саунд</term>
              <description>"lbf"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Joule</term>
              <description>"J"</description>
            </item>
            <item>
              <term>Erg</term>
              <description>"e"</description>
            </item>
            <item>
              <term>Нерегуламетричная загромо</term>
              <description>"c"</description>
            </item>
            <item>
              <term>ИТ-продукт</term>
              <description>"cal"</description>
            </item>
            <item>
              <term>Ветвь ветвей ветв</term>
              <description>"eV" (или "ev")</description>
            </item>
            <item>
              <term>Пиковая сила в час</term>
              <description>"HPh" (или "hh")</description>
            </item>
            <item>
              <term>Час за часом</term>
              <description>"Wh" (или "wh")</description>
            </item>
            <item>
              <term>Foot-pound</term>
              <description>"flb"</description>
            </item>
            <item>
              <term>BTU</term>
              <description>"BTU" (или "btu")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Сила силы</term>
              <description>"HP" (или "h")</description>
            </item>
            <item>
              <term>Вайс</term>
              <description>"W" (или "w")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Тесла</term>
              <description>"T"</description>
            </item>
            <item>
              <term>ГАУСС</term>
              <description>"ga"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Градус Цельсия</term>
              <description>"C" (или "cel")</description>
            </item>
            <item>
              <term>Degree Fahrenheit</term>
              <description>"F" (или "fah")</description>
            </item>
            <item>
              <term>Кельвин</term>
              <description>"K" (или "kel")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Подмайки</term>
              <description>"tsp"</description>
            </item>
            <item>
              <term>Tablespoon</term>
              <description>"tbs"</description>
            </item>
            <item>
              <term>Плавный</term>
              <description>"ы"</description>
            </item>
            <item>
              <term>"Чашка"</term>
              <description>"cup"</description>
            </item>
            <item>
              <term>Пин-код для США</term>
              <description>"pt" (или "us_pt")</description>
            </item>
            <item>
              <term>Сша pint</term>
              <description>"uk_pt"</description>
            </item>
            <item>
              <term>Quart</term>
              <description>"qt"</description>
            </item>
            <item>
              <term>Конон</term>
              <description>"gal"</description>
            </item>
            <item>
              <term>Liter</term>
              <description>"l" (или "lt")</description>
            </item>
          </list>
          <para>Следующие сокращенные префиксы единиц можно в конце любого показателя from_unit или to_unit.</para>
          <list type="table">
            <item>
              <term>exa</term>
              <description>1E+18</description>
              <description>"E"</description>
            </item>
            <item>
              <term>peta</term>
              <description>1E+15</description>
              <description>"P"</description>
            </item>
            <item>
              <term>tera</term>
              <description>1E+12</description>
              <description>"T"</description>
            </item>
            <item>
              <term>giga</term>
              <description>1E+09</description>
              <description>"G"</description>
            </item>
            <item>
              <term>mega</term>
              <description>1E+06</description>
              <description>"M"</description>
            </item>
            <item>
              <term>kilo</term>
              <description>1E+03</description>
              <description>"k"</description>
            </item>
            <item>
              <term>hecto</term>
              <description>1E+02</description>
              <description>"h"</description>
            </item>
            <item>
              <term>dekao</term>
              <description>1E+01</description>
              <description>"e"</description>
            </item>
            <item>
              <term>deci</term>
              <description>1E-01</description>
              <description>"d"</description>
            </item>
            <item>
              <term>centi</term>
              <description>1E-02</description>
              <description>"c"</description>
            </item>
            <item>
              <term>милли</term>
              <description>1E-03</description>
              <description>"m"</description>
            </item>
            <item>
              <term>micro</term>
              <description>1E-06</description>
              <description>"u"</description>
            </item>
            <item>
              <term>nano</term>
              <description>1E-09</description>
              <description>"n"</description>
            </item>
            <item>
              <term>pico</term>
              <description>1E-12</description>
              <description>"p"</description>
            </item>
            <item>
              <term>femto</term>
              <description>1E-15</description>
              <description>"f"</description>
            </item>
            <item>
              <term>atto</term>
              <description>1E-18</description>
              <description>"a"</description>
            </item>
          </list>
          <para>Если входные типы данных неправильные, <b>преобразование</b> создает ошибку. </para>
          <para>Если единица не существует, <b>преобразование</b> создает ошибку. </para>
          <para>Если единица не поддерживает сокращенный префикс единицы, <b>преобразование</b> создает ошибку. </para>
          <para>Если единицы находятся в разных группах, <b>преобразование</b> создает ошибку. </para>
          <para>Имена единиц и префиксы чувствительны к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон значений ячейки.</param>
        <param name="Arg2">Второй диапазон значений ячейки.</param>
        <summary>Возвращает коэффициент корреляции диапазонов <paramref name="Arg1" /> <paramref name="Arg2" /> ячеей и диапазонов ячеей.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте коэффициент корреляции, чтобы определить отношение между двумя свойствами. Например, можно проверить связь между средней температурой расположения и использованием пвседеров.</para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если <paramref name="Arg1" /> <paramref name="Arg2" /> имеется другое число точек данных, <b>Коррел</b> создает ошибку. </para>
          <para>Если либо пусто, либо если s (стандартное отклонение) их значений равно <paramref name="Arg1" /> <paramref name="Arg2" /> нулю, <b>Коррел</b> создает ошибку. </para>
          <para>Уравнение для коэффициента корреляции:</para>
          <para>Рис. 1. Уравнение для коэффициента корреляции</para>
          <para> </para>
          <para> </para>
          <para>где x и y — пример означает Average(Arg1) и Average(Arg2).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Любое реальное число, для которого нужно найти гиперболический косинус.</param>
        <summary>Возвращает гиперболический косинус числа.</summary>
        <returns>To be added.</returns>
        <remarks><para>Формула гиперболического косина: </para>
          <para>Рис. 1. Формула гиперболического косина</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которого нужен котангенс.</param>
        <summary>Возвращает cotangent угла.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которого нужен гиперболический котангенс.</param>
        <summary>Возвращает гиперболический котангенс числа.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 30 аргументов, которые могут содержать различные типы данных или ссылаться на них, но учитываются только числа.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Подсчитывать количество ячеек, содержащих числа, и число чисел в списке аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте <b>count,</b> чтобы получить количество записей в числовом поле, которое находится в диапазоне или массиве чисел. </para>
          <para>Учитываются аргументы, которые являются числами, датами или текстовым представлением чисел. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, игнорируются. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются. </para>
          <para>Если вы хотите подсчитать логические значения, текст или значения ошибок, используйте <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> функцию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 30 аргументов, представляющих значения, которые вы хотите подсчитать.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Подсчитывал количество непустых ячеек и значения в списке аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте <b>CountA</b> для подсчета количества ячеек, содержащих данные в диапазоне или массиве.</para>
          <para>Значение — это любой тип информации, включая значения ошибок и пустой текст (""). Значение не включает пустые ячейки. </para>
          <para>Если аргумент является массивом или ссылкой, используются только значения из этого массива или ссылки. Пустые ячейки и текстовые значения в массиве или ссылке игнорируются. </para>
          <para>Если логические значения, текст или значения ошибок не требуются, используйте <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> функцию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон, из которого вы хотите подсчитать пустые ячейки.</param>
        <summary>Подсчитывал пустые ячейки в указанном диапазоне ячеек.</summary>
        <returns>To be added.</returns>
        <remarks><para>Ячейки с формулами, которые возвращают "" (пустой текст), также учитываются. Ячейки с нулем не учитываются.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон ячеек, из которых нужно пересчитывать ячейки.</param>
        <param name="Arg2">Критерии в виде числа, выражения, ссылки на ячейки или текста, которые определяют, какие ячейки будут учитываться. Например, критерии могут быть выражены в 32, "32", &gt; "32", "apples" или B4.</param>
        <summary>Подсчитывают количество ячеек в диапазоне, которые соответствуют заданным условиям.</summary>
        <returns>Возвращает <see cref="T:System.Double" /> .</returns>
        <remarks><para>В качестве критериев можно использовать поддеревные знаки, вопросии (?) и звездочка (*). Вопроси метка соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти действительный вопросии или звездочка, введите тильду (~) перед знаком.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Один или несколько диапазонов для оценки связанных критериев.</param>
        <param name="Arg2">Один или несколько критериев в виде числа, выражения, ссылки на ячейку или текста, которые определяют, какие ячейки будут учитываться. Например, критерии могут быть выражены как 32, "32", &gt; "32", "apples" или B4.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Подсчитывают количество ячеек в диапазоне, которые соответствуют нескольким критериям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Каждая ячейка в диапазоне учитывается только в том случае, если для этой ячейки соответствуют все указанные условия. </para>
          <para>Если ячейка в любом аргументе является пустой ячейкой, <b>CountIfs</b> обрабатывает ее как значение 0. </para>
          <para>В критериях можно использовать под wildcard characters, question mark (?) and asterisk (*). Знак вопроса соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти действительный вопросии или звездочка, введите тильду (~) перед знаком.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия системы безопасности.</param>
        <param name="Arg3">Количество выплат по купонам в год. Для годовых платежей частота = 1; для semiannual, частота = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg4">Тип используемого отсчета дня.</param>
        <summary>Возвращает количество дней с начала купонного периода до даты расчета.</summary>
        <returns>To be added.</returns>
        <remarks><para>В следующей таблице содержится список значений для <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский (30/360)</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г. через 30 лет после 1 января 2008 г. </para>
          <para>Все аргументы усечены до integers. </para>
          <para>Если расчет или дата возрастания не являются допустимой датой, <b>в день</b> купюры создается ошибка. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>то в coupDayBs</b> создается ошибка. </para>
          <para>Если за &lt; основу 0 или &gt; 4, <b>CoupDayBs</b> генерирует ошибку. </para>
          <para>Если расчет ≥ возраста, <b>coupDayBs</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия системы безопасности.</param>
        <param name="Arg3">Количество выплат по купонам в год. Для годовых платежей частота = 1; для semiannual, частота = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg4">Тип используемого отсчета дня.</param>
        <summary>Возвращает количество дней в купонный период, содержащий дату расчета.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>В следующей таблице содержатся значения, используемые в <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский (30/360)</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г. через 30 лет после 1 января 2008 г. </para>
          <para>Все аргументы усечены до integers. </para>
          <para>Если расчет или дата возраста не являются допустимой датой, <b>в день купюни</b> создается ошибка. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>то при сдаче</b> дней купирования создается ошибка. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>CoupDays</b> генерирует ошибку. </para>
          <para>Если расчет ≥ возраста, <b>CoupDays</b> генерирует ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия системы безопасности.</param>
        <param name="Arg3">Количество выплат по купонам в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg4">Тип используемого отсчета дней.</param>
        <summary>Возвращает количество дней с даты расчета до следующей даты выплат.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>В следующей таблице содержатся значения, используемые в <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский (30/360)</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Все аргументы усечены до integers. </para>
          <para>Если расчет или срок готовности не являются допустимой датой, <b>в CoupDaysNc</b> создается ошибка. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>coupDaysNc</b> создает ошибку. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>CoupDaysNc</b> создает ошибку. </para>
          <para>Если расчет ≥ возраста, <b>CoupDaysNc</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия системы безопасности.</param>
        <param name="Arg3">Количество выплат по купонам в год. Для годовых платежей частота = 1; для semiannual, частота = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg4">Тип используемого отсчета дней.</param>
        <summary>Возвращает номер, который представляет следующую дату выплат после даты расчета.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>В следующей таблице содержатся значения, используемые в <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский (30/360)</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Все аргументы усечены до integers. </para>
          <para>Если расчет или срок готовности не являются допустимой датой, <b>coupNcd</b> создает ошибку. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>coupNcd</b> создает ошибку. </para>
          <para>Если за &lt; основу 0 или &gt; 4, <b>CoupNcd</b> генерирует ошибку. </para>
          <para>Если расчет ≥ возраста, <b>CoupNcd</b> генерирует ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия системы безопасности.</param>
        <param name="Arg3">Количество выплат по купонам в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg4">Тип используемого отсчета дня.</param>
        <summary>Возвращает количество выплат по купонам между датой расчета и датой расчета, округлимым до ближайшего целого купона.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>В следующей таблице содержатся значения, используемые в <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский (30/360)</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Все аргументы усечены до integers. </para>
          <para>Если расчет или срок готовности не являются допустимой датой, <b>coupNum</b> создает ошибку. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>coupNum</b> создает ошибку. </para>
          <para>Если за &lt; основу 0 или &gt; 4, <b>CoupNum</b> генерирует ошибку. </para>
          <para>Если расчет ≥ возраста, <b>CoupNum</b> генерирует ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия системы безопасности.</param>
        <param name="Arg3">Количество выплат по купонам в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg4">Тип используемого отсчета дней.</param>
        <summary>Возвращает предыдущую дату выплат до даты расчета.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>В следующей таблице содержатся значения, используемые в <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Все аргументы усечены до integers. </para>
          <para>Если расчет или срок готовности не являются допустимой датой, <b>coupPcd</b> создает ошибку. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>coupPcd</b> создает ошибку. </para>
          <para>Если за &lt; основу 0 или &gt; 4, <b>CoupPcd</b> генерирует ошибку. </para>
          <para>Если расчет ≥ возраста, <b>CoupPcd</b> генерирует ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Первая ячейка диапазона целомеров.</param>
        <param name="Arg2">Второй диапазон ячеец — целомеры.</param>
        <summary>Возвращает ковариантность, среднее количество продуктов отклонений для каждой пары точек данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" /> этом и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" /> методе.</para>
          <para>Используйте ковариантство для определения связи между двумя наборами данных. Например, вы можете проверить, есть ли более высокий уровень образования. </para>
          <para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если количество точек данных <paramref name="Arg1" /> <paramref name="Arg2" /> разное, <b>Covar</b> создает ошибку. </para>
          <para>Если один <paramref name="Arg1" /> из этих <paramref name="Arg2" /> пуст или пуст, <b>Covar</b> создает ошибку. </para>
          <para>Ковариантство: </para>
          <para>Рис. 1. Уравнение для ковариантного</para>
          <para> </para>
          <para> </para>
          <para>где x и y — пример означает AVERAGE(array1) и AVERAGE(array2), а n — размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Первая ячейка диапазона целомеров.</param>
        <param name="Arg2">Второй диапазон ячеец — целомеры.</param>
        <summary>Возвращает ковариантность для пользователей, среднее количество продуктов отклонения для каждой пары точек данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте <b>Covariance_P</b> для определения связи между двумя наборами данных. Например, вы можете проверить, есть ли более высокий уровень образования.</para>
          <para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если количество точек данных разное, Covariance_P <paramref name="Arg1" /> <paramref name="Arg2" /> создает ошибку. <b></b> </para>
          <para>Если любой из этих Covariance_P <paramref name="Arg1" /> <paramref name="Arg2" /> пуст, <b></b> создается ошибка. </para>
          <para>Ковариантство: </para>
          <para>Рис. 1. Уравнение для ковариантного</para>
          <para> </para>
          <para> </para>
          <para>где x и y — пример означает AVERAGE(array1) и AVERAGE(array2), а n — размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — первый диапазон ячеей из целомеров.</param>
        <param name="Arg2">Array2 — второй диапазон ячеей, в который вмесяют целомеры.</param>
        <summary>Возвращает пример ковариантность, среднее количество продуктов отклонений для каждой пары точек данных в двух наборах данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если массивы array1 и array2 имеют разное количество точек <b>данных,</b> Covariance_S возвращает значение #N/A. </para>
          <para>Если массив1 или array2 пуст или содержит только 1 точку <b>данных,</b> Covariance_S возвращает #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает 32-битное целое число, указывающее на приложение, в котором объект был создан. Только для <b>чтения(int</b> int in C#).</summary>
        <value>To be added.</value>
        <remarks><para>Если объект был создан в Microsoft Excel, это свойство возвращает строку XCEL, эквивалентную 5843454C. Свойство <b>Creator</b> предназначено для использования в Microsoft Excel для Macintosh, где каждое приложение имеет четырех символьный код создателя. Например, в Microsoft Excel есть код создателя XCEL.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Количество пробных пробных версиях для Зуули.</param>
        <param name="Arg2">Вероятность успеха в каждой пробной версиях.</param>
        <param name="Arg3">Значение критерия.</param>
        <summary>Возвращает наименьшее значение, для которого накопительное биномиативное распределение больше или равно значению критерия.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте эту функцию для приложений контроля качества. Например, используйте <b>CritBinom,</b> чтобы определить наибольшее количество неисправных частей, которые могут сойти со строки сборки, не отклонив весь процесс.</para>
          <para>Если какой-либо аргумент не является числовым, <b>CritBinom</b> создает ошибку. </para>
          <para>Если пробные версия не являются integer, она усечена. </para>
          <para>Если пробная &lt; версия 0, <b>CritBinom</b> создает ошибку. </para>
          <para>Если probability_s 0 или &lt; probability_s &gt; 1, <b>CritBinom</b> создает ошибку. </para>
          <para>Если альфа &lt; 0 или &gt; альфа-1, <b>CritBinom</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которого необходимо косеканс.</param>
        <summary>Возвращает косекант угла.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которого нужен гиперболический косеканс.</param>
        <summary>Возвращает гиперболический косекаант угла.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Процентная ставка.</param>
        <param name="Arg2">Общее количество периодов оплаты.</param>
        <param name="Arg3">Настоящее значение.</param>
        <param name="Arg4">Первый период вычисления. Периоды оплаты начинаются с 1.</param>
        <param name="Arg5">Последний период вычисления.</param>
        <param name="Arg6">Сроки оплаты.</param>
        <summary>Возвращает накопительный процент по кредиту между start_period и end_period.</summary>
        <returns>To be added.</returns>
        <remarks><para>В следующих таблицах перечислены значения, используемые в <paramref name="Arg6" /> .</para>
          <list type="table">
            <item>
              <term>0 (ноль)</term>
              <description>Платеж в конце периода</description>
            </item>
            <item>
              <term>1 </term>
              <description>Платеж в начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы согласованы с единицами, которые используются для указания скорости и nper. Если вы делаете ежемесячные платежи по кредиту на 4 года с годовым процентом 12 процентов, используйте 12 %/12 для ставки и 4*12 для <paramref name="Arg2" /> . Если вы делаете годовые платежи по одному кредиту, используйте 12 % для ставки и 4 для <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" /> , и тип <paramref name="Arg5" /> усечены до integers. </para>
          <para>Если ≤ 0, ≤ 0 или <paramref name="Arg2" /> ≤ <paramref name="Arg3" /> 0, <b>CumIPmt</b> создает ошибку. </para>
          <para>Если <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 или <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> , <b>CumIPmt</b> создает ошибку. </para>
          <para>Если <paramref name="Arg6" /> за исключением 0 или 1, <b>CumIPmt</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Процентная ставка.</param>
        <param name="Arg2">Общее количество периодов оплаты.</param>
        <param name="Arg3">Настоящее значение.</param>
        <param name="Arg4">Первый период вычисления. Периоды оплаты начинаются с 1.</param>
        <param name="Arg5">Последний период вычисления.</param>
        <param name="Arg6">Последний период вычисления.</param>
        <summary>Возвращает накопительный суммарный основной суммы, выплаченный по кредиту между start_period и end_period.</summary>
        <returns>To be added.</returns>
        <remarks><para>В следующих таблицах перечислены значения, используемые в <paramref name="Arg6" /> .</para>
          <list type="table">
            <item>
              <term>0 (ноль)</term>
              <description>Платеж в конце периода</description>
            </item>
            <item>
              <term>1 </term>
              <description>Платеж в начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы согласованы с единицами, которые вы используете для указания скорости и nper. Если вы делаете ежемесячные платежи по кредиту на 4 года с годовым процентом 12 процентов, используйте 12 %/12 для ставки и 4*12 для <paramref name="Arg2" /> . Если вы делаете годовые платежи по одному кредиту, используйте 12 % для ставки и 4 для <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" /> , и тип <paramref name="Arg5" /> усечены до integers. </para>
          <para>Если ≤ 0, ≤ 0 или <paramref name="Arg2" /> ≤ <paramref name="Arg3" /> 0, <b>CumPrinc</b> создает ошибку. </para>
          <para>Если <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 или <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> , <b>CumPrinc</b> создает ошибку. </para>
          <para>Если <paramref name="Arg6" /> за исключением 0 или 1, <b>CumPrinc</b> создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как Age или Yield, или число (без кавычка), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Диапазон ячеек, содержащий условия, которые вы указываете. В качестве аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Среднее значение значений в столбце списка или базы данных, которые соответствуют заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейку, используется знак равного значения, microsoft Excel оценивает, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где записи текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date(Arg2) и end_date (Arg1) — это две даты, между которыми вы хотите узнать количество дней.</param>
        <param name="Arg2">start_date(Arg2) и end_date (Arg1) — это две даты, между которыми вы хотите узнать количество дней.</param>
        <summary>Возвращает количество дней между двумя датами.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Две даты, между которыми вы хотите узнать количество дней. Если start_date (Arg1) происходит после end_date (Arg2), Days360 возвращает отрицательное число. Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций.</param>
        <param name="Arg2">Две даты, между которыми вы хотите узнать количество дней. Если start_date (Arg1) происходит после end_date (Arg2), Days360 возвращает отрицательное число. Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций.</param>
        <param name="Arg3">Boolean value that specifies whether to use the U.S. or European method in the calculation.</param>
        <summary>Возвращает количество дней между двумя датами на основе 360-дневного года (12 30-дневных месяцев), который используется в некоторых расчетах бухгалтерского учета.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте эту функцию для вычисления платежей, если система бухгалтерского учета основана на 12 30-дневных месяцах. В следующих таблицах содержатся значения для <paramref name="Arg3" /> .</para>
          <list type="table">
            <item>
              <term>
                <b>false</b> или пропущено</term>
              <description>Метод NASD (США). Если начальной датой является 31-е время месяца, она становится равной 30-й дате того же месяца. Если конечная дата — 31-е время месяца, а начальная дата — раньше 30-го месяца, конечная дата становится равной 1-му месяца следующего месяца; в противном случае конечная дата будет равна 30-му месяцу.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Европейский метод. Даты начала и окончания, которые происходят 31-го месяца, становятся равными 30-му месяца.</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость — начальная стоимость актива.</param>
        <param name="Arg2">Salvage — значение в конце амортизации (иногда называемое значением salvage для актива).</param>
        <param name="Arg3">Срок жизни — количество периодов, в течение которых актив амортизации (иногда называется полезным сроком жизни актива).</param>
        <param name="Arg4">Период — период, для которого необходимо вычислить амортизация. Период должен использовать те же единицы, что и жизненный период.</param>
        <param name="Arg5">Месяц — количество месяцев в первом году. Если месяц опущен, предполагается, что это 12.</param>
        <summary>Возвращает амортизация актива за указанный период с помощью метода фиксированного снижения баланса.</summary>
        <returns>To be added.</returns>
        <remarks><para>Метод фиксированного баланса с отклонением вычисляет амортизация с фиксированной скоростью. Для вычисления амортизации за период в DB используются следующие формулы:</para>
          <para>(cost - total depreciation from prior periods) * rate</para>
          <para>где:</para>
          <para>rate = 1 - ((salvage / cost) ^ (1 / life)), rounded to three decimal places</para>
          <para>Амортизация за первый и последний периоды — особый случай. Для первого периода в DB используется эта формула:</para>
          <para>cost * rate * month / 12</para>
          <para>В течение последнего периода в DB используется эта формула:</para>
          <para>((cost - total depreciation from prior periods) * rate * (12 - month)) / 12</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст или ссылка на ячейку, содержаную текст, который необходимо изменить.</param>
        <summary>Преобразует полу ширину (однобайтов) букв в строке символов в полно ширину (двухбайт) символов. Имя функции (и символы, которые она преобразует) зависит от языковых параметров.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как Age или Yield, или число (без кавычка), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указали. Для аргумента условия можно использовать любой диапазон, если аргумент содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Подсчитывают ячейки, содержащие числа в столбце списка или базы данных, которые соответствуют заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейке, используется знак равного значения, Microsoft Excel оценивает то, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как Age или Yield, или число (без кавычка), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указали. Для аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Подсчитывает несовершенные ячейки в столбце списка или базы данных, которые соответствуют условиям, которые вы указали.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейке, используется знак равного значения, Microsoft Excel оценивает то, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость — начальная стоимость актива.</param>
        <param name="Arg2">Salvage — значение в конце амортизации (иногда называемое значением salvage для актива). Это значение может быть 0.</param>
        <param name="Arg3">Срок жизни — количество периодов, в течение которых актив амортизации (иногда называется полезным сроком жизни актива).</param>
        <param name="Arg4">Период — период, для которого необходимо вычислить амортизация. Период должен использовать те же единицы, что и жизненный период.</param>
        <param name="Arg5">Фактор — скорость снижения баланса. Если фактор опущен, он считается 2 (метод двойного снижения баланса).</param>
        <summary>Возвращает амортизация актива за указанный период с помощью метода двойного снижения баланса или другого указанного метода.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Все пять аргументов должны быть положительными числами.</para>
          <para>Метод двойной амортизации убывающего баланса вычисляет амортизацию с ускоренной ставкой. Амортизация максимальна за первый период и уменьшается в последующие периоды. <b>Ddb</b> использует следующую формулу для вычисления амортизации за период:</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>Измените фактор, если вы не хотите использовать метод двойного снижения баланса. </para>
          <para>Используйте эту функцию, если вы хотите перейти к прямолинейной амортизации, если амортизация больше, чем вычисление баланса при <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" /> отклонении.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — десятичной дремуль, который вы хотите преобразовать. Если число отрицательное, допустимые значения места игнорируются, а <b>Dec2Bin</b> возвращает 10-битный двоичный номер, в котором наиболее значимым битом является бит знака. Оставшиеся 9 битов — это биты величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <param name="Arg2">Места — количество символов, которые необходимо использовать. Если число знаков опущено, <b>dec2Bin</b> использует минимальное необходимое количество символов. Места полезны для заполнения возвращаемой величины с нулями в 0.</param>
        <summary>Преобразует десятичное число в двоичное.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число &lt; -512 или &gt; номер 511, <b>Dec2Bin</b> возвращает #NUM! значение ошибки. </para>
          <para>Если число не является числом, <b>Dec2Bin</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если <b>dec2Bin</b> требует больше знаков, чем знаков мест, он возвращает #NUM! значение ошибки. </para>
          <para>Если место не является integer, оно усечено. </para>
          <para>Если количество мест не является числовым, <b>Dec2Bin</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если количество мест нулевое или отрицательное, <b>Dec2Bin</b> возвращает значение #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — десятичной дремуль, который вы хотите преобразовать. Если число отрицательное, места игнорируются, а <b>Dec2Hex</b> возвращает 10-символьное (40-битное) число, в котором наиболее значимым битом является бит знака. Оставшиеся 39 битов являются битами величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <param name="Arg2">Места — количество символов, которые необходимо использовать. Если места не заданы, <b>Dec2Hex использует</b> минимальное необходимое количество символов. Места полезны для заполнения возвращаемой величины с нулями в 0.</param>
        <summary>Преобразует десятичной число в hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если номер &lt; -549 755 813 888 или &gt; номер 549 755 813 887, <b>Dec2Hex</b> возвращает #NUM! значение ошибки. </para>
          <para>Если число не является числом, <b>Dec2Hex</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если <b>dec2Hex</b> требует больше знаков, чем места, возвращается #NUM! значение ошибки. </para>
          <para>Если места не являются integer, оно усечено. </para>
          <para>Если число мест не задано, <b>Dec2Hex</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Dec2Hex</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — десятичной дремуль, который вы хотите преобразовать. Если число отрицательное, места игнорируются, а <b>Dec2Oct</b> возвращает 10-символьное (30-битное) октальный номер, в котором наиболее значимым битом является бит знака. Оставшиеся 29 битов являются битами величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <param name="Arg2">Места — количество символов, которые необходимо использовать. Если места не замещены, <b>dec2Oct</b> использует минимальное необходимое количество символов. Места полезны для заполнения возвращаемой величины с нулями в 0.</param>
        <summary>Преобразует десятичной номер в октальный.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если номер &lt; -536 870 912 или &gt; номер 536 870 911, <b>Dec2Oct</b> возвращает #NUM! значение ошибки. </para>
          <para>Если число не является числом, <b>Dec2Oct</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если <b>dec2Oct</b> требует больше знаков, чем знаков мест, возвращается #NUM! значение ошибки. </para>
          <para>Если места не являются integer, оно усечено. </para>
          <para>Если количество мест ненумерно, <b>Dec2Oct</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Dec2Oct</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер, который нужно преобразовать.</param>
        <param name="Arg2">Базовый радикс преобразуемого числа.</param>
        <summary>Преобразует текстовое представление числа в заданной базе в десятичной.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle — угол в радианах, которые нужно преобразовать.</param>
        <summary>Преобразует радианы в градусы.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1 — первый номер.</param>
        <param name="Arg2">Number2 — второй номер. Если опущен, номер 2 считается нулем.</param>
        <summary>Проверяет, равно ли два значения. Возвращает 1, если number1 = number2; возвращает 0 в противном случае.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используйте эту функцию для фильтрации набора значений. Например, суммируете несколько <b>функций delta,</b> чтобы вычислить количество одинаковых пар. Эта функция также называется функцией Delta Kronecker.</para>
          <para>Если номер 1 не является числовым, <b>Delta</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если номер 2 не является числовым, <b>Delta</b> возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — это от 1 до 30 аргументов, для которых требуется вычислить сумму отклонений квадратов. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает сумму квадратов отклонений точек данных по их примеру.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Уравнение для суммы отклонений квадратов: </para>
          <para>Рис. 1. Уравнение для суммы отклонений квадратов</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как Age или Yield, или число (без кавычка), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указали. Для аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Извлекает одно значение из столбца списка или базы данных, которое соответствует заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейке, используется знак равного значения, Microsoft Excel оценивает то, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Pr — цена безопасности за 100 долларов США.</param>
        <param name="Arg4">Активация — значение активации системы безопасности на 100 долларов США.</param>
        <param name="Arg5">Basis - the type of day count basis to use.</param>
        <summary>Возвращает ставку скидки для системы безопасности.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста. </para>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г. через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст и основа усечены до integers. </para>
          <para>Если расчет или возраст не являются допустимым серийным номером даты, <b>Disc</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если pr ≤ 0 или активация ≤ 0, <b>Disc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>Disc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если срок ≥, <b>Disc</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>Диск</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для вычисления метода Disc</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>B = количество дней в году в зависимости от года.</para>
          <para>DSM — количество дней между расчетом и возрастом.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как Age или Yield, или число (без кавычка), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указали. Для аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Возвращает наибольшее число в столбце списка или базы данных, которое соответствует заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейку, используется знак равного значения, microsoft Excel оценивает, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как Age или Yield, или число (без кавычка), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указали. В качестве аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Возвращает наименьшее число в столбце списка или базы данных, которое соответствует заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейке, используется знак равного значения, Microsoft Excel оценивает то, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — число, ссылка на ячейку, содержащая число, или формула, которая оценивается как число.</param>
        <param name="Arg2">Decimals — количество цифр справа от десятичной точки. Если десятичность отрицательное, число округлено слева от десятичной точки. Если опустить десятичность, предполагается, что это 2.</param>
        <summary>Функция, описанная в этом разделе справки, преобразует число в текстовый формат и применяет символ валюты. Имя функции (и символ, который она применяет) зависит от языковых параметров.</summary>
        <returns>To be added.</returns>
        <remarks><para>Главное различие между форматированием ячейки, которая содержит число с помощью команды Cells (меню Format) и форматированием числа непосредственно с помощью функции <b>"Доллара",</b> состоит в том, что в долларах результат преобразуется в текст. <b></b> Число, отформатированные с помощью команды Cells, по-прежнему является числом. Вы можете продолжать использовать числа, отформатированные с помощью доллара в формулах, так как Microsoft Excel преобразует числа, внося в виде текстовых значений, в числа при расчете. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fractional_dollar — это число, выраженное дробью.</param>
        <param name="Arg2">Дробное — это количество, используемого в деномилиторе дробной части.</param>
        <summary>Преобразует цену в долларах, выраженную в дробной части, в цену доллара, выраженную десятичной дробной частью. Используйте DOLLARDE для преобразования дробных чисел доллара, например цен на ценные бумаги, в десятичных числах.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если дробная часть не является integer, она усечена. </para>
          <para>Если доля меньше 0, <b>DollarDe</b> возвращает #NUM! значение ошибки. </para>
          <para>Если доля 0, <b>DollarDe</b> возвращает #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Decimal_dollar — это десятичной число.</param>
        <param name="Arg2">Дробное — это integer to use in the denominator of a fraction.</param>
        <summary>Преобразует цену в долларах, выраженную десятичной дробной частью. Используйте DOLLARFR для преобразования десятичных чисел в дробные числа, например цены на ценные бумаги.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если дробная часть не является integer, она усечена. </para>
          <para>Если доля меньше 0, <b>DollarFr</b> возвращает #NUM! значение ошибки. </para>
          <para>Если доля 0, <b>DollarFr</b> возвращает #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — это диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как Age или Yield, или число (без кавычка), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — это диапазон ячеек, содержащий условия, которые вы указали. Для аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Умножает значения в столбце списка или базы данных, которые соответствуют заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейку, используется знак равного значения, microsoft Excel оценивает, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, например "Возраст" или "Доход", или число (без кавычках), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указали. Для аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Оценивает стандартное отклонение группы на основе примера с помощью чисел в столбце списка или базы данных, которые соответствуют заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейке, используется знак равного значения, Microsoft Excel оценивает то, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — это диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как Age или Yield, или число (без кавычка), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указали. В качестве аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Вычисляет стандартное отклонение погона для всей группы, используя числа в столбце списка или базы данных, которые соответствуют заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейку, используется знак равного значения, microsoft Excel оценивает, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как Age или Yield, или число (без кавычка), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указали. Для аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Добавляет числа в столбец списка или базы данных, которые соответствуют заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейку, используется знак равного значения, microsoft Excel оценивает, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Купон — годовая ставка купона для системы безопасности.</param>
        <param name="Arg4">Yld — годовая доходность системы безопасности.</param>
        <param name="Arg5">Частота — количество выплат по купонам в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg6">Basis - the type of day count basis to use.</param>
        <summary>Возвращает длительность Macauley для предполагаемого значения четного значения 100 долларов США. Длительность определяется в качестве средневзвешаемого значения настоящей стоимости денежных потоков и используется в качестве показателя реакции цены на стоимость стоимостью в виде стоимости денежных средств на изменение доходной стоимости.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский (30/360)</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст, частота и основа усечены до integers. </para>
          <para>Если расчет или срок не является допустимой датой, <b>duration</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если купон &lt; 0 или yld &lt; 0, <b>Duration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>duration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>duration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>duration</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, такими как Age или Yield, или число (без кавычка), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указали. В качестве аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Оценивает дисперсию количества людей на основе примера с помощью чисел в столбце списка или базы данных, которые соответствуют заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейке, используется знак равного значения, Microsoft Excel оценивает то, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">База данных — диапазон ячеек, который составляет список или базу данных. База данных — это список связанных данных, в котором строками связанных сведений являются записи, а столбцы данных — поля. Первая строка списка содержит метки для каждого столбца.</param>
        <param name="Arg2">Поле — указывает, какой столбец используется в функции. Введите метку столбца, заключенную между двойными кавычками, например "Возраст" или "Доход", или число (без кавычках), которое представляет положение столбца в списке: 1 для первого столбца, 2 для второго столбца и так далее.</param>
        <param name="Arg3">Критерии — диапазон ячеек, содержащий условия, которые вы указали. Для аргумента условия можно использовать любой диапазон, если он содержит по крайней мере одну метку столбца и хотя бы одну ячейку под меткой столбца, в которой указывается условие для столбца.</param>
        <summary>Вычисляет дисперсию группы в зависимости от всей группы, используя числа в столбце списка или базы данных, которые соответствуют заявимным условиям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Так как при введите текст или значение в ячейке, используется знак равного значения, Microsoft Excel оценивает то, что вы введите; однако это может привести к непредвиденным результатам фильтрации. Чтобы указать оператор сравнения равенства для текста или значения, введите критерии в качестве строкового выражения в соответствующей ячейке в диапазоне условий: </para>
          <para>=''=entry''</para>
          <para>Где запись — это текст или значение, которые вы хотите найти. Например,</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>При фильтрации текстовых данных Excel не различает верхний и нижний регистры символов. Однако вы можете использовать формулу для выполнения поиска с чувствительностью к делу.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала. Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</param>
        <param name="Arg2">Месяцы — количество месяцев до или после start_date. Положительное значение для месяцев дает будущую дату; отрицательное значение дает даты, прошедшие.</param>
        <summary>Возвращает серийный номер, который представляет дату, которая является указанным числом месяцев до или после указанной даты (start_date). Используйте EDATE для расчета дат или дат окончания срока, которые выпадали в тот же день месяца, что и дата проблемы.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Если start_date не является допустимой датой, <b>EDate</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если месяцев не является integer, он усечен.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nominal_rate - номинальная процентная ставка.</param>
        <param name="Arg2">Npery — количество составных периодов в год.</param>
        <summary>Возвращает эффективную годовую процентную ставку с учетом номинальной ежегодной процентной ставки и количества составных периодов в год.</summary>
        <returns>To be added.</returns>
        <remarks><para>Npery усечен до integer. </para>
          <para>Если один из аргументов не является числовым, <b>эффект</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если nominal_rate ≤ 0 или npery &lt; 1, <b>эффект</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>Эффект</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для вычисления метода Effect</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст, который необходимо закодировать.</param>
        <summary>URL-адрес кодирует аргумент.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала. Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</param>
        <param name="Arg2">Месяцы — количество месяцев до или после start_date. Положительное значение за месяцы дает будущую дату; отрицательное значение дает даты, прошедшие.</param>
        <summary>Возвращает серийный номер за последний день месяца, который является указанным числом месяцев до или после start_date. Используйте EOMONTH для расчета дат или сроков, которые выпадают на последний день месяца.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Если start_date является не допустимой датой, <b>компания EoMonth</b> возвращает #NUM! значение ошибки. </para>
          <para>Если start_date месяцев возвращает недействительные даты, <b>EoMonth</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit — нижняя граница для интеграции <b>Erf.</b></param>
        <param name="Arg2">Upper_limit - верхняя граница для интеграции <b>Erf</b>. Если опущен, Erf интегрируется между нулем и lower_limit.</param>
        <summary>Возвращает функцию ошибки, интегрированную между lower_limit и upper_limit.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" /> методе.</para>
          <para>Если lower_limit не является числом, <b>Erf</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если lower_limit отрицательный, <b>Erf</b> возвращает #NUM! значение ошибки. </para>
          <para>Если upper_limit не является числом, <b>Erf</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если upper_limit отрицательный результат, <b>Erf</b> возвращает #NUM! значение ошибки. </para>
          <para>Рис. 1. Уравнение для вычисления метода Erf</para>
          <para> </para>
          <para> </para>
          <para>Рис. 2. Уравнение для вычисления метода Erf</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit - нижняя граница для интеграции ERF.</param>
        <summary>Возвращает функцию ошибки, интегрированную между нулем и lower_limit.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если lower_limit не является числом, <b></b> Erf_Precise создает ошибку. Если lower_limit отрицательный, <b>Erf_Precise</b> создает ошибку.</para>
          <para>Рис. 1. Уравнение для вычисления Erf_Precise метода</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Первый аргумент.</param>
        <summary>Возвращает дополнительную функцию ERF, интегрированную между указанным параметром и бесконечностью.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" /> методе.</para>
          <para>Если эта функция недоступна и возвращает #NAME? ошибка, необходимо установить и загрузить надстройку Analysis ToolPak.</para>
          <para>Если параметр не является числовым, <b>ErfC</b> возвращает #VALUE! значение ошибки.</para>
          <para>Если параметр отрицательный, <b>ErfC</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение для вычисления.</param>
        <summary>Возвращает дополнительную функцию ошибки, интегрированную между указанным значением и бесконечностью.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если указанное значение не является <b></b> числовым, ErfC_Precise создает ошибку.</para>
          <para>Если указанное значение <b>отрицательное,</b> ErfC_Precise создает ошибку.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — значение для округли.</param>
        <summary>Возвращает число, округлив до ближайшего даже числа. Эту функцию можно использовать для обработки элементов, которые приходят из двух элементов. Например, ящик упаковки принимает строки из одного или двух элементов. При заполнении числа элементов, округлимого до ближайших двух элементов, соответствует емкости.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число не является числовым, <b>возвращается</b> даже #VALUE! значение ошибки. </para>
          <para>Независимо от знака числа значение округляется вверх при откорректированном от нуля. Если число является even integer, округление не происходит.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение функции.</param>
        <param name="Arg2">Лямбда - значение параметра.</param>
        <param name="Arg3">Накопительный — логическое значение, которое указывает, какую форму экспоненциальной функции предоставить. Если <b>совокупное имеет</b>Expon_Dist <b>возвращает</b> накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция плотности вероятности.</param>
        <summary>Возвращает экспоненциальное распределение. Используйте EXPON_DIST для моделирования времени между событиями, например, сколько времени занимает автоматизированный банковский кассовый аппарат для доставки денежных средств. Например, вы можете использовать EXPON_DIST, чтобы определить вероятность того, что процесс займет не более 1 минуты.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x или лямбда-Expon_Dist <b>возвращает</b> #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>Expon_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если лямбда-≤ <b>0,</b> Expon_Dist возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции плотности вероятности: </para>
          <para>Рис. 1. Уравнение для функции плотности вероятности</para>
          <para> </para>
          <para> </para>
          <para>Уравнение для функции накопительного распределения:</para>
          <para>Рис. 2. Уравнение для функции накопительного распределения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение функции.</param>
        <param name="Arg2">Лямбда - значение параметра.</param>
        <param name="Arg3">Накопительный — логическое значение, которое указывает, какую форму экспоненциальной функции предоставить. Если <b>совокупное имеет true,</b> <b>ExponDist</b> возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция плотности вероятности.</param>
        <summary>Возвращает экспоненциальное распределение. Используйте <b>ExponDist для</b> моделирования времени между событиями, например, сколько времени занимает автоматизированный банковский кассовый аппарат для доставки денежных средств. Например, с помощью <b>ExponDist</b> можно определить вероятность того, что процесс займет не более 1 минуты.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если x или лямбда-лямбда-система не числуемы, <b>ExponDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>ExponDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если лямбда-≤ 0, <b>ExponDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции плотности вероятности: </para>
          <para>Рис. 1. Уравнение для функции плотности вероятности</para>
          <para> </para>
          <para> </para>
          <para>Уравнение для функции накопительного распределения:</para>
          <para>Рис. 2. Уравнение для функции накопительного распределения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, при котором необходимо оценить функцию.</param>
        <param name="Arg2">Deg_freedom1 — числовая степень свобод.</param>
        <param name="Arg3">Deg_freedom2 — степени свободного выражения.</param>
        <param name="Arg4">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное имеет</b> <b>F_Dist</b> возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция плотности вероятности.</param>
        <summary>Возвращает распределение вероятности F.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числовым, F_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x отрицательный, <b>F_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если deg_freedom1 или deg_freedom2 не является integer, оно усечено. </para>
          <para>Если deg_freedom1 &lt; 1, <b>F_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если deg_freedom &lt; 1, <b>F_Dist</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, при котором необходимо оценить функцию.</param>
        <param name="Arg2">Degrees_freedom1 — числовая степень свобод.</param>
        <param name="Arg3">Degrees_freedom2 — степеней свободного выражения.</param>
        <summary>Возвращает правое распределение вероятности F. С помощью этой функции можно определить, имеют ли два набора данных разные степени разнообразия. Например, вы можете изучить показатели теста для детей и детей, которые входили в средней школы, и определить, отличается ли вариативность для самок от того, что обнаружено у самцов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числовым, F_Dist_RT возвращает #VALUE! значение ошибки. </para>
          <para>Если x отрицательный, <b>F_Dist_RT</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom1 или degrees_freedom2 не является integer, оно усечено. </para>
          <para>Если degrees_freedom1 &lt; 1 или degrees_freedom1 ≥ 10^10, <b></b> F_Dist_RT возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom2 &lt; 1 degrees_freedom2 ≥ 10^10, F_Dist_RT <b></b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>F_Dist_RT</b> вычисляется как F_DIST_RT=P( F x), где F — это случайная переменная с распределением F с degrees_freedom1 и degrees_freedom2 степенями &gt; свободности.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с накопительным распределением F.</param>
        <param name="Arg2">Deg_freedom1 — числовая степень свобод.</param>
        <param name="Arg3">Deg_freedom2 — степени свободного выражения.</param>
        <summary>Возвращает обратное распределение вероятности F.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числом, F_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или &lt; &gt; 1, F_Inv возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если deg_freedom1 или deg_freedom2 не является integer, оно усечено. </para>
          <para>Если deg_freedom1 &lt; 1 или deg_freedom2 &lt; 1, <b></b> F_Inv возвращает #NUM! значение ошибки. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с накопительным распределением F.</param>
        <param name="Arg2">Degrees_freedom1 — числовая степень свобод.</param>
        <param name="Arg3">Degrees_freedom2 — степеней свободного выражения.</param>
        <summary>Возвращает обратное распределение вероятности F с правой стороной. Если p = F_DIST_RT(x,...), F_INV_RT(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Распределение F можно использовать в F-тесте, который сравнивает степень вариативности в двух наборах данных. Например, можно проанализировать распределение дохода в США и Канаде, чтобы определить, имеют ли две страны одинаковый уровень разнообразия дохода.</para>
          <para>Если какой-либо аргумент не <b></b> является числовым, F_Inv_RT возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или &lt; вероятность &gt; 1, F_Inv_RT возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если degrees_freedom1 или degrees_freedom2 не является integer, оно усечено. </para>
          <para>Если degrees_freedom1 &lt; 1 или degrees_freedom1 ≥ 10^10, <b></b> F_Inv_RT возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom2 &lt; 1 degrees_freedom2 ≥ 10^10, F_Inv_RT <b></b> возвращает #NUM! значение ошибки.</para>
          <para>
            <b>F_Inv_RT</b> можно использовать для возврата критически важных значений из распределения F. Например, выходные данные вычисления ANOVA часто включают данные для статистики F, вероятности F и критического значения F на уровне важности 0,05. Чтобы вернуть критическое значение F, используйте уровень важности в качестве аргумента вероятности для <b>F_Inv_RT.</b></para>
          <para>Учитывая значение <b>вероятности,</b> F_Inv_RT ищет это значение x таким образом, чтобы F_DIST_RT(x, degrees_freedom1, degrees_freedom2) = вероятность. Таким образом, <b>точность F_Inv_RT</b> зависит от <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> точности. <b>F_Inv_RT</b> использует метод итеративного поиска. Если поиск не сошел после 64 итерации, функция возвращает значение #N/A ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — первый массив или диапазон данных.</param>
        <param name="Arg2">Array2 — второй массив или диапазон данных.</param>
        <summary>Возвращает результат F-теста. Тест F возвращает двухвостую вероятность того, что дисперсии в массивах array1 и array2 не существенно отличаются. Используйте эту функцию, чтобы определить, есть ли в двух примерах разные дисперсии. Например, с учетом результатов тестирования из общедоступных и частных учебных баллов можно проверить, отличаются ли эти учебные заведения от разных уровней разнообразия показателей тестирования.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если число точек данных в массиве array1 или array2 меньше 2, или если отклонение массива array1 или array2 <b>нулевое,</b> F_Test возвращает значение #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — ненегрегативное число, на который вы хотите влиять. Если число не является числом, оно усечено.</param>
        <summary>Возвращает факториал числа. Факториал числа равен 1 *2**3...* числу.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — значение, для которого возвращается двойной факториал. Если число не является числом, оно усечено.</param>
        <summary>Возвращает двойной факториал числа.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число не является числом, <b>FactDouble</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если число отрицательное, <b>FactDouble</b> возвращает #NUM! значение ошибки. </para>
          <para>Если число even: </para>
          <para>Рис. 1. Уравнение для even</para>
          <para> </para>
          <para> </para>
          <para>Если число нечетное:</para>
          <para>Рис. 2. Уравнение для нечетных</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, при котором необходимо оценить функцию.</param>
        <param name="Arg2">Degrees_freedom1 — числовая степень свобод.</param>
        <param name="Arg3">Degrees_freedom2 — степеней свободного выражения.</param>
        <summary>Возвращает распределение вероятности F. С помощью этой функции можно определить, имеют ли два набора данных разные степени разнообразия. Например, вы можете изучить показатели теста для детей и детей, которые входили в средней школы, и определить, отличается ли вариативность для самок от того, что обнаружено у самцов.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в этих <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> и других <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методах.</para>
          <para>Если какой-либо аргумент не является числовым, <b>FDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x отрицательный, <b>FDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom1 или degrees_freedom2 не является integer, оно усечено. </para>
          <para>Если degrees_freedom1 &lt; 1 или degrees_freedom1 ≥ 10^10, <b>FDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom2 &lt; 1 или degrees_freedom2 ≥ 10^10, <b>FDist</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>FDist</b> вычисляется как FDIST=P( F x), где F — это случайная переменная с распределением F с degrees_freedom1 и &gt; degrees_freedom2 степенями свободности.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Допустимая строка xml.</param>
        <param name="Arg2">Строка запроса XPath.</param>
        <summary>Получите определенные данные из возвращенного XML,обычно из вызова <b>функции WebService.</b></summary>
        <returns><b>VARIANT</b></returns>
        <remarks><para>Параметр XPath может быть ограничен 1024 символами.</para>
          <para>Функция <b>FILTERXML</b> возвращает результаты, которые анализются с помощью указанного пользователем локали данных.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Имя таблицы.</param>
        <param name="Arg2">Имя диапазона.</param>
        <param name="Arg3">Имя аргумента для уточнения поиска.</param>
        <summary>Находит определенную информацию на этом таблице.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text - текст, который вы хотите найти.</param>
        <param name="Arg2">Within_text - текст, содержащий текст, который вы хотите найти.</param>
        <param name="Arg3">Start_num — указывает символ, с которого начинается поиск. Первый символ в within_text — номер символа 1. Если опустить start_num, предполагается, что это 1.</param>
        <summary><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> и <b>FindB</b> находит одну текстовую строку во второй текстовой строке и возвращает номер начальной позиции первой текстовой строки из первого символа второй текстовой строки.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>предназначено для использования с языками, которые используют однобайтовые наборы символов (SBCS), тогда как FindB предназначен для использования с языками, которые используют двухбайтовые наборы символов <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> (DBCS). <b></b> Параметр языка по умолчанию на компьютере влияет на возвращаемую величину следующим образом:</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> всегда подсчитываю каждый символ(одно- или двухбайтовую), как 1, независимо от языка по умолчанию.</description>
            </item>
            <item>
              <description>
                <b>FindB</b> учитывает каждый двухбайтный символ как 2, если вы включили редактирование языка, который поддерживает DBCS, а затем установите его в качестве языка по умолчанию. В <b>противном случае FindB</b> учитывает каждый символ как 1.</description>
            </item>
          </list>
          <para>К языкам, поддерживаюным DBCS, относятся японский, китайский (упрощенное), китайский (традиционное) и корейский. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> и <b>FindB</b> чувствительны к буквам и не разрешает использовать поддиапные знаки. Если вы не хотите искать с использованием символов, чувствительных к делу, или использовать поддиафикаты, вы можете <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" /> использовать и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> . </para>
          <para>Если find_text "" (пустой текст), соответствует первому символу в строке поиска (то есть символу с нума start_num <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> или 1). </para>
          <para>Find_text не может содержать поддиаными знаками. </para>
          <para>Если find_text не появляется в within_text и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>FindB</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если start_num не больше нуля, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>и FindB</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если start_num больше, чем длина within_text, и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>FindB</b> возвращает #VALUE! значение ошибки. </para>
          <para>Используйте start_num, чтобы пропустить указанное количество символов. В <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> качестве примера предположим, что вы работаете с текстовой строкой "AYF0093. YoungMensApparel". Чтобы найти номер первого "Y" в описательной части текстовой строки, установите start_num равным 8, чтобы не искать часть текста с серийным номером. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> начинается с символа 8, find_text на следующем символе и возвращает число 9. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> всегда возвращает количество символов из начала within_text, если количество символов, которые вы пропускали, start_num больше 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с накопительным распределением F.</param>
        <param name="Arg2">Degrees_freedom1 — числовая степень свобод.</param>
        <param name="Arg3">Degrees_freedom2 — это степеней свободного выражения.</param>
        <summary>Возвращает обратное распределение вероятности F. Если p = FDIST(x,...), то FINV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в этих <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" /> методах.</para>
          <para>Распределение F можно использовать в F-тесте, который сравнивает степень вариативности в двух наборах данных. Например, вы можете проанализировать распределение дохода в США и Канаде, чтобы определить, имеют ли две страны одинаковый уровень разнообразия дохода.</para>
          <para>Если какой-либо аргумент не является числовым, <b>FInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или вероятность &gt; 1, <b>FInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom1 или degrees_freedom2 не является integer, оно усечено. </para>
          <para>Если degrees_freedom1 &lt; 1 или degrees_freedom1 ≥ 10^10, <b>FInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom2 &lt; 1 или degrees_freedom2 ≥ 10^10, <b>FInv</b> возвращает #NUM! значение ошибки.</para>
          <para>
            <b>FInv</b> можно использовать для возврата критически важных значений из распределения F. Например, выходные данные вычисления ANOVA часто включают данные для статистики F, вероятности F и критического значения F на уровне важности 0,05. Чтобы вернуть критическое значение F, используйте уровень важности в качестве аргумента вероятности <b>для FInv.</b></para>
          <para>При значении вероятности <b>FInv</b> ищет это значение x таким образом, чтобы FDIST(x, degrees_freedom1, degrees_freedom2) = вероятность. Таким образом, точность <b>FInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" /> . <b>В FInv</b> используется метод итеративного поиска. Если поиск не сошел после 64 итерации, функция возвращает значение #N/A ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x — числовая величина, для которой необходимо преобразование.</param>
        <summary>Возвращает преобразование в Моменте с икс. Это преобразование создает функцию, которая обычно распределяется, а не перекосит. Используйте эту функцию для выполнения проверки на основе коэффициента корреляции.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не является числом, <b>То Он</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x ≤ -1 или x ≥ 1, <b>То Он</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для преобразования Подмайли:</para>
          <para>Рис. 1. Уравнение для преобразования в Фишере</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y — значение, для которого необходимо выполнить обратное преобразование.</param>
        <summary>Возвращает обратное преобразование вОбразимая подмайли. Используйте это преобразование при анализе корреляций между диапазонами или массивами данных. Если y = FISHER(x), then FISHERINV(y) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если y не является числовым, <b>#VALUE!</b> значение ошибки. </para>
          <para>Уравнение для обратного преобразования вмеамме:</para>
          <para>Рис. 1. Уравнение для обратного преобразования вмеайс</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — номер, который вы хотите округить и преобразовать в текст.</param>
        <param name="Arg2">Decimals — количество цифр справа от десятичной точки.</param>
        <param name="Arg3">No_commas — логическое значение, которое, если <b>имеет значение true,</b>не позволяет <b>fixed</b> включить запятые в возвращенный текст.</param>
        <summary>Округляет число до указанного числа десятичных запятых, форматирует число в десятичной форме с помощью пятой и запятой и возвращает результат в виде текста.</summary>
        <returns>To be added.</returns>
        <remarks><para>Цифры в Microsoft Excel не могут иметь более 15 значачных цифр, но десятичных разрядов может быть больше 127. </para>
          <para>Если десятичность отрицательное, число округлено слева от десятичной точки. </para>
          <para>Если опустить десятичность, предполагается, что это 2. </para>
          <para>Если no_commas <b>false</b> или пропущен, возвращенный текст будет включать запятые, как обычно. </para>
          <para>Главное различие между форматированием ячейки, содержащей число, с помощью команды Cells (меню Format) и форматированием числа непосредственно с помощью функции FIXED состоит в том, что <b>fixed</b> преобразует результат в текст. Число, отформатированные с помощью команды Cells, по-прежнему является числом.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — числовая величина, которая необходимо округить.</param>
        <param name="Arg2">Значительность — кратный, к которому нужно округить.</param>
        <summary>Округляет число вниз к нулю до ближайшего кратного значения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" /> методе.</para>
          <para>Если один из аргументов не является числом, <b>Floor</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если количество и важность отличаются, <b>Floor</b> возвращает #NUM! значение ошибки. </para>
          <para>Независимо от знака числа значение округляется вниз при откорректированном от нуля. Если число имеет точную важность, округлка не происходит.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, которые нужно округить.</param>
        <param name="Arg2">Несколько, к которым нужно округить.</param>
        <param name="Arg3">Если задано ненуровое число, эта функция округляется к нулю.</param>
        <summary>Округлит число вниз до ближайшего или до ближайшего кратного значения.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — числовая величина, которая необходимо округить.</param>
        <param name="Arg2">Значительность — кратный, к которому нужно округить.</param>
        <summary>Округит указанное число до ближайшего кратного значения.</summary>
        <returns>To be added.</returns>
        <remarks><para>В зависимости от знака числа и аргументов важности метод Floor_Precise <b></b> округляющийся от нуля или к нулю.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Округляет от нуля.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Округляя к нулю.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Округляет от нуля.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Округляя к нулю.</description>
            </item>
          </list>
          <para>Если один из аргументов не является числом, Floor_Precise <b>вызывает</b> ошибку. </para>
          <para>Если число имеет точную важность, округлка не происходит.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — точка данных, для которой нужно спрогнозировать значение.</param>
        <param name="Arg2">Known_y зависимый массив или диапазон данных.</param>
        <param name="Arg3">Known_x - независимый массив или диапазон данных.</param>
        <summary>Вычисляет или прогнозирует будущее значение с учетом существующих значений. Прогнозируемое значение — это значение "y" для заданного значения "x". Известные значения — это уже имеющиеся значения "x" и "y", а новое значение прогнозируется с использованием линейной регрессии. Вы можете использовать эту функцию для прогнозирования будущих продаж, необходимого запаса товара или тенденций потребительских предпочтений.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не является числом, <b>forecast</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если known_y и known_x пустые или содержат другое количество точек данных, <b>forecast</b> возвращает значение #N/A. </para>
          <para>Если отклонение known_x равно нулю, то <b>forecast</b> возвращает значение #DIV/0! значение ошибки. </para>
          <para>Уравнение для <b>прогноза</b> — a+bx, где: </para>
          <para>Рис. 1. Уравнение для метода Forecast</para>
          <para> </para>
          <para> </para>
          <para>И:</para>
          <para>Рис. 2. Уравнение для метода Forecast</para>
          <para> </para>
          <para> </para>
          <para>где x и y — это пример, означает AVERAGE(known_x) и AVERAGE(известные y).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Data_array — массив или ссылка на набор значений, для которых необходимо учитывать частоты. Если data_array не содержит значений, <b>частота</b> возвращает массив нулей.</param>
        <param name="Arg2">Bins_array — массив интервалов или ссылок на них, в которые нужно сгруппить значения в data_array. Если bins_array не содержит значений, <b>частота</b> возвращает количество элементов в data_array.</param>
        <summary>Вычисляет, как часто значения происходят в диапазоне значений, а затем возвращает вертикальный массив чисел. Например, используйте <b>частоту</b> для подсчета количества тестов, которые попадают в диапазоны баллов. Так <b>как частота</b> возвращает массив, он должен быть введен в качестве формулы массива.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Частота</b> введена в качестве формулы массива после выбора диапазона смежных ячеек, в которых будет отображаться возвращенное распределение. </para>
          <para>Количество элементов в возвращаемом массиве на один раз больше числа элементов в bins_array. Дополнительный элемент в возвращаемом массиве возвращает количество значений выше самого высокого интервала. Например, при подсчете трех диапазонов значений (интервалов), которые введены в три ячейки, обязательно введите <b>частоту</b> в четыре ячейки для результатов. Дополнительная ячейка возвращает количество значений в data_array, которые больше значения третьего интервала. </para>
          <para>
            <b>Частота</b> игнорирует пустые ячейки и текст. </para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массива.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — первый массив или диапазон данных.</param>
        <param name="Arg2">Array2 — второй массив или диапазон данных.</param>
        <summary>Возвращает результат F-теста. Тест F возвращает двухвостую вероятность того, что дисперсии в массивах array1 и array2 не сильно отличаются. Используйте эту функцию, чтобы определить, есть ли в двух примерах разные дисперсии. Например, с учетом результатов тестирования из общедоступных и частных учебных баллов можно проверить, отличаются ли эти учебные заведения от разных уровней разнообразия показателей тестирования.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" /> методе.</para>
          <para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если число точек данных в массиве array1 или array2 меньше 2, или если отклонение массива array1 или array2 нулевое, <b>FTest</b> возвращает значение #DIV/0! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ставка — процентная ставка за период.</param>
        <param name="Arg2">Nper — общее количество периодов оплаты в аннуитетах.</param>
        <param name="Arg3">Pmt — платеж, сделанный каждый период; оно не может измениться в течение жизни аннуитета. Как правило, pmt содержит основной и процентный ставки, но никакие другие сборы и налоги не используются. Если pmt опущен, необходимо включить аргумент pv.</param>
        <param name="Arg4">Pv — это настоящее значение или общая сумма, которую сейчас стоит ряд будущих платежей. Если опущена pv-область, предполагается, что она имеет значение 0 (ноль), и необходимо включить аргумент pmt.</param>
        <param name="Arg5">Тип — число 0 или 1 и указывает время оплаты. Если тип опущен, предполагается, что он имеет 0.</param>
        <summary>Возвращает будущее значение инвестиций на основе периодических постоянных платежей и постоянной процентной ставки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Более полное описание аргументов в <b>FV</b> и дополнительные сведения о функциях аннуитета см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1 </term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы согласованы с единицами, которые используются для указания скорости и nper. Если вы делаете ежемесячные платежи по кредиту на четыре года под 12 процентов годовых, используйте 12 %/12 для ставки и 4*12 для nper. Если вы делаете годовые платежи по одному кредиту, используйте 12 % для ставки и 4 для nper. </para>
          <para>Для всех аргументов денежные средства, которые вы платите, такие как вклады в сэкономленные средства, представлены отрицательными числами; Полученные денежные средства, например проверки на наличие проверки на наличие проверки, представлены положительными числами.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Principal — настоящее значение.</param>
        <param name="Arg2">Расписание — массив процентных ставки, которые необходимо применить.</param>
        <summary>Возвращает будущее значение исходного директора после применения ряда составных процентных ставки. Используйте FVSCHEDULE для вычисления будущих значений инвестиций с переменной или регулируемой скоростью.</summary>
        <returns>To be added.</returns>
        <remarks><para>Значения в расписании могут быть числами или пустыми ячейками; любое другое значение создает #VALUE! значение ошибки <b>для FVSchedule</b>. Пустые ячейки принимаются как нули (без процентов).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, для которого вы хотите вычислить гамму.</param>
        <summary>Возвращает значение функции Гамма.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, по которому вы хотите оценить распределение.</param>
        <param name="Arg2">Alpha — параметр для распространения.</param>
        <param name="Arg3">Бета-версия — параметр для распространения. Если бета-версия = 1, <b>Gamma_Dist</b> возвращает стандартное гамма-распределение.</param>
        <param name="Arg4">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное имеет</b> <b>Gamma_Dist</b> возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция плотности вероятности.</param>
        <summary>Возвращает гамма-распределение. Эту функцию можно использовать для изучения переменных, которые могут иметь перекос в распределении. Гамма-распределение обычно используется при анализе очередей.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x, alpha или beta не <b></b> является числом, Gamma_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>Gamma_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если альфа ≤ 0 или бета-версия ≤ <b>0,</b> Gamma_Dist возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции плотности гамма-вероятности: </para>
          <para>Рис. 1. Функция плотности вероятности гаммы</para>
          <para> </para>
          <para> </para>
          <para>Стандартная функция плотности гамма-вероятности:</para>
          <para>Рис. 2. Стандартная функция плотности гамма-вероятности</para>
          <para> </para>
          <para> </para>
          <para>Если альфа = 1, <b>Gamma_Dist</b> возвращает экспоненциальное распределение с помощью:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>Для положительного integer n, когда alpha = n/2, beta = 2, and cumulative = <b>true</b>, <b>Gamma_Dist</b> returns (1 - CHIDIST(x)) with n degrees of freedom. </para>
          <para>Если альфа-канал является положительным Gamma_Dist <b>также</b> называется распределением Erlang.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с гамма-распределением.</param>
        <param name="Arg2">Alpha — параметр для распространения.</param>
        <param name="Arg3">Бета-версия — параметр для распространения. Если бета-версия = 1, <b>Gamma_Inv</b> возвращает стандартное гамма-распределение.</param>
        <summary>Возвращает обратное распределение гамма-накопителя. Если p = GAMMA_DIST(x,...), GAMMA_INV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Эту функцию можно использовать для изучения переменной, распространение которой может быть переопределяется.</para>
          <para>Если какой-либо аргумент является <b>текстом, Gamma_Inv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность 0 или &lt; вероятность &gt; 1, Gamma_Inv возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если альфа ≤ 0 или бета-версия ≤ <b>0,</b> Gamma_Inv возвращает #NUM! значение ошибки.</para>
          <para>Если значение вероятности <b>задано,</b> Gamma_Inv ищет это значение x таким образом, чтобы GAMMA_DIST(x, alpha, beta, TRUE) = вероятность. Таким образом, <b>точность Gamma_Inv</b> зависит от <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> точности. <b>Gamma_Inv</b> использует метод итеративного поиска. Если поиск не сошел после 100 итерации, функция возвращает значение #N/A ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, по которому вы хотите оценить распределение.</param>
        <param name="Arg2">Alpha — параметр для распространения.</param>
        <param name="Arg3">Бета-версия — параметр для распространения. Если бета-версия = 1, <b>GammaDist</b> возвращает стандартное гамма-распределение.</param>
        <param name="Arg4">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное имеет true,</b> <b>GammaDist</b> возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция плотности вероятности.</param>
        <summary>Возвращает гамма-распределение. Эту функцию можно использовать для изучения переменных, которые могут иметь перекос в распределении. Гамма-распределение обычно используется при анализе очередей.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если x, alpha или beta не числовая, <b>GammaDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>GammaDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если альфа≤ 0 или бета-версия ≤ 0, <b>GammaDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции плотности гамма-вероятности: </para>
          <para>Рис. 1. Функция плотности вероятности гаммы</para>
          <para> </para>
          <para> </para>
          <para>Стандартная функция плотности гамма-вероятности:</para>
          <para>Рис. 2. Стандартная функция плотности гамма-вероятности</para>
          <para> </para>
          <para> </para>
          <para>Если альфа = 1, <b>gammaDist</b> возвращает экспоненциальное распределение с помощью:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>Для положительного integer n, когда alpha = n/2, beta = 2, and cumulative = <b>true</b>, <b>GammaDist</b> returns (1 - CHIDIST(x)) with n degrees of freedom. </para>
          <para>Если альфа-канал — положительное integer, <b>gammaDist</b> также называется распределением Erlang.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с гамма-распределением.</param>
        <param name="Arg2">Alpha — параметр для распространения.</param>
        <param name="Arg3">Бета-версия — параметр для распространения. Если бета-версия = 1, <b>GammaInv</b> возвращает стандартное гамма-распределение.</param>
        <summary>Возвращает обратное распределение гамма-накопителя. Если p = GAMMADIST(x,...), то GAMMAINV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" /> методе.</para>
          <para>Эту функцию можно использовать для изучения переменной, распространение которой может быть перекосить.</para>
          <para>Если какой-либо аргумент является текстом, <b>GammaInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или вероятность &gt; 1, <b>GammaInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если альфа ≤ 0 или бета-версия ≤ 0, <b>GammaInv</b> возвращает #NUM! значение ошибки.</para>
          <para>При значении вероятности <b>GammaInv</b> ищет это значение x таким образом, чтобы GAMMADIST(x, alpha, beta, TRUE) = вероятность. Таким образом, точность <b>GammaInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>В GammaInv</b> используется метод итеративного поиска. Если поиск не сошел после 64 итерации, функция возвращает значение #N/A ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, для которого вы хотите вычислить GAMMALN.</param>
        <summary>Возвращает естественный логарифм гамма-функции, Γ(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" /> методе.</para>
          <para>Если x не является числом, <b>GammaLn</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x ≤ 0, <b>GammaLn</b> возвращает #NUM! значение ошибки. </para>
          <para>Число e, подавляемая к источнику питания GAMMALN(i), где i является integer, возвращает тот же результат, что и (i - 1)!. </para>
          <para>
            <b>GammaLn</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для метода GammaLn</para>
          <para> </para>
          <para> </para>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, для которого вы хотите вычислить GAMMALN.</param>
        <summary>Возвращает естественный логарифм гамма-функции, Γ(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не является числом, GammaLn_Precise <b>вызывает</b> ошибку. </para>
          <para>Если x ≤ 0, метод <b>GammaLn_Precise</b> создает ошибку. </para>
          <para>Число e, подавляемая к источнику питания GAMMALN(i), где i является integer, возвращает тот же результат, что и (i - 1)!. </para>
          <para>GAMMALN вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для GammaLn_Precise метода</para>
          <para> </para>
          <para> </para>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение, для которого необходимо распространение.</param>
        <summary>Возвращает на 0,5 меньше стандартного обычного накопительного распределения.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число1, число2, ... — от 1 до 29 значений. Если любое значение не является integer, оно усечено.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает наибольший общий дивизор из двух или более integers. Наибольший общий дивизор — это наибольшее число, которое делит число1 и число2 без оставшейся части.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не является числовым, <b>Gcd</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если какой-либо аргумент меньше нуля, <b>Gcd</b> возвращает #NUM! значение ошибки. </para>
          <para>Одно делит любое значение на одно и то же. </para>
          <para>Простое число имеет только самого себя и один в качестве ровных дивизоров.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 аргументов, для которых вы хотите вычислить это число. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает геометрическое среднее количество массива или диапазона положительных данных. Например, можно использовать GEOMEAN для вычисления средней скорости роста с учетом составных процентов с переменными коэффициентами.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если любая точка данных ≤ 0, <b>GeoMean</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для геометрического мя будет: </para>
          <para>Рис. 1. Уравнение для геометрического мягче</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number — значение, проверяемого на шаге.</param>
        <param name="Arg2">Шаг — пороговое значение. Если опустить значение для шага, <b>GeStep</b> будет использовать ноль.</param>
        <summary>Возвращает 1, если число ≥ шаг; возвращает 0 (ноль) в противном случае. Используйте эту функцию для фильтрации набора значений. Например, суммируете несколько <b>функций GeStep,</b> чтобы вычислить количество значений, превышающих пороговое значение.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не является числовым, <b>GeStep</b> возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y - набор значений y, которые вы уже знаете в связи y = b*m^x.</param>
        <param name="Arg2">Known_x - необязательный набор X-значений, которые вы, возможно, уже знаете в связи y = b*m^x.</param>
        <param name="Arg3">New_x новые X-значения, для которых <b>необходимо,</b> чтобы growth возвращал соответствующие значения y.</param>
        <param name="Arg4">Const — логическое значение, указывав, следует ли принудительно установить для константы b значение 1.</param>
        <summary>Вычисляет прогнозируемый экспоненциальный рост с использованием существующих данных. <b>Рост</b> возвращает значения y для ряда новых X-значений, которые вы указываете с помощью существующих x-значений и y-значений. Вы также можете использовать <b>функцию</b> "Рост" для вместения экспоненциальной кривой в существующие значения X и Y.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив known_y в одном столбце, каждый столбец known_x интерпретируется как отдельная переменная. </para>
          <para>Если массив known_y в одной строке, каждая строка known_x интерпретируется как отдельная переменная. </para>
          <para>Если любое из чисел known_y 0 или отрицательное, <b>рост</b> возвращает #NUM! значение ошибки. </para>
          <para>Массив known_x может включать один или несколько наборов переменных. Если используется только одна переменная, known_y и known_x могут быть диапазонами любой фигуры, если они имеют одинаковые размеры. Если используется несколько переменных, known_y должен быть вектором (то есть диапазоном с высотой одной строки или шириной одного столбца). </para>
          <para>Если known_x опущен, предполагается, что это массив {1,2,3,...} такой же размер, known_y, что и у known_y. </para>
          <para>New_x должны включать столбец (или строку) для каждой независимой переменной так же, как known_x для каждой отдельной переменной. Таким образом, known_y в одном столбце, known_x и new_x должны иметь одинаковое количество столбцов. Если known_y находится в одной строке, known_x и new_x должны иметь одинаковое количество строк. </para>
          <para>Если new_x опущен, предполагается, что он такой же, как known_x. </para>
          <para>Если и known_x, и new_x опущены, предполагается, что они являются массивом {1,2,3,...} такой же размер, known_y, что и у known_y. </para>
          <para>Если const имеет <b>true</b> или опущен, b вычисляется обычным образом. </para>
          <para>Если const имеет <b>значение false,</b>для b устанавливается значение 1, а значения m настраиваются таким образом, что y = m^x. </para>
          <para>Формулы, возвращающие массивы, должны быть введены в качестве формул массива после выбора правильного количества ячеек. </para>
          <para>При вводе константы массива для аргумента, такого как known_x, используйте запятые, чтобы разделять значения в одной строке и с запятой для разных строк.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 аргументов, для которых вы хотите вычислить это число. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает согласованное подмывка набора данных. The harmonic mean is the reciprocal of the arithmetic mean of reciprocals.</summary>
        <returns>To be added.</returns>
        <remarks><para>The geometricic mean is always less than the geometric mean, which is always less than the arithmetic mean. </para>
          <para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если точка данных ≤ 0, <b>HarMean</b> возвращает #NUM! значение ошибки. Уравнение для согласуемого мяким является: </para>
          <para>Рис. 1. Уравнение для согласуемого мягчания</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number — это hexadecimal number, который необходимо преобразовать. Число не может содержать более 10 символов. Наиболее значимым битом числа является бит знака (40-й бит справа). Оставшиеся 9 битов являются битами величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <param name="Arg2">Места — количество символов, которые необходимо использовать. Если места не замещены, <b>в Hex2Bin</b> используется минимальное количество символов, необходимое. Места полезны для заполнения возвращаемой величины с нулями в 0.</param>
        <summary>Преобразует в двоичное число.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число отрицательное, <b>Hex2Bin</b> игнорирует места и возвращает 10-символьное двоичное число. </para>
          <para>Если число отрицательное, оно не может быть меньше FFFFFFFE00, а если число положительное, оно не может быть больше 1FF. </para>
          <para>Если число не является допустимым числом, <b>Hex2Bin</b> возвращает #NUM! значение ошибки. </para>
          <para>Если <b>для hex2Bin</b> требуется больше знаков, чем знаков мест, он возвращает #NUM! значение ошибки. Если место не является integer, оно усечено. </para>
          <para>Если количество мест не является числовым, <b>Hex2Bin</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Hex2Bin</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number — это hexadecimal number, который необходимо преобразовать. Число не может содержать более 10 символов (40 битов). Наиболее значимым битом числа является бит знака. Оставшиеся 39 битов являются битами величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <summary>Преобразует в десятичной число.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число не является допустимым числом, <b>hex2Dec</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number — это hexadecimal number, который необходимо преобразовать. Число не может содержать более 10 символов. Наиболее значимым битом числа является бит знака. Оставшиеся 39 битов являются битами величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <param name="Arg2">Места — количество символов, которые необходимо использовать. Если места не замещены, <b>в Hex2Oct</b> используется минимальное необходимое количество символов. Места полезны для заполнения возвращаемой величины с нулями в 0.</param>
        <summary>Преобразует восьмую числовую.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число отрицательное, <b>Hex2Oct</b> игнорирует места и возвращает 10-символьное октальный номер. </para>
          <para>Если число отрицательное, оно не может быть меньше FFE00000000, а если число положительное, оно не может быть больше 1FFFFFFFFF. </para>
          <para>Если число не является допустимым числом, <b>hex2Oct</b> возвращает #NUM! значение ошибки. </para>
          <para>Если <b>для hex2Oct</b> требуется больше знаков, чем знаков мест, возвращается #NUM! значение ошибки. </para>
          <para>Если место не является integer, оно усечено. </para>
          <para>Если количество мест ненумерно, <b>Hex2Oct</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Hex2Oct</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value — значение, найденное в первой строке таблицы. Lookup_value может быть значением, ссылкой или текстовой строкой.</param>
        <param name="Arg2">Table_array — таблица сведений, в которой выглядыют данные. Используйте ссылку на диапазон или имя диапазона.</param>
        <param name="Arg3">Row_index_num — номер строки в table_array, из которой будет возвращено совпадающие значения. Значение row_index_num 1 возвращает значение первой строки в table_array, значение row_index_num 2 возвращает значение второй строки в table_array и так далее. Если row_index_num меньше 1, <b>HLookup</b> возвращает #VALUE! значение ошибки; Если row_index_num больше количества строк в table_array, <b>HLookup</b> возвращает #REF! значение ошибки.</param>
        <param name="Arg4">Range_lookup — логическое значение, которое указывает, нужно ли <b>HLookup</b> найти точное или приблизительное совпадение. Если <b>имеется</b> true или опущен, возвращается приблизительное совпадение. Другими словами, если точное совпадение не найдено, возвращается следующее наибольшее значение lookup_value значение. Если <b>false,</b> <b>HLookup</b> найдет точное совпадение. Если он не найден, возвращается значение #N/A.</param>
        <summary>Выполняет поиск значения в верхней строке таблицы или массива значений, а затем возвращает значение в том же столбце из строки, которая указана в таблице или массиве. Используйте HLookup, если значения сравнения расположены в строке в верхней части таблицы данных и хотите посмотреть на указанное количество строк. Используйте, когда значения сравнения расположены в столбце слева <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> от данных, которые вы хотите найти.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если <b>HLookup</b> не может найти lookup_value и range_lookup имеет значение <b>true,</b>он использует наибольшее значение, которое меньше lookup_value. </para>
          <para>Если lookup_value меньше наименьшего значения в первой строке table_array, <b>HLookup</b> возвращает значение #N/A ошибки. </para>
          <para>Если range_lookup имеет lookup_value false, а lookup_value текст, в lookup_value можно использовать поддиамографию, вопросии (?) и звездочку (*). Вопроси метка соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти действительный вопросии или звездочка, введите тильду (~) перед знаком.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sample_s — количество успехов в примере.</param>
        <param name="Arg2">Number_sample — размер примера.</param>
        <param name="Arg3">Population_s — количество успешных успехов среди пользователей.</param>
        <param name="Arg4">Number_population - размер погона.</param>
        <param name="Arg5">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное true,</b> <b>HypGeom_Dist</b> возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция вероятности массовой работы.</param>
        <summary>Возвращает гиперgeometric distribution. <b>HypGeom_Dist</b> возвращает вероятность заданного количества успешных выборок с учетом размера выборки, количества успешных выборок и размера пользователей. Используйте <b>HypGeom_Dist</b> для проблем с конечным количеством людей, где каждое наблюдение является либо успешным, либо сбоем, а каждое подмножество заданного размера выбирается с одинаковой вероятностью.</summary>
        <returns>To be added.</returns>
        <remarks><para>Все аргументы усечены до integers. </para>
          <para>Если какой-либо аргумент не <b></b> является числом, HypGeom_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если sample_s 0 или sample_s меньше меньшего number_sample или population_s, HypGeom_Dist возвращает &lt; #NUM! <b></b> значение ошибки. </para>
          <para>Если sample_s меньше 0 или (number_sample — number_population + <b>population_s),</b> HypGeom_Dist возвращает #NUM! значение ошибки. </para>
          <para>Если number_sample ≤ 0 или number_sample &gt; number_population, HypGeom_Dist <b></b> возвращает #NUM! значение ошибки. </para>
          <para>Если population_s ≤ 0 или population_s number_population, HypGeom_Dist &gt; возвращает <b></b> #NUM! значение ошибки. </para>
          <para>Если number_population ≤ 0, <b>HypGeom_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для гиперgeometric распределения: </para>
          <para>Рис. 1. Уравнение для гиперgeometric distribution</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeom_Dist</b> используется при выборке без замены из ограниченной группы.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sample_s — количество успешных успехов в примере.</param>
        <param name="Arg2">Number_sample - размер примера.</param>
        <param name="Arg3">Population_s — количество успешных успехов среди пользователей.</param>
        <param name="Arg4">Number_population - размер погона.</param>
        <summary>Возвращает гиперgeometric distribution. <b>HypGeomDist</b> возвращает вероятность заданного количества успешных выборок с учетом размера выборки, количества успешных выборок и размера пользователей. Используйте <b>HypGeomDist</b> для проблем с конечным количеством людей, где каждое наблюдение является либо успешным, либо сбоем, а каждое подмножество заданного размера выбирается с одинаковой вероятностью.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Все аргументы усечены до integers. </para>
          <para>Если какой-либо аргумент не является числовым, <b>HypGeomDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если sample_s 0 или sample_s меньше, чем number_sample или &lt; population_s, <b>HypGeomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если sample_s меньше 0 или (number_sample — number_population + population_s), <b>HypGeomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если number_sample ≤ 0 или number_sample &gt; number_population, HYPGEOMDIST возвращает #NUM! значение ошибки. </para>
          <para>Если population_s ≤ 0 или population_s &gt; number_population, <b>HypGeomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если number_population ≤ 0, <b>HypGeomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для гиперgeometric распределения: </para>
          <para>Рис. 1. Уравнение для гиперgeometric distribution</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeomDist</b> используется в выборке без замены из ограниченной группы.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — аргумент, который проверяется на наличие ошибки.</param>
        <param name="Arg2">Value_if_error - возвращаемого значения, если формула оценивает ошибку. Оцениваются следующие типы ошибок: #N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?или #NULL!.</param>
        <summary>Возвращает значение, указывав, оценивает ли формула ошибку; в противном случае возвращает результат формулы. Используйте <b>функцию IfError</b> для отладки и обработки ошибок в формуле.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если значение или value_if_error пустая ячейка, <b>IfError</b> обрабатывает его как пустое строко значение (""). </para>
          <para>Если значение является формулой массива, <b>IfError</b> возвращает массив результатов для каждой ячейки в диапазоне, указанном в значении. См. второй пример ниже.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">значение: любое значение, выражение или ссылка.</param>
        <param name="Arg2">value_if_na: любое значение, выражение или ссылка.</param>
        <summary>Возвращает значение, задатое, разрешалось ли выражение #N/A, в противном случае возвращает результат выражения.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого необходимо абсолютное значение.</param>
        <summary>Возвращает абсолютное значение (модуль) сложного числа в текстовом формате x + y или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Абсолютное значение сложного числа: </para>
          <para>Рис. 1. Уравнение для абсолютного значения сложного числа</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого вы хотите мнимый коэффициент.</param>
        <summary>Возвращает мнимый коэффициент сложного числа в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — это сложное число, для которого необходимо иметь аргумент theta.</param>
        <summary>Возвращает аргумент (theta), угол, выраженный в радианах, например:</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>
            <b>ImArgument</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для метода ImArgument</para>
          <para> </para>
          <para> </para>
          <para>Где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>и</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого необходимо спрягать.</param>
        <summary>Возвращает сложное конъюгирование сложного числа в текстовом формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Сопрягаемая часть сложного числа: </para>
          <para>Рис. 1. Уравнение для спрягания сложного числа</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого необходимо косинус.</param>
        <summary>Возвращает косинус сложного числа в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Если inumber является логическим значением, <b>ImCos</b> возвращает #VALUE! значение ошибки. </para>
          <para>Косинус сложного числа: </para>
          <para>Рис. 1. Косинус сложного числа</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложное число, для которого необходимо гиперболическое косинус.</param>
        <summary>Возвращает гиперболический косинус сложного числа.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен cotangent.</param>
        <summary>Возвращает cotangent сложного числа.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого необходимо косекаант.</param>
        <summary>Возвращает косекант сложного числа.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен гиперболический косекаант.</param>
        <summary>Возвращает гиперболический косекаант сложного числа.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1 — сложный числитель или неверная.</param>
        <param name="Arg2">Inumber2 — сложный деномилятор или дивизор.</param>
        <summary>Возвращает кворум двух сложных чисел в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Кворум двух сложных чисел: </para>
          <para>Рис. 1. Кворуант двух сложных чисел</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого необходимо экспоненциальное.</param>
        <summary>Возвращает экспоненцию сложного числа в текстовом формате x + yi или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Экспоненциальное количество сложных номеров: </para>
          <para>Рис. 1. Экспоненциальное сложное число</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого необходимо естественное логарифм.</param>
        <summary>Возвращает естественный логарифм сложного числа в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Естественный логарифм сложного числа: </para>
          <para>Рис. 1. Естественный логарифм сложного числа</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого необходимо общее логарифм.</param>
        <summary>Возвращает общий логарифм (базовый 10) сложного числа в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Общий логарифм сложного числа можно вычислить из естественного логарифма следующим образом: </para>
          <para>Рис. 1. Уравнение для общего логарифма сложного числа</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого необходимо логарифм base-2.</param>
        <summary>Возвращает логарифм base-2 сложного числа в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Логарифм базового 2 сложного числа можно вычислить из естественного логарифма следующим образом: </para>
          <para>Рис. 1. Уравнение для логарифма base-2 сложного числа</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложный номер, который вы хотите повысить до питания.</param>
        <param name="Arg2">Число — мощность, до которой вы хотите повысить сложное число.</param>
        <summary>Возвращает сложное число в текстовом формате x + yi или x + yj, который вызывается в виде питания.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Если число не является числом, <b>ImPower</b> возвращает #VALUE! значение ошибки. </para>
          <para>Число может быть числом, дробным или отрицательным. </para>
          <para>Сложное число, подавляется в питание, вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение сложного числа, которое вызывается в питание</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>И в следующем примере:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>И в следующем примере:</para>
          <para>Рис. 4. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1, inumber2,... - от 1 до 29 сложных чисел для умножения.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает продукт от 2 до 29 сложных чисел в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Продукт из двух сложных чисел:</para>
          <para>Рис. 1. Продукт из двух сложных чисел</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого вы хотите получить реальный коэффициент.</param>
        <summary>Возвращает реальный коэффициент сложного числа в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен гиперболический косекаант.</param>
        <summary>Возвращает гиперболический косекаант сложного числа.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложное число, для которого необходимо гиперболическое секант.</param>
        <summary>Возвращает секант сложного числа.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого вы хотите получить sine.</param>
        <summary>Возвращает сину для сложного числа в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Sine сложного числа: </para>
          <para>Рис. 1. Sine сложного числа</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложное число, для которого необходимо гиперболическое синус.</param>
        <summary>Возвращает гиперболический синус сложного числа.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber — сложное число, для которого необходимо квадратный корень.</param>
        <summary>Возвращает квадратный корень сложного числа в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. Квадратный корень сложного числа: </para>
          <para>Рис. 1. Квадратный корень сложного числа</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>И в следующем примере:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>И в следующем примере:</para>
          <para>Рис. 4. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1 — сложное число, из которого вычитается inumber2.</param>
        <param name="Arg2">Inumber2 — сложное число, вычитаемого из inumber1.</param>
        <summary>Возвращает разницу двух сложных чисел в текстовом формате x + yj или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число.</para>
          <para>Разница между двумя сложными числами:</para>
          <para>Рис. 1. Разница между двумя сложными числами</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1,inumber2,... - от 1 до 29 сложных номеров для добавления.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает сумму двух или более сложных чисел в текстовом формате x + ий или x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Используется для преобразования реальных и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> мнимых коэффициентов в сложное число. </para>
          <para>Сумма двух сложных чисел:</para>
          <para>Рис. 1. Сумма из двух сложных чисел</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Сложный номер, для которого нужен тангенс.</param>
        <summary>Возвращает тангенс сложного числа.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив или ссылка — диапазон ячеек или константа массива. Для ссылок это ссылка на один или несколько диапазонов ячеей.</param>
        <param name="Arg2">Row_num выбирает строку в массиве, из которой возвращается значение. Если row_num опущен, column_num требуется. Для ссылок номер строки в ссылке, из которой возвращается ссылка</param>
        <param name="Arg3">Column_num выбирает столбец в массиве, из которого возвращается значение. Если column_num опущен, row_num требуется. Для справки номер столбца в ссылке, из которого возвращается ссылка.</param>
        <param name="Arg4">Area_num — используется только при возвращении ссылок. Выбирает диапазон в ссылке, из которого возвращается пересечение row_num и column_num. Первая выбранная или введенная область имеет номер 1, вторая — 2 и так далее. Если area_num опущен, <b>в индексе</b> используется область 1.</param>
        <summary>Возвращает значение или ссылку на значение из таблицы или диапазона. Существует две формы функции <b>Index:</b> форма массива и эталонная форма.</summary>
        <returns>To be added.</returns>
        <remarks><para>Форма массива</para>
          <para>Возвращает значение элемента в таблице или массиве, выбранное индексами номеров строк и столбцов.</para>
          <para>Используйте форму массива, если первым аргументом <b>index</b> является константа массива.</para>
          <para>Если используются row_num и column_num аргументы, <b>index</b> возвращает значение в ячейке на пересечении row_num и column_num. </para>
          <para>Если row_num или column_num 0 (ноль), <b>индекс</b> возвращает массив значений для всего столбца или строки соответственно. Чтобы использовать значения, возвращенные в качестве массива, введите функцию <b>Index</b> в качестве формулы массива в горизонтальном диапазоне ячеек для строки и в вертикальном диапазоне ячеек для столбца. Чтобы ввести формулу массива, нажмите CTRL+SHIFT+ВВОД. </para>
          <para>Row_num и column_num должны указать на ячейку в массиве; в <b>противном случае index</b> возвращает #REF! значение ошибки. </para>
          <para>Форма ссылок</para>
          <para>Возвращает ссылку на ячейку на пересечении определенной строки и столбца. Если ссылка состоит из неадджационных выборок, можно выбрать выбор, который нужно найти. Если каждая область в ссылке содержит только одну строку или столбец, аргумент row_num или column_num, соответственно, является необязательным. Например, для ссылки на одну строку используйте INDEX(reference,,column_num). </para>
          <para>После того как ссылка и area_num выбрали определенный диапазон, row_num и column_num выберите определенную ячейку: row_num 1 — первая строка в диапазоне, column_num 1 — первый столбец и так далее. Ссылка, возвращаемая <b>индексом,</b> является пересечением row_num и column_num. </para>
          <para>Если row_num или column_num 0 (ноль), <b>индекс</b> возвращает ссылку для всего столбца или строки соответственно.</para>
          <para>Row_num, column_num и area_num должны указать ячейку в ссылке; в <b>противном случае index</b> возвращает #REF! значение ошибки. Если row_num и column_num опущены, <b>индекс</b> возвращает область в ссылке, указанной area_num. </para>
          <para>Результат функции <b>Index</b> является ссылкой и интерпретируется как таковой другими формулами. В зависимости от формулы возвращаемого значения INDEX можно использовать в качестве ссылки или в качестве значения. Например, формула CELL("width",INDEX(A1:B2,1,2)) эквивалентна CELL("width",B1). Функция CELL использует возвращаемую величину INDEX в качестве ссылки на ячейку. С другой стороны, формула, например 2*INDEX(A1:B2,1,2), преобразует возвращаемого значения <b>индекса</b> в число в ячейке B1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y зависимый набор наблюдений или данных.</param>
        <param name="Arg2">Known_x - независимый набор наблюдений или данных.</param>
        <summary>Вычисляет точку, в которой линия будет пересекать ось Y, используя существующие значения x и y. Точка перехвата основана на высокой регрессионной линии, построенной через известные X-значения и известные значения Y. Используйте <b>функцию Intercept,</b> чтобы определить значение зависимой переменной, когда независимая переменная имеет значение 0 (ноль). Например, функцию <b>Intercept</b> можно использовать для прогнозирования устойчивости к электропитаниям при 0°C при использовании точек данных при температуре помещения и выше.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если known_y и known_x содержат другое количество точек данных или не содержат точек данных, <b>intercept</b> возвращает значение #N/A ошибки. </para>
          <para>Уравнение для перехвата линии регрессии, а, является:</para>
          <para>Рис. 1. Уравнение для перехвата линии регрессии</para>
          <para> </para>
          <para> </para>
          <para>где загон, б, вычисляется как:</para>
          <para>Рис. 2. Уравнение для подмайки</para>
          <para> </para>
          <para> </para>
          <para>а где x и y — это пример, означает AVERAGE(known_x) и AVERAGE(known_y s).</para>
          <para>Алгоритм, используемый в <b>перехвате</b> и функциях, отличается от используемого в функции <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> алгоритма. Разница между этими алгоритмами может привести к разным результатам, если данные не засвечены и скоминелены. Например, если точки данных аргумента known_y 0, а точки данных аргумента known_x 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Перехват</b> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> возвращение #DIV/0! error. The <b>Intercept</b> and <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> algorithm is designed to look for one and only one answer, and in this case can be more than one answer. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> возвращает значение 0. Алгоритм разработан для возврата разумных результатов для данных collinear, и в этом случае можно найти хотя бы <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> один ответ.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Инвестиции — сумма, вложенная в безопасность.</param>
        <param name="Arg4">Активация — сумма, которая должна быть получена по истиной.</param>
        <param name="Arg5">Basis - the type of day count basis to use.</param>
        <summary>Возвращает процентную ставку для полностью вкладываемой безопасности.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст и основа усечены до integers. </para>
          <para>Если сроки расчета или возрастания не являются допустимой датой, <b>IntRate</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если инвестиции ≤ 0 или активация ≤ 0, <b>IntRate</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>IntRate</b> возвращает #NUM! значение ошибки. </para>
          <para>Если срок ≥, <b>IntRate</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>IntRate</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для метода IntRate</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>B = количество дней в году в зависимости от года.</para>
          <para>DIM = количество дней от расчета до возраста.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ставка — процентная ставка за период.</param>
        <param name="Arg2">Per — период, для которого вы хотите найти интерес и должен находиться в диапазоне от 1 до nper.</param>
        <param name="Arg3">Nper — общее количество периодов оплаты в аннуитетах.</param>
        <param name="Arg4">Pv — это настоящее значение или общая сумма, которую сейчас стоит ряд будущих платежей.</param>
        <param name="Arg5">Fv — будущее значение или денежный баланс, который вы хотите получить после последнего платежа. Если значение fv опущено, предполагается, что оно будет иметь значение 0 (будущий размер займа, например, 0).</param>
        <param name="Arg6">Тип — номер 0 или 1 и указывает время оплаты. Если тип опущен, предполагается, что он имеет 0.</param>
        <summary>Возвращает процентный платеж за заданный период для инвестиций на основе периодических постоянных платежей и постоянной процентной ставки.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1 </term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы согласованы с единицами, которые вы используете для указания скорости и nper. Если вы делаете ежемесячные платежи по кредиту на четыре года под 12 процентов годовых, используйте 12 %/12 для ставки и 4*12 для nper. Если вы делаете годовые платежи по одному кредиту, используйте 12 % для ставки и 4 для nper. </para>
          <para>Для всех аргументов денежные средства, которые вы платите, такие как вклады в сэкономленные средства, представлены отрицательными числами; Полученные денежные средства, например проверки на наличие проверки на наличие проверки, представлены положительными числами.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значения — массив или ссылка на ячейки, содержащие числа, для которых необходимо вычислить внутреннюю скорость возврата.</param>
        <param name="Arg2">Guess — число, которое вы угадать, близко к результату IRR.</param>
        <summary>Возвращает внутреннюю скорость возврата для ряда потоков денежных средств, представленных числами в значениях. Эти денежные потоки не должны быть even, так как они должны быть для аннуитета. Однако потоки денежных средств должны происходить через регулярные интервалы, например ежемесячно или ежегодно. Внутренняя ставка прибыли — это процентная ставка, полученная для инвестиций, состоящих из платежей (отрицательные значения) и дохода (положительные значения), которые происходят в регулярные периоды.</summary>
        <returns>To be added.</returns>
        <remarks><para>Значения должны содержать по крайней мере одно положительное значение и одно отрицательное значение для вычисления внутренней скорости возврата. </para>
          <para>IRR использует порядок значений для интерпретации порядка денежных потоков. Обязательно введите свои платежи и доходы в нужной последовательности. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются.</para>
          <para>Microsoft Excel использует итеративный метод для вычисления <b>Irr.</b> Начиная с угадать, <b>Irr</b> цикличен по вычислению, пока результат не будет точным в пределах 0,00001 процента. Если <b>Irr</b> не может найти результат, который работает после 20 попыток, #NUM! возвращается значение ошибки. </para>
          <para>В большинстве случаев вам не нужно угадать вычисление <b>Irr.</b> Если угадать не нужно, предполагается, что оно составляет 0,1 (10 процентов). </para>
          <para>Если <b>Irr</b> предоставляет #NUM! значение ошибки, или если результат не близко к ожидаемому, попробуйте еще раз с другим значением для угадать.</para>
          <para>
            <b>Irr</b> тесно связан с функцией <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> net present value. Ставка прибыли, вычисляемая <b>с помощью Irr,</b> — это процентная ставка, соответствующая чистому значению 0 (ноль). В следующей формуле показано, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> как и <b>Irr</b> связаны:</para>
          <para>NPV(IRR(B1:B6),B1:B6) равно 3,60E-08 [В пределах точности вычисления <b>Irr</b> значение 3.60E-08 фактически равно 0 (ноль).]</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — нужное значение. Значение может быть пустым (пустая ячейка), ошибкой, логическим, текстовым, числом или эталонным значением или именем, ссылаясь на любое из этих значений, которое вы хотите проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, ссылается ли значение на любое значение ошибки, кроме #N/A.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значений функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER("19") "19" не преобразуется из текстового значения, а функция <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> возвращает <b>значение false.</b> </para>
          <para>Функции IS полезны в формулах для тестирования результата вычисления. В сочетании с функцией IF они предоставляют метод для выявив ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — нужное значение. Значение может быть пустым (пустая ячейка), ошибкой, логическим, текстовым, числом или эталонным значением или именем, ссылаясь на любое из этих значений, которое вы хотите проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, относится ли значение к какой-либо ошибке (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?или #NULL!).</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значений функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER("19") "19" не преобразуется из текстового значения, а функция <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> возвращает <b>значение false.</b> </para>
          <para>Функции IS полезны в формулах для тестирования результата вычисления. В сочетании с функцией IF они предоставляют метод для выявив ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — нужное значение. Значение может быть пустым (пустая ячейка), ошибкой, логическим, текстовым, числом или эталонным значением или именем, ссылаясь на любое из этих значений, которое вы хотите проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, является ли значение even.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значений функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER("19") "19" не преобразуется из текстового значения, а функция <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> возвращает <b>значение false.</b> </para>
          <para>Функции IS полезны в формулах для тестирования результата вычисления. В сочетании с функцией IF они предоставляют метод для выявив ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ссылка на ячейку, для проверки. Ссылка может быть ссылкой на ячейку, формулой или именем, которое ссылается на ячейку.</param>
        <summary>Проверяет, является ли ссылка на ячейку, содержащую формулу, и возвращает <b>true</b> или <b>FALSE.</b></summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — нужное значение. Значение может быть пустым (пустая ячейка), ошибкой, логическим, текстовым, числом или эталонным значением или именем, ссылаясь на любое из этих значений, которое вы хотите проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, относится ли значение к логическому значению.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значений функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER("19") "19" не преобразуется из текстового значения, а функция <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> возвращает <b>значение false.</b> </para>
          <para>Функции IS полезны в формулах для тестирования результата вычисления. В сочетании с функцией IF они предоставляют метод для выявив ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — нужное значение. Значение может быть пустым (пустая ячейка), ошибкой, логическим, текстовым, числом или эталонным значением или именем, ссылаясь на любое из этих значений, которое вы хотите проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, ссылается ли значение на значение ошибки #N/A (значение не доступно).</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значений функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER("19") "19" не преобразуется из текстового значения, а функция <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> возвращает <b>значение false.</b> </para>
          <para>Функции IS полезны в формулах для тестирования результата вычисления. В сочетании с функцией IF они предоставляют метод для выявив ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — нужное значение. Значение может быть пустым (пустая ячейка), ошибкой, логическим, текстовым, числом или эталонным значением или именем, ссылаясь на любое из этих значений, которое вы хотите проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, относится ли значение к любому элементу, который не является текстом. (Обратите внимание, что эта функция возвращает <b>значение true,</b> если значение ссылается на пустую ячейку.)</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значений функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER("19") "19" не преобразуется из текстового значения, а функция <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> возвращает <b>значение false.</b> </para>
          <para>Функции IS полезны в формулах для тестирования результата вычисления. В сочетании с функцией IF они предоставляют метод для выявив ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — нужное значение. Значение может быть пустым (пустая ячейка), ошибкой, логическим, текстовым, числом или эталонным значением или именем, ссылаясь на любое из этих значений, которое вы хотите проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, относится ли значение к числу.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значений функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER("19") "19" не преобразуется из текстового значения, а функция <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> возвращает <b>значение false.</b> </para>
          <para>Функции IS полезны в формулах для тестирования результата вычисления. В сочетании с функцией IF они предоставляют метод для выявив ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number — значение, закругляемого.</param>
        <param name="Arg2">Значительность — необязательное число, к которому необходимо округить число. Если значение важности опущено, значение по умолчанию — 1.</param>
        <summary>Возвращает число, округлое до ближайшего или до ближайшего кратного значения.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — нужное значение. Значение может быть пустым (пустая ячейка), ошибкой, логическим, текстовым, числом или эталонным значением или именем, ссылаясь на любое из этих значений, которое вы хотите проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, является ли значение нечетным.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значений функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER("19") "19" не преобразуется из текстового значения, а функция <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> возвращает <b>значение false.</b> </para>
          <para>Функции IS полезны в формулах для тестирования результата вычисления. В сочетании с функцией IF они предоставляют метод для выявив ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Код даты и времени, используемый Excel для вычисления даты и времени.</param>
        <param name="Arg2">Этот аргумент не доступен в функции.</param>
        <summary>Возвращает номер недели ISO года для заданной даты.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks><para>Возвращает порядковую дату недели календаря [ISO8601] в заданном году. ISO 8601 определяет календарную неделю в качестве интервала времени в семь календарных дней, начиная с понедельника, а первую календарную неделю года в качестве первого четверга этого года.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ставка — процентная ставка для инвестиций.</param>
        <param name="Arg2">Per — период, для которого вы хотите найти интерес, и должен находиться в промежутке от 1 до nper.</param>
        <param name="Arg3">Nper — общее количество периодов оплаты инвестиций.</param>
        <param name="Arg4">Pv — настоящее значение инвестиций. Для займа pv — это сумма займа.</param>
        <summary>Вычисляет проценты, выплаченные за определенный период инвестиций. Эта функция предоставляется для обеспечения совместимости с Lotus 1-2-3.</summary>
        <returns>To be added.</returns>
        <remarks><para>Убедитесь, что вы согласованы с единицами, которые используются для указания скорости и nper. Если вы делаете ежемесячные платежи по кредиту на 4 года с годовым процентом 12 процентов, используйте 12 %/12 для ставки и 4*12 для nper. Если вы делаете годовые платежи по одному кредиту, используйте 12 % для ставки и 4 для nper. </para>
          <para>Для всех аргументов денежные средства, которые вы платите, такие как вклады для сохранения или другие активы, представлены отрицательными числами; Получаемые вами денежные средства, такие как проверки на досмотр и другие банковские счета, представлены положительными числами. </para>
          <para>Дополнительные сведения о финансовых функциях см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> этой функции.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значение — нужное значение. Значение может быть пустым (пустая ячейка), ошибкой, логическим, текстовым, числом или эталонным значением или именем, ссылаясь на любое из этих значений, которое вы хотите проверить.</param>
        <summary>Проверяет тип значения и возвращает значение <b>true</b> или <b>false</b> в зависимости от того, относится ли значение к тексту.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы значений функций IS не преобразуются. Например, в большинстве других функций, где требуется число, текстовое значение "19" преобразуется в число 19. Однако в формуле ISNUMBER("19") "19" не преобразуется из текстового значения, а функция <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> возвращает <b>значение false.</b> </para>
          <para>Функции IS полезны в формулах для тестирования результата вычисления. В сочетании с функцией IF они предоставляют метод для выявив ошибок в формулах.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 аргументов, для которых вы хотите вычислить расчеты. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает часть набора данных. Литеза характеризует относительную пиковую или плоскость распространения по сравнению с обычным распределением. Положительное распределение указывает на относительно пиковое распределение. Отрицательный прогноз указывает на относительно плоское распределение.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если имеется менее четырех точек данных или стандартное отклонение <b></b> примера равно нулю, Ольга возвращает значение #DIV/0! значение ошибки. </para>
          <para>Ольга определяется как: </para>
          <para>Рис. 1. Уравнение Ольга</para>
          <para> </para>
          <para> </para>
          <para>где s — стандартное отклонение образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон данных, для которого необходимо определить наибольшее значение k-th.</param>
        <param name="Arg2">K — положение (из самого большого) в массиве или диапазоне ячеей возвращаемого данных.</param>
        <summary>Возвращает наибольшее значение k-th в наборе данных. Эту функцию можно использовать для выбора значения в зависимости от его относительного положения. Например, с помощью <b>большого</b> размера можно получить наивысший показатель, результат в окнах или третье место.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пустой, <b>large</b> возвращает #NUM! значение ошибки. </para>
          <para>Если k ≤ 0 или k больше числа точек данных, <b>большой</b> возвращает #NUM! значение ошибки.</para>
          <para>Если n — это число точек данных в диапазоне, то LARGE(array,1) возвращает наибольшее значение, а LARGE(array,n) возвращает наименьшее значение.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число1, число 2,... - от 1 до 29 значений, для которых необходимо наименьшее общее число. Если значение не является integer, оно усечено.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает наименьшее количество из нескольких из них. Наименьшим общим числом является наименьшее положительное число, которое является кратным из всех целый аргументов числа 1, числа 2 и так далее. Используйте LCM, чтобы добавлять дробные части с разными данными.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не является числовым, <b>Lcm</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если какой-либо аргумент меньше нуля, <b>Lcm</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y - набор значений y, которые вы уже знаете в связи y = mx + b.</param>
        <param name="Arg2">Known_x - необязательный набор X-значений, которые вы, возможно, уже знаете в связи y = mx + b.</param>
        <param name="Arg3">Const — логическое значение, указывав, следует ли принудительно установить для константы b значение 0.</param>
        <param name="Arg4">Статистика — логическое значение, указывав, следует ли возвращать дополнительную статистику регрессии.</param>
        <summary>Вычисляет статистику для строки с помощью метода "наименьших квадратов" для вычисления прямой линии, которая лучше всего подходит для ваших данных, и возвращает массив, описывая строку. Поскольку эта функция возвращает массив значений, она должна быть введена в качестве формулы массива.</summary>
        <returns>To be added.</returns>
        <remarks><para>Уравнение для строки:</para>
          <para>y = mx + b или</para>
          <para>y = m1x1 + m2x2 + ... + b (если существует несколько диапазонов x-значений)</para>
          <para>где зависимым значением y является функция независимых X-значений. Значения m — это коэффициенты, соответствующие каждому x-значению, а b — постоянное значение. Обратите внимание, что векторами могут быть y, x и m. Массив, который <b>возвращает LinEst,</b> — {mn,mn-1,...,m1,b}. <b>LinEst</b> также может возвращать дополнительную статистику регрессии.</para>
          <para>Если массив known_y в одном столбце, каждый столбец known_x интерпретируется как отдельная переменная. </para>
          <para>Если массив known_y в одной строке, каждая строка known_x интерпретируется как отдельная переменная. </para>
          <para>Массив known_x может включать один или несколько наборов переменных. Если используется только одна переменная, known_y и known_x могут быть диапазонами любой фигуры, если они имеют одинаковые размеры. Если используется несколько переменных, known_y должны быть вектором (то есть диапазоном с высотой одной строки или шириной одного столбца). </para>
          <para>Если known_x опущен, предполагается, что это массив {1,2,3,...} такой же размер, known_y, что и у known_y. </para>
          <para>Если const имеет <b>true</b> или опущен, b вычисляется обычным образом. </para>
          <para>Если const имеет <b>значение false,</b>для b устанавливается значение 0, а значения m настраиваются для уместного y = mx. </para>
          <para>Если статистика является <b>truuue,</b> <b>LinEst</b> возвращает дополнительную статистику регрессии, поэтому возвращаемой массив является {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r2,sey; F,df;ssreg,ssresid}. </para>
          <para>Если статистика имеет <b>ложное</b> или опущенное состояние, <b>LinEst</b> возвращает только коэффициенты m и константы b. </para>
          <para>Дополнительная статистика регрессии:</para>
          <list type="table">
            <item>
              <term>se1,se2,...,sen</term>
              <description>Стандартные значения ошибки для коэффициентов m1,m2,...,mn.</description>
            </item>
            <item>
              <term>seb</term>
              <description>Стандартное значение ошибки для константы b (seb = #N/A, если const имеет <b>значение false).</b></description>
            </item>
            <item>
              <term>r2</term>
              <description>Коэффициент определения. Сравнивает предполагаемые и фактические значения y и диапазоны в диапазоне от 0 до 1. Если он имеет значение 1, в примере имеется идеальное соотношение— разница между предполагаемым значением y и фактическим значением y отсутствует. С другой стороны, если коэффициент определения — 0, уравнение регрессии не является полезным при прогнозировании значения y. </description>
            </item>
            <item>
              <term>sey</term>
              <description>Стандартная ошибка для оценки y.</description>
            </item>
            <item>
              <term>F</term>
              <description>Статистика F или наблюдаемые значения F. Используйте статистику F, чтобы определить, происходит ли наблюдаемая связь между зависимыми и независимыми переменными случайно.</description>
            </item>
            <item>
              <term>df</term>
              <description>Градусы свобод. Используйте градусы свободного пользования, чтобы найти критически важные значения В статистической таблице. Сравните значения, которые вы найдете в таблице, со статистикой F, возвращаемой <b>LinEst,</b> чтобы определить уровень достоверности для модели. </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>Регрессивная сумма квадратов.</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>Остаточная сумма квадратов.</description>
            </item>
          </list>
          <para>На следующем рисунке показан порядок, в котором возвращаются дополнительные статистические данные о регрессии.</para>
          <para>Рис. 1. Таблица</para>
          <para> </para>
          <para> </para>
          <para>Вы можете описать любую прямую линию с наклоном и перехватом y: </para>
          <para>Подмазия (m):</para>
          <para>
Чтобы найти наклон строки, часто написанный как m, с помощью двух точек на строке (x1,y1) и (x2,y2); заместь равна (y2 - y1)/(x2 - x1).</para>
          <para>Y-intercept (b):</para>
          <para>
Y-перехват строки, часто написанный как b, — это значение y в точке, в которой линия пересекает ось y.</para>
          <para>Уравнение прямой линии — y = mx + b. После того как вы знаете значения m и b, вы можете вычислить любую точку в строке, подключив значение Y или X к этому уравнению. Вы также можете использовать <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" /> эту функцию.</para>
          <para>Если у вас есть только одна независимая x-переменная, вы можете получить непосредственное значение наклона и Y-перехвата, используя следующие формулы: </para>
          <para>Подмазия:</para>
          <para>
=INDEX(LINEST(known_y,known_x's),1)</para>
          <para>Y-intercept:</para>
          <para>
=INDEX(LINEST(known_y,known_x's),2)</para>
          <para>Точность строки, вычисляемой с помощью <b>LineEst,</b> зависит от степени точеи данных. Чем линейнее данные, тем точнее <b>модель LineEst.</b> <b>LineEst</b> использует метод наименьших квадратов для определения наилучшего подгонка данных. Если у вас есть только одна независимая x-переменная, вычисления для m и b основаны на следующих формулах: </para>
          <para>Рис. 2. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>где x и y являются примерами означает, например, x = AVERAGE(известные X) и y = AVERAGE(known_y s).</para>
          <para>Подгощая линии и кривые функции <b>LineEst</b> и может вычислить лучшую прямую или экспоненциальной кривой, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" /> которая соответствует вашим данным. Однако необходимо решить, какой из двух результатов лучше всего подходит для ваших данных. Вы можете вычислить TREND(known_y,known_x) для прямой линии или GROWTH(known_y, known_x) для экспоненциальной кривой. Эти функции без аргумента new_x возвращают массив значений y, прогнозируемых по этой строке или кривой в фактических точках данных. Затем можно сравнить прогнозируемые значения с фактическими значениями. Вам может потребоваться отобразить оба этих диаграммы для визуального сравнения. </para>
          <para>При анализе регрессии Microsoft Excel вычисляет для каждой точки разницу в квадрате между значением y, оцениваемой для этой точки, и фактическим значением y. Сумма этих квадратных отличий называется остаточной суммой квадратов ssresid. Затем Microsoft Excel вычисляет общую сумму квадратов, sstotal. Если значение const = <b>true</b>или пропущено, общая сумма квадратов — это сумма квадратных различий между фактическими значениями y и средними значениями y. Если const = <b>false,</b>общая сумма квадратов — это сумма квадратов фактических значений y (без вычитания среднего значения y из каждого отдельного значения y). Затем регрессивную сумму квадратов, ssreg, можно найти из: ssreg = sstotal - ssresid. Чем меньше остаточной суммы квадратов, тем больше значение коэффициента определения r2, которое является показателем того, насколько хорошо уравнение, которое является результатом анализа регрессии, объясняет отношение между переменными. r2 равно ssreg/sstotal. </para>
          <para>В некоторых случаях один или несколько столбцов X (предполагается, что Y и X находятся в столбцах) могут не иметь дополнительного прогнозного значения в присутствии других X-столбцов. Другими словами, удаление одного или более столбцов X может привести к одинаково точным прогнозируемым значениям Y. В этом случае эти избыточные столбцы X следует оградить от модели регрессии. Такое сходство называется "collinearity", так как любой избыточный X-столбец может быть выражен в сумме кратных X-столбцов. <b>LinEst</b> проверяет collinearity и удаляет все избыточные столбцы X из регрессионной модели при их идентификации. Удалены столбцы X можно распознать в выходных данных <b>LinEst</b> как имеющие 0 коэффициентов, а также 0 se's. Если один или несколько столбцов удаляются как избыточные, это влияет на df, так как df зависит от количества X столбцов, фактически используемых для прогнозируемых целей. Если df изменено из-за удаления избыточных X-столбцов, это также влияет на значения sey и F. Collinearity should be relatively rare in practice. Тем не менее, один из таких сценариев с большей вероятностью возникает, когда некоторые столбцы X содержат только 0 и 1 в качестве индикаторов того, является ли тема в эксперименте участником определенной группы или не является ее членом. Если const = <b>true</b> или пропущен, <b>LinEst</b> эффективно вставляет дополнительный X-столбец всех 1 для моделирования перехвата. Если у вас есть столбец с по 1 для каждого субъекта, если это был самец, или 0, если нет, и у вас также есть столбец с по 1 для каждой темы, если она есть, или 0, если нет, последний столбец является избыточным, так как записи в нем можно получить из вычитания записи в столбце "индикатор-самец" из записи в дополнительном столбце всех 1, добавленных <b>LineEst</b>. </para>
          <para>df вычисляется следующим образом, когда из модели не удаляются столбцы X из-за collinearity: если имеются k столбцы known_x и const = <b>true</b> или пропущены, то df = n – k – 1. Если const = <b>false,</b>то df = n - k. В обоих случаях каждый столбец X, удаляемый из-за collinearity, увеличивает df на 1. </para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массива. При вводе константы массива known_x например, аргумента, используйте запятые, чтобы разделять значения в одной строке и с запятой для разных строк. Знаки разных символов могут быть разными в зависимости от языковых параметров в региональных и языковых параметрах панели управления. </para>
          <para>Обратите внимание, что значения y, прогнозируемые уравнением регрессии, могут быть не действительны, если они находятся за пределами диапазона значений y, которые вы использовали для определения уравнения. Алгоритм, используемый в функции <b>LinEst,</b> отличается от алгоритма, используемого в функциях <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> функциях. Разница между этими алгоритмами может привести к разным результатам, если данные не засвечены и соопределены. Например, если точки данных аргумента known_y 0, а точки данных аргумента known_x 1: </para>
          <para>
            <b>LineEst</b> возвращает значение 0. Алгоритм <b>LinEst</b> разработан для возврата разумных результатов для данных collinear, и в этом случае можно найти хотя бы один ответ. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> вернетесь #DIV/0! error. Алгоритм и алгоритм предназначены для поиска одного и только одного ответа, и в этом случае может быть несколько <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> ответов.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — положительное реальное число, для которого вы хотите получить естественный логарифм.</param>
        <summary>Возвращает естественный логарифм числа. Естественные логарифмы основаны на константе e (2.71828182845904).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Ln</b> — это обратная функция EXP.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — положительное реальное число, для которого нужно логарифм.</param>
        <param name="Arg2">Base — основа логарифма. Если база опущена, предполагается, что она имеет 10.</param>
        <summary>Возвращает логарифм числа в указанную базу.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — положительное реальное число, для которого необходимо логарифм base-10.</param>
        <summary>Возвращает логарифм числа с базой 10.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y - набор значений y, которые вы уже знаете в связи y = b*m^x.</param>
        <param name="Arg2">Known_x - необязательный набор X-значений, которые вы, возможно, уже знаете в связи y = b*m^x.</param>
        <param name="Arg3">Const — логическое значение, указывав, следует ли принудительно установить для константы b значение 1.</param>
        <param name="Arg4">Статистика — логическое значение, указывав, следует ли возвращать дополнительную статистику регрессии.</param>
        <summary>При анализе регрессии вычисляет экспоненциальное кривые, которое соответствует вашим данным, и возвращает массив значений, описывая кривую. Поскольку эта функция возвращает массив значений, она должна быть введена в качестве формулы массива.</summary>
        <returns>To be added.</returns>
        <remarks><para>Уравнение для кривой:</para>
          <para>y = b*m^x или</para>
          <para>y = (b *(m1^x1)*(m2^x2)*_) (если имеется несколько X-значений)</para>
          <para>где зависимым значением y является функция независимых X-значений. Значения m являются основами, соответствующими каждому из значений x-значения exponent, а b — постоянным значением. Обратите внимание, что векторами могут быть y, x и m. Возвращается <b>массив</b> {mn,mn-1,...,m1,b}.</para>
          <para>Если массив known_y в одном столбце, каждый столбец known_x интерпретируется как отдельная переменная. </para>
          <para>Если массив known_y в одной строке, каждая строка known_x интерпретируется как отдельная переменная. </para>
          <para>Массив known_x может включать один или несколько наборов переменных. Если используется только одна переменная, known_y и known_x могут быть диапазонами любой фигуры, если они имеют одинаковые размеры. Если используется несколько переменных, known_y должны быть диапазоном ячеек с высотой одной строки или шириной одного столбца (который также называется вектором). </para>
          <para>Если known_x опущен, предполагается, что это массив {1,2,3,...} такой же размер, known_y, что и у known_y. </para>
          <para>Если const имеет <b>true</b> или опущен, b вычисляется обычным образом.</para>
          <para>Если const имеет <b>значение false,</b>для b за установлено значение 1, а для m-values устанавливается значение y = m^x.</para>
          <para>Если статистика имеет <b>true,</b> <b>LogEst</b> возвращает дополнительную статистику регрессии, поэтому возвращенный массив — {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r 2,sey; F,df;ssreg,ssresid}. </para>
          <para>Если статистика имеет <b>ложное</b> или опущенное состояние, <b>LogEst</b> возвращает только коэффициенты m и константы b. </para>
          <para>Дополнительные сведения о дополнительной статистике регрессии см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> .</para>
          <para>Чем больше график данных похож на экспоненциальной кривой, тем лучше вычисляемая строка будет соответствовать вашим данным. Like <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> , <b>LogEst</b> returns an array of values that describes a relationship among the values, but <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> fits a straight line to your data; <b>LogEst соответствует</b> экспоненциальной кривой. Дополнительные сведения см. в статье <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Если у вас есть только одна независимая X-переменная, вы можете получить значения y-intercept (b) напрямую, используя следующую формулу: </para>
          <para>Y-intercept (b):</para>
          <para>
INDEX(LOGEST(known_y,known_x's),2)</para>
          <para>Вы можете использовать уравнение y = b*m^x для прогнозирования будущих значений y, но Microsoft Excel предоставляет функцию для этого <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" /> за вас. Дополнительные сведения см. в статье <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />.</para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массива. </para>
          <para>При вводе константы массива known_x например, аргумента, используйте запятые, чтобы разделять значения в одной строке и с запятой для разных строк. Знаки разных символов могут быть разными в зависимости от языковых параметров в региональных и языковых параметрах панели управления. </para>
          <para>Следует отметить, что значения y, прогнозируемые уравнением регрессии, могут быть не допустимыми, если они находятся за пределами диапазона значений y, которые вы использовали для определения уравнения.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с логнормальным распределением.</param>
        <param name="Arg2">Mean — это мног ln(x).</param>
        <param name="Arg3">Standard_dev — стандартное отклонение ln(x).</param>
        <summary>Используйте lognormal distribution для анализа логарифмически преобразованных данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" /> методе.</para>
          <para>Если какой-либо аргумент не является числовым, <b>LogInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; = 0 или вероятность &gt; = 1, <b>LogInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если standard_dev &lt; = 0, <b>LogInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Обратное для функции распределения логнормальных логнормальных логинов: </para>
          <para>Рис. 1. Обратное логнормальной функции распространения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, при котором необходимо оценить функцию.</param>
        <param name="Arg2">Mean — мног ln(x).</param>
        <param name="Arg3">Standard_dev - стандартное отклонение ln(x).</param>
        <param name="Arg4">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное имеет</b>LogNorm_Dist <b>возвращает</b> накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция плотности вероятности.</param>
        <summary>Возвращает логнормальное распределение x, где ln(x) обычно распределяется со standard_dev. Используйте эту функцию для анализа данных, которые были logarithmically преобразованы.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числовым, LogNorm_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x ≤ 0 или standard_dev ≤ 0, <b></b> LogNorm_Dist возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для логнормальной функции накопительного распределения: </para>
          <para>Рис. 1. Уравнение для логнормального накопительного распределения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с логнормальным распределением.</param>
        <param name="Arg2">Mean — мног ln(x).</param>
        <param name="Arg3">Standard_dev - стандартное отклонение ln(x).</param>
        <summary>Возвращает обратное логнормальное накопительное распределение функции. Используйте lognormal distribution для анализа логарифмически преобразованных данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числом, LogNorm_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность = 0 или &lt; вероятность = 1, LogNorm_Inv &gt; возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если standard_dev &lt; = 0, <b></b> LogNorm_Inv возвращает #NUM! значение ошибки. </para>
          <para>Обратное для функции распределения логнормальных логнормальных логинов: </para>
          <para>Рис. 1. Обратное логнормальное распределение функции</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, при котором необходимо оценить функцию.</param>
        <param name="Arg2">Mean — это мног ln(x).</param>
        <param name="Arg3">Standard_dev — стандартное отклонение ln(x).</param>
        <summary>Возвращает накопительное распределение логнормальных параметров x, где ln(x) обычно распределяется с параметрами, которые означают и standard_dev. Используйте эту функцию для анализа данных, которые были logarithmically преобразованы.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если какой-либо аргумент не является числовым, <b>LogNormDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x ≤ 0 или standard_dev ≤ 0, <b>LogNormDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для логнормальной функции накопительного распределения: </para>
          <para>Рис. 1. Уравнение для логнормального накопительного распределения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value — значение, которое <b>ищет</b> поиск в первом векторе. Lookup_value может быть числом, текстом, логическим значением или именем или ссылкой, ссылаясь на значение.</param>
        <param name="Arg2">Lookup_vector array — в векторной форме диапазон, содержащий только одну строку или один столбец. Значения в lookup_vector могут быть текстом, числами или логическими значениями. В форме массива диапазон ячеек, содержащий текст, числа или логические значения, которые необходимо сравнить с lookup_value.</param>
        <param name="Arg3">Result_vector — используется только с векторной формой. Диапазон, содержащий только одну строку или столбец. Он должен иметь тот же размер, что и размер lookup_vector.</param>
        <summary>Возвращает значение из диапазона из одной строки или столбца или из массива. Функция LOOKUP имеет две формы синтаксиса: векторную форму и форму массива.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Искать значение в диапазоне с одной строкой или одним столбцом (известном как вектор) и возвращать значение из той же позиции во второй строке или в диапазоне с одним столбцом</term>
              <description>Векторная форма</description>
              <description>Используйте векторную форму, если у вас есть большой список значений для подыскки или когда значения могут меняться со временем.</description>
            </item>
            <item>
              <term>Посмотрите на указанное значение в первой строке или столбце массива и вернетесь из той же позиции в последней строке или столбце массива.</term>
              <description>Форма массива</description>
              <description>Используйте форму массива, если имеется небольшой список значений, и значения остаются постоянными с течением времени.</description>
            </item>
          </list>
          <para>
            <b>Примечание.</b>Вы также можете использовать функцию <b>Lookup</b> в качестве альтернативы функции IF для сложных тестов или тестов для более чем семи условий. Примеры см. в форме массива.</para>
          <para>Векторная форма</para>
          <para>Вектор — это диапазон из одной строки или одного столбца. Векторная форма <b></b> подыскки ищет значение в диапазоне из одной строки или столбца (известном как вектор) и возвращает значение из той же позиции во второй строке или в диапазоне с одним столбцом. Используйте эту форму <b>функции</b> подыском, если нужно указать диапазон, содержащий значения, которые необходимо найти. Другая форма <b>подсмотра</b> автоматически ищется в первом столбце или строке.</para>
          <para>
            <b>Важно!</b>Значения в lookup_vector должны быть расположены в порядке возрастания: ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true;</b> в <b>противном случае подыском</b> может дать неправильное значение. Текст в верхнем и нижнем регистрах эквивалентен.</para>
          <para>Если LOOKUP не может найти lookup_value, оно соответствует наибольшему значению в lookup_vector, которое меньше или равно lookup_value. </para>
          <para>Если lookup_value меньше наименьшего значения в <b>lookup_vector,</b> подыском #N значение ошибки.</para>
          <para>Форма массива</para>
          <para>Форма массива <b>lookup</b> ищет указанное значение в первой строке или столбце массива и возвращает значение из той же позиции в последней строке или столбце массива. Используйте эту <b></b> форму подыском, если значения, которые необходимо найти, находятся в первой строке или столбце массива. Используйте другую форму <b></b> подыском, если нужно указать расположение столбца или строки.</para>
          <para>
            <b>Совет.</b>В общем случае лучше использовать функцию или функцию вместо формы <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> массива <b>Lookup.</b> Эта форма <b>подыскки</b> предоставляется для обеспечения совместимости с другими программами для работы с электронными таблицами.</para>
          <para>Если <b>поиск не</b> может найти lookup_value, он использует наибольшее значение в массиве, которое меньше или равно lookup_value.</para>
          <para>Если lookup_value меньше наименьшего значения в первой строке или столбце (в <b></b> зависимости от размеров массива), подыском возвращает значение ошибки #N/A.</para>
          <para>Форма массива <b>lookup</b> очень похожа на функции <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> функции. Разница заключается в том, что поиск lookup_value в первой строке, поиск в первом столбце и поиск поиска в соответствии с <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> размерами массива. <b></b></para>
          <para>Если массив охватывает область, которая шире высоты (больше столбцов, чем <b>строк),</b> поиск lookup_value в первой строке.</para>
          <para>Если массив квадратный или выше ширины (больше <b>строк,</b> чем столбцов), поиск под поиском выполняется в первом столбце.</para>
          <para>With <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> and , you can index down or <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> across, but <b>Lookup</b> always selects the last value in the row or column.</para>
          <para>
            <b>Важно!</b>Значения в массиве должны быть размещены в порядке возрастания: ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true;</b> в <b>противном случае при</b> подсмотре может быть указано неправильное значение. Текст в верхнем и нижнем регистрах эквивалентен.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - значение, используемого для поиска нужного значения в таблице.</param>
        <param name="Arg2">Lookup_array — это целый диапазон ячеек, содержащий возможные значения подыском. Lookup_array должен быть массивом или ссылкой на массив.</param>
        <param name="Arg3">Match_type - число -1, 0 или 1. Match_type, как Microsoft Excel lookup_value со значениями в lookup_array.</param>
        <summary>Возвращает относительную позицию элемента в массиве, который соответствует указанному значению в указанном порядке. Используйте <b>Match</b> вместо одной из функций, если требуется положение элемента в диапазоне, а не <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" /> сам элемент.</summary>
        <returns>To be added.</returns>
        <remarks><para>Lookup_value это значение, совме с lookup_array. Например, при найме номера в телефонной книге в качестве значения подыском используется имя этого человека, но номер телефона — это нужное значение.</para>
          <para>Lookup_value может быть значением (числом, текстом или логическим значением) или ссылкой на ячейку на число, текст или логическое значение.</para>
          <para>Если match_type значение равно 1, <b>match</b> находит наибольшее значение, которое меньше или равно lookup_value. Lookup_array по возрастанию: ...-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>.</para>
          <para>Если match_type значение равно 0, <b>match</b> находит первое значение, точно равное lookup_value. Lookup_array могут быть в любом порядке.</para>
          <para>Если match_type -1, <b>Match</b> находит наименьшее значение, которое больше или равно lookup_value. Lookup_array по убываю: <b>true,</b> <b>false,</b>Z-A, ... 2, 1, 0, -1, -2, ...и так далее. Если match_type опущен, предполагается, что это 1.</para>
          <para>
            <b>Match</b> возвращает положение совпадаемого значения в lookup_array, а не само значение. Например, MATCH("b",{"a","b","c"},0) возвращает 2 относительное положение "b" в массиве {"a","b","c"}. </para>
          <para>
            <b>При</b> совпадении текстовых значений совпадение не различает буквы верхнего и нижнего регистра. </para>
          <para>Если <b>поиск</b> совпадения не удалось найти, возвращается значение #N/A. </para>
          <para>Если match_type 0, а lookup_value текст, в lookup_value можно использовать поддиастерные знаки, вопросии (?) и звездочки (*). Знак вопроса соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти действительный вопросии или звездочка, введите тильду (~) перед знаком.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 чисел, для которых нужно найти максимальное значение.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает наибольшее значение в наборе значений.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, используются только числа в этом массиве или ссылке. Пустые ячейки, логические значения или текст в массиве или ссылке игнорируются. </para>
          <para>Если аргументы не содержат чисел, <b>max</b> возвращает 0 (ноль). </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если вы хотите включить логические значения и текстовые представления чисел в ссылку в рамках вычисления, используйте <see cref="MAXA" /> функцию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — числовая массив с одинаковым количеством строк и столбцов.</param>
        <summary>Возвращает матрицу, определяемую массивом.</summary>
        <returns>To be added.</returns>
        <remarks><para>Массив может быть задан в качестве диапазона ячеей, например A1:C3; как константа массива, например {1,2,3;4,5,6;7,8,9}; или в качестве имени для любого из них. <b>MDeterm</b> возвращает #VALUE! ошибка, когда: </para>
          <para>Все ячейки массива пустые или содержат текст. </para>
          <para>Массив не имеет одинакового количества строк и столбцов. </para>
          <para>Размер массива превышает 73 столбца на 73 строки. </para>
          <para>Детерминант матрицы — это число, производное от значений в массиве. Для массива из трех строк с тремя столбцами A1:C3 определенное определение определяется как: </para>
          <code>MDETERM(A1:C3)</code>
          <para>equals</para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>Матричные детерминанты обычно используются для решения систем математических уравнений, которые включают несколько переменных. </para>
          <para>
            <b>MDeterm</b> вычисляется с точностью около 16 цифр, что может привести к небольшой числовой ошибке, если вычисление не завершено. Например, детерминант одной матрицы может отличаться от нуля на 1E-16.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Купон — годовая ставка купона для системы безопасности.</param>
        <param name="Arg4">Yld — годовая доходность системы безопасности.</param>
        <param name="Arg5">Частота — количество выплат по купонам в год. Для годовых платежей частота = 1; для semiannual, частота = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg6">Basis - the type of day count basis to use.</param>
        <summary>Возвращает измененную длительность для системы безопасности Macauley с предполагаемым четным значением 100 долларов США.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст, частота и основа усечены до integers. </para>
          <para>Если сроки расчета или возрастания не являются допустимой датой, <b>MDuration</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если yld &lt; 0 или если купон &lt; 0, <b>MDuration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если частота не превышает 1, 2 или 4, <b>MDuration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>MDuration</b> возвращает #NUM! значение ошибки. </para>
          <para>Если срок ≥, <b>MDuration</b> возвращает #NUM! значение ошибки. </para>
          <para>Измененная продолжительность определяется следующим образом: </para>
          <para>Рис. 1. Уравнение для измененной длительности</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 чисел, для которых вы хотите получить медиану.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает медиану заданных чисел. Медиана — это число в середине набора чисел.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если в наборе есть even number of numbers, <b>median</b> вычисляет среднее от двух чисел в середине. См. вторую формулу в примере.</para>
          <para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам.</para>
          <para>
            <b>Примечание.</b> <b>Функция Median</b> измеряет центральное расположение, которое является расположением центра группы чисел в статистическом распределении. Тремя наиболее распространенными показателями центральной практики являются:</para>
          <list type="bullet">
            <item>
              <description>Среднее арифметическое среднее, вычисляется путем добавления группы чисел и деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 делится на 30, разделенных на 6, что составляет 5. </description>
            </item>
            <item>
              <description>Медиана, которая является средним числом группы чисел; то есть в половине чисел имеются значения, которые больше медиана, а для половины чисел значения меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 имеет 4.</description>
            </item>
            <item>
              <description>Режим, который является наиболее частым числом в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 имеет 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной заметивности одинаковы. При неопределеном распределении группы чисел они могут быть разными.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 чисел, для которых нужно найти минимальное значение.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает наименьшее число в наборе значений.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, используются только числа в этом массиве или ссылке. Пустые ячейки, логические значения или текст в массиве или ссылке игнорируются. </para>
          <para>Если аргументы не содержат чисел, <b>Min</b> возвращает 0. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если вы хотите включить логические значения и текстовые представления чисел в ссылку в рамках вычисления, используйте функцию MINA.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — числовая массив с одинаковым количеством строк и столбцов.</param>
        <summary>Возвращает обратную матрицу для матрицы, хранимой в массиве.</summary>
        <returns>To be added.</returns>
        <remarks><para>Размер массива не должен превышать 52 столбца на 52 строки. В этом случае функция возвращает #VALUE! error. </para>
          <para>Массив может быть задан в качестве диапазона ячеей, например A1:C3; как константа массива, например {1,2,3;4,5,6;7,8,9}; или в качестве имени для любого из них. </para>
          <para>Если какие-либо ячейки массива пустые или содержат текст, <b>MInverse</b> возвращает #VALUE! значение ошибки. </para>
          <para>
            <b>MInverse</b> также возвращает #VALUE! значение ошибки, если массив не имеет одинакового количества строк и столбцов. </para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массива. </para>
          <para>Обратные матрицы, такие как детерминанты, обычно используются для решения систем математических уравнений, включающих несколько переменных. Продуктом матрицы и ее обратной является матрица удостоверений — квадратный массив, в котором диагональные значения равны 1, а все остальные значения равны 0. </para>
          <para>В качестве примера вычисления матрицы из двух строк из двух столбцов предположим, что диапазон A1:B2 содержит буквы a, b, c и d, которые представляют любые четыре числа. В следующей таблице показана обратная матрица A1:B2. </para>
          <list type="table">
            <item>
              <term>Строка 1</term>
              <description>d/(a *d-b* c)</description>
              <description>b/(b *c-a* d)</description>
            </item>
            <item>
              <term>Строка 2</term>
              <description>c/(b *c-a)*</description>
              <description>a/(a *d-b* c)</description>
            </item>
          </list>
          <para>
            <b>MInverse</b> вычисляется с точностью около 16 цифр, что может привести к небольшой числовой ошибке, если отмена не завершена. </para>
          <para>Некоторые квадратные матрицы невозможно инвертирует и возвращает #NUM! значение ошибки <b>с MInverse</b>. Для неуявяемой матрицы определяющим является 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значения — массив или ссылка на ячейки, содержащие числа. Эти числа представляют ряд платежей (отрицательные значения) и доход (положительные значения), которые происходят в регулярные периоды.</param>
        <param name="Arg2">Finance_rate - процентная ставка, которая вы платите с денежными средствами, используемыми в денежных потоках.</param>
        <param name="Arg3">Reinvest_rate - процентная ставка, получаемая по денежным потокам при их ремилифинге.</param>
        <summary>Возвращает измененную внутреннюю скорость возврата для ряда периодических денежных потоков. MIRR рассматривает как стоимость инвестиций, так и проценты, полученные при ремешинге денежных средств.</summary>
        <returns>To be added.</returns>
        <remarks><para>Значения должны содержать по крайней мере одно положительное значение и одно отрицательное значение для вычисления измененной внутренней скорости возврата. В <b>противном случае MIrr</b> возвращает #DIV/0! значение ошибки. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>
            <b>MIrr</b> использует порядок значений для интерпретации порядка денежных потоков. Обязательно введите свои платежи и доходы в нужной последовательности и с правильными знаками (положительные значения полученных денежных средств, отрицательные значения для оплаты денежных средств). </para>
          <para>Если n — это количество денежных потоков в значениях, frate — это finance_rate, а rrate — reinvest_rate, то формула <b>для MIrr:</b> </para>
          <para>Рис. 1. Формула для метода MIrr</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1, array2 — массивы, которые нужно умножить.</param>
        <param name="Arg2">Array1, array2 — массивы, которые нужно умножить.</param>
        <summary>Возвращает матричный продукт двух массивов. Результатом является массив с таким же количеством строк, что и array1, и тем же числом столбцов, что и массив array2.</summary>
        <returns>To be added.</returns>
        <remarks><para>Число столбцов в массиве array1 должно быть таким же, как число строк в массиве array2, а оба массива должны содержать только числа. </para>
          <para>Array1 и array2 могут быть заданы в качестве диапазонов ячений, констант массива или ссылок. </para>
          <para>
            <b>MMult</b> возвращает #VALUE! ошибка, когда: </para>
          <para>Все ячейки пустые или содержат текст. </para>
          <para>Число столбцов в массиве array1 отличается от количества строк в массиве array2. </para>
          <para>Размер итоговых массивов равен или превышает 5461 ячейку. </para>
          <para>Матрица массива продуктов a из двух массивов b и c: </para>
          <para>Рис. 1. Матрица массива продуктов a из двух массивов b и c</para>
          <para> </para>
          <para> </para>
          <para>где i — номер строки, а j — номер столбца.</para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массива.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 аргументов, для которых вы хотите вычислить режим. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает наиболее часто происходящие или повторяющиеся значения в массиве или диапазоне данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в этих <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> и других <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> методах.</para>
          <para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если набор данных не содержит повторяющиеся точки данных, <b>режим</b> возвращает значение #N/A ошибки.</para>
          <para>
            <b>Примечание.</b>Функция <b>Mode</b> измеряет центральное расположение, которое является расположением центра группы чисел в статистическом распределении. Три наиболее распространенных измерения центральной подмастисти:</para>
          <list type="bullet">
            <item>
              <description>Среднее арифметическое среднее, вычисляется путем добавления группы чисел и деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 делится на 30, разделенных на 6, что составляет 5. </description>
            </item>
            <item>
              <description>Медиана, которая является средним числом группы чисел; то есть в половине чисел имеются значения, которые больше медиана, а для половины чисел значения меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 имеет 4. </description>
            </item>
            <item>
              <description>Режим, который является наиболее частым числом в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 имеет 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной заметивности одинаковы. При неопределеном распределении группы чисел они могут быть разными.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1 — первый аргумент номера, для которого необходимо вычислить режим.</param>
        <param name="Arg2">Number2 — Number30 — число аргументов от 2 до 30, для которых необходимо вычислить режим. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает вертикальный массив наиболее часто используемых (или повторяющихся) значений в массиве или диапазоне данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если набор данных не содержит повторяющиеся точки <b>данных,</b> Mode_Mult возвращает значение #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 аргументов, для которых вы хотите вычислить режим. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает наиболее часто происходящие или повторяющиеся значения в массиве или диапазоне данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если набор данных не содержит повторяющиеся точки <b>данных,</b> Mode_Sngl возвращает значение #N/A.</para>
          <para>
            <b>Примечание.</b>Функция <b>Mode_Sngl</b> измеряет центральное расположение, которое является расположением центра группы чисел в статистическом распределении. Тремя наиболее распространенными показателями центральной практики являются:</para>
          <list type="bullet">
            <item>
              <description>Среднее арифметическое среднее и вычисляется путем добавления группы чисел и деления на количество этих чисел. Например, среднее значение 2, 3, 3, 5, 7 и 10 делится на 30, разделенных на 6, что составляет 5. </description>
            </item>
            <item>
              <description>Среднее число группы чисел; то есть в половине чисел имеются значения, которые больше медиана, а для половины чисел значения меньше медиана. Например, медиана 2, 3, 3, 5, 7 и 10 — это 4. </description>
            </item>
            <item>
              <description>Режим, наиболее часто происходящий номер в группе чисел. Например, режим 2, 3, 3, 5, 7 и 10 имеет 3.</description>
            </item>
          </list>
          <para>Для симметричного распределения группы чисел эти три измерения центральной заметивности одинаковы. При неопределеном распределении группы чисел они могут быть разными.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — значение для округли.</param>
        <param name="Arg2">Несколько — число, к которому нужно округить число.</param>
        <summary>Возвращает число, округлую до нужного числа.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>MRound</b> округляет до нуля, если оставшаяся часть деления числа на несколько больше или равна половине значения нескольких.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1,number2, ... - от 1 до 29 значений, для которых вы хотите многоядочная.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает отношение коэффициента суммы значений к продукту факториалов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не является числовым, <b>MultiNomial</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если какой-либо аргумент меньше нуля, <b>MultiNomial</b> возвращает #NUM! значение ошибки. </para>
          <para>Многономная: </para>
          <para>Рис. 1. Уравнение для метода MultiNomial</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Целое количество, указывав измерение матрицы единиц, которую необходимо вернуть.</param>
        <summary>Возвращает матрицу единиц для указанного измерения.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_f - количество сбоев.</param>
        <param name="Arg2">Number_s — пороговое число успешной работы.</param>
        <param name="Arg3">Probability_s — вероятность успеха.</param>
        <param name="Arg4">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное имеет</b> <b>NegBinom_Dist</b> возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция плотности вероятности.</param>
        <summary>Возвращает отрицательное binomial distribution. <b>NegBinom_Dist</b> возвращает вероятность number_f сбоев до number_s успешного number_s, когда постоянная вероятность успешного probability_s. Эта функция аналогична распределению binomial, за исключением того, что количество успешной работы является фиксированным, а количество пробных версиях является переменным. Как и в binomial, предполагается, что пробные версия независимы.</summary>
        <returns>To be added.</returns>
        <remarks><para>Например, необходимо найти 10 человек с отличными смугами, и вы знаете вероятность того, что кандидат имеет эти квалификации, составляет 0,3. <b>NegBinom_Dist</b> вычисляет вероятность того, что перед поиском всех 10 квалифицированных кандидатов будет вычисляется определенное количество неквалифицированных кандидатов: </para>
          <para>Number_f и number_s усечены до integers. </para>
          <para>Если какой-либо аргумент не <b></b> является числом, NegBinom_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если probability_s &lt; 0 или 1, NegBinom_Dist &gt; возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если number_f &lt; 0 или number_s &lt; 1, <b></b> NegBinom_Dist возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для отрицательного binomial распределения: </para>
          <para>Рис. 1. Уравнение для отрицательного binomial distribution</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>x — number_f, r — number_s, p — probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_f - количество сбоев.</param>
        <param name="Arg2">Number_s — пороговое число успешной работы.</param>
        <param name="Arg3">Probability_s - вероятность успеха.</param>
        <summary>Возвращает отрицательное binomial distribution. NegBinomDist возвращает вероятность number_f сбоев до number_s успешного number_s, когда постоянная вероятность успешного probability_s. Эта функция аналогична распределению binomial, за исключением того, что количество успешной работы является фиксированным, а количество пробных версиях является переменным. Как и в binomial, предполагается, что пробные версия независимы.</summary>
        <returns>To be added.</returns>
        <remarks><para>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Например, необходимо найти 10 человек с отличными смугами, и вы знаете, что кандидат имеет эти квалификации 0,3. <b>NegBinomDist</b> вычисляет вероятность того, что вы пройдете собеседование с определенным количеством неквалифицированных кандидатов перед поиском всех 10 квалифицированных кандидатов. </para>
          <para>Number_f и number_s усечены до integers. </para>
          <para>Если какой-либо аргумент не является числовым, <b>NegBinomDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если probability_s &lt; 0 или &gt; 1, <b>NegBinomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если number_f &lt; 0 или number_s &lt; 1, <b>NegBinomDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для отрицательного binomial распределения: </para>
          <para>Рис. 1. Уравнение для отрицательного binomial distribution</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>x — number_f, r — number_s, p — probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала.</param>
        <param name="Arg2">End_date — дата, представляючная дату окончания.</param>
        <param name="Arg3">Праздники — необязательный диапазон из одной или более дат, которые необходимо исключить из рабочего календаря, например праздников в штатах, федеральных и плавающих праздников. Список может представлять собой диапазон ячеек, содержащий даты, или константы массива серийных номеров, которые представляют эти даты.</param>
        <summary>Возвращает количество целых рабочих дней между start_date и end_date. Рабочие дни исключают выходные дни и любые даты, выявленные в выходные дни. Используйте <b>NetworkDays для</b> вычисления преимуществ сотрудников, которые накапливаются в зависимости от количества дней, отработано в течение определенного термина.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Если какой-либо аргумент не является допустимой датой, <b>NetworkDays</b> возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - дата начала, для которой необходимо вычислить разницу. Эти start_date могут быть более ранними, чем, те же, что и, или более поздние, чем end_date.</param>
        <param name="Arg2">End_date - даты окончания, для которой необходимо вычислить разницу. Эти start_date могут быть более ранними, чем, те же, что и, или более поздние, чем end_date.</param>
        <param name="Arg3">Выходные дни — это дни недели, которые являются выходными и не включаются в число целых рабочих дней между start_date и end_date. Выходные — это номер или строка выходных, задав время выходных.</param>
        <param name="Arg4">Праздники — необязательный набор дат, которые необходимо исключить из календаря рабочего дня. Праздники — это диапазон ячеек, содержащих даты, или константа массива последовательных значений, которые представляют эти даты. Порядок дат или последовательных значений в выходные дни может быть произвольным.</param>
        <summary>Возвращает количество целых рабочих дней между двумя датами с помощью параметров, чтобы указать, какие и сколько дней являются выходными днями. Дни выходных и любые дни, указанные как праздники, не считаются рабочими днями.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если start_date более позднее end_date, возвращаемая величина будет отрицательной, а величиной будет число целых рабочих дней. </para>
          <para>Если start_date для текущего базового значения даты находится вне <b>диапазона,</b> NetworkDays_Intl возвращает #NUM! значение ошибки. </para>
          <para>Если end_date для текущего базового значения даты находится вне <b>диапазона,</b> NetworkDays_Intl возвращает #NUM! значение ошибки. </para>
          <para>Если строка выходных дней имеет недействительные длины или <b>содержит недопустимые</b> символы, NetworkDays_Intl возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Effect_rate - эффективная процентная ставка.</param>
        <param name="Arg2">Npery — количество составных периодов в год.</param>
        <summary>Возвращает номинальную годовую процентную ставку, учитывая эффективную ставку и количество составных периодов в год.</summary>
        <returns>To be added.</returns>
        <remarks><para>Npery усечен до integer. </para>
          <para>Если один из аргументов не является числимым, <b>Номинал</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если effect_rate ≤ 0 или npery &lt; 1, <b>Номинал</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>Неимяние</b> связано <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" /> с тем, как показано в следующем уравнении: </para>
          <para>Рис. 1. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, для которого необходимо распространение.</param>
        <param name="Arg2">Mean — арифметическое означает распространение.</param>
        <param name="Arg3">Standard_dev - стандартное отклонение распространения.</param>
        <param name="Arg4">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное имеет</b> <b>Norm_Dist</b> возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция вероятности массовой работы.</param>
        <summary>Возвращает нормальное распределение для указанного стандартного и стандартного отклонения. Эта функция имеет широкий спектр приложений в статистике, в том числе тестирование с применением экспериментов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если это standard_dev число, Norm_Dist <b>возвращает</b> #VALUE! значение ошибки. </para>
          <para>Если standard_dev ≤ 0, <b>Norm_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если имеется в виду = 0, standard_dev = <b></b> 1, а накопительный = <b>true,</b>Norm_Dist возвращает стандартное нормальное <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> распределение. </para>
          <para>Уравнение для обычной функции плотности (накопительный = <b>false)</b>является: </para>
          <para>Рис. 1. Уравнение для функции обычной плотности</para>
          <para> </para>
          <para> </para>
          <para>Если <b>совокупное</b>= true, формула является неотъемлемой частью от отрицательного сходства к x данной формулы.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, соответствующая обычному распределению.</param>
        <param name="Arg2">Mean — арифметическое подмывка распространения.</param>
        <param name="Arg3">Standard_dev - стандартное отклонение распространения.</param>
        <summary>Возвращает обратное обычное накопительное распределение для указанного стандартного и стандартного отклонения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числом, Norm_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность = 0 или &lt; если вероятность = 1, Norm_Inv &gt; возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если standard_dev ≤ 0, <b>Norm_Inv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если имеется в виду = 0, <b></b> standard_dev = 1, Norm_Inv использует стандартное обычное распределение (см. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> ).</para>
          <para>Если значение вероятности <b>задано,</b> Norm_Inv ищет это значение x таким образом, чтобы NORM_DIST(x, значит, standard_dev, TRUE) = вероятность. Таким образом, <b>точность Norm_Inv</b> зависит от <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> точности.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z — значение, для которого вы хотите получить распространение.</param>
        <param name="Arg2">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное имеет</b> <b>Norm_S_Dist</b> возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция вероятности массовой работы.</param>
        <summary>Возвращает стандартную обычную функцию распределения. Распределение имеет значение 0 (ноль) и стандартное отклонение одного. Используйте эту функцию в качестве таблицы стандартных нормальных областей кривой.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если z не является <b>числом,</b> Norm_S_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Уравнение для стандартной обычной функции плотности: </para>
          <para>Рис. 1. Уравнение для стандартной функции обычной плотности</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, соответствующая обычному распределению.</param>
        <summary>Возвращает обратное стандартное обычное распределение. Распределение имеет значение 0 (ноль) и стандартное отклонение одного.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если вероятность не является числовой, <b></b> Norm_S_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или &gt; 1, <b></b> Norm_S_Inv возвращает #NUM! значение ошибки.</para>
          <para>Учитывая значение <b>вероятности,</b> Norm_S_Inv ищет это значение z таким образом, чтобы NORM_S_DIST(z) = вероятность. Таким образом, <b>точность Norm_S_Inv</b>зависит от <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> точности. <b>Norm_S_Inv</b> использует метод итеративного поиска. Если поиск не сошел после 100 итерации, функция возвращает значение #N/A ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, для которого необходимо распространение.</param>
        <param name="Arg2">Mean — арифметическое подмывание распространения.</param>
        <param name="Arg3">Standard_dev - стандартное отклонение распространения.</param>
        <param name="Arg4">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное имеет true,</b> <b>NormDist</b> возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция вероятности массовой работы.</param>
        <summary>Возвращает нормальное распределение для указанного стандартного и стандартного отклонения. Эта функция имеет очень широкий спектр приложений в статистике, включая тестирование с применением экспериментов.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если это standard_dev число, <b>NormDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если standard_dev ≤ 0, <b>NormDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если имеется в виду = 0, standard_dev = 1, а накопительный = <b>true,</b> <b>NormDist</b> возвращает стандартное обычное <b>распределение, NormDist</b>. </para>
          <para>Уравнение для обычной функции плотности (накопительный = <b>false)</b>является: </para>
          <para>Рис. 1. Уравнение для функции обычной плотности</para>
          <para> </para>
          <para> </para>
          <para>Если <b>совокупное</b>= true, формула является неотъемлемой частью от отрицательного сходства к x данной формулы.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, соответствующая обычному распределению.</param>
        <param name="Arg2">Mean — арифметическое подмывание распространения.</param>
        <param name="Arg3">Standard_dev - стандартное отклонение распространения.</param>
        <summary>Возвращает обратное обычное накопительное распределение для указанного стандартного и стандартного отклонения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" /> методе.</para>
          <para>Если какой-либо аргумент не является числовым, <b>NormInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или &gt; 1, <b>NormInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если standard_dev ≤ 0, <b>NormInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если имеется в виду = 0 и standard_dev = 1, <b>NormInv</b> использует стандартное обычное распределение <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" /> (см. ). </para>
          <para>При значении вероятности <b>NormInv</b> ищет это значение x таким образом, что NORMDIST(x, mean, standard_dev, TRUE) = вероятность. Таким образом, точность <b>NormInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>NormInv</b> использует метод итеративного поиска. Если поиск не сошел после 100 итерации, функция возвращает значение #N/A ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z — значение, для которого вы хотите получить распространение.</param>
        <summary>Возвращает стандартную обычную функцию распределения. Распределение имеет значение 0 (ноль) и стандартное отклонение одного. Используйте эту функцию в качестве таблицы стандартных нормальных областей кривой.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> методе.</para>
          <para>Если z не является числом, <b>NormSDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Уравнение для стандартной обычной функции плотности: </para>
          <para>Рис. 1. Уравнение для стандартной функции обычной плотности</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, соответствующая обычному распределению.</param>
        <summary>Возвращает обратное стандартное обычное распределение. Распределение имеет нулевое значение и стандартное отклонение от одного.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> методе.</para>
          <para>Если вероятность не является числовой, <b>NormSInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность = 0 или &lt; если вероятность = &gt; 1, <b>NormSInv</b> возвращает #NUM! значение ошибки.</para>
          <para>Учитывая значение вероятности, <b>NormSInv</b> ищет это значение z таким образом, чтобы NORMSDIST(z) = вероятность. Таким образом, точность <b>NormSInv</b> зависит от точности <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ставка — процентная ставка за период.</param>
        <param name="Arg2">Pmt — платеж, сделанный каждый период; оно не может измениться в течение жизни аннуитета. Как правило, pmt содержит основной и процентный ставки, но никакие другие сборы и налоги не используются.</param>
        <param name="Arg3">Pv — это настоящее значение или общая сумма, которую сейчас стоит ряд будущих платежей.</param>
        <param name="Arg4">Fv — будущее значение или денежный баланс, который вы хотите получить после последнего платежа. Если значение fv опущено, предполагается, что оно будет иметь значение 0 (будущий размер займа, например, 0).</param>
        <param name="Arg5">Тип — номер 0 или 1 и указывает время оплаты.</param>
        <summary>Возвращает количество периодов для инвестиций на основе периодических постоянных платежей и постоянной процентной ставки.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1 </term>
              <description>В начале периода</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ставка — ставка скидки в течение одного периода.</param>
        <param name="Arg2">Значение1, значение2, ... — от 1 до 29 аргументов, представляющих платежи и доход.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Вычисляет чистую сумму инвестиций с использованием скидки и ряда будущих платежей (отрицательные значения) и дохода (положительные значения).</summary>
        <returns>To be added.</returns>
        <remarks><para>Значение1, значение2, ... должно быть одинаково размяно во времени и происходит в конце каждого периода. </para>
          <para>
            <b>Npv</b> использует порядок значений 1, value2, ... порядок денежных потоков. Не забудьте ввести свои платежи и доходы в правильной последовательности. </para>
          <para>Учитываются аргументы, которые являются числами, пустыми ячейками, логическими значениями или текстовыми представлениями чисел; аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, игнорируются. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются.</para>
          <para>Инвестиции <b>npv</b> начинаются за один период до даты потока денежных средств value1 и заканчиваются последним потоком денежных средств в списке. Расчет <b>Npv основан</b> на будущих денежных потоках. Если ваш первый денежный поток происходит в начале первого периода, первое значение должно быть добавлено к <b>результату Npv,</b> не включаемого в аргументы значений. Дополнительные сведения см. в примерах ниже. </para>
          <para>Если n — количество потоков денежных средств в списке значений, формула <b>для Npv:</b> </para>
          <para>Рис. 1. Формула для метода Npv</para>
          <para> </para>
          <para> </para>
          <para>
            <b>Npv</b> похож на <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> функцию (настоящее значение). Основное различие между PV и <b>Npv</b> состоит в том, что потоки денежных средств начинаются в конце или <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> начале периода. В отличие от <b>переменных значений потока</b> денежных средств Npv, потоки денежных средств должны быть <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> постоянными в рамках инвестиций. Дополнительные сведения об аннуитетах и финансовых функциях см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> . </para>
          <para>
            <b>Npv</b> также связан с <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> функцией (внутренней скоростью возврата). <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> — скорость, для которой <b>Npv</b> равно нулю: NPV(IRR(...), ...) = 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Строка, представляющая номер, который нужно преобразовать.</param>
        <param name="Arg2">Символ, используемый в качестве десятичной точки в строке.</param>
        <param name="Arg3">Символ, используемый в качестве сепаратора группы в строке.</param>
        <summary>Преобразует текст в число независимо от региональных порядок.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — октальный номер, который нужно преобразовать. Число может содержать не более 10 символов. Наиболее значимым битом числа является бит знака. Оставшиеся 29 битов являются битами величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <param name="Arg2">Места — количество символов, которые необходимо использовать. Если число знаков опущено, <b>oct2Bin</b> использует минимальное необходимое количество символов. Места полезны для заполнения возвращаемой величины с нулями в 0.</param>
        <summary>Преобразует октальный номер в двоичное.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число отрицательное, <b>Oct2Bin</b> игнорирует места и возвращает 10-символьное двоичное число. </para>
          <para>Если число отрицательное, оно не может быть меньше 7777777000, а если число положительное, оно не может быть больше 777. </para>
          <para>Если число не является допустимым октальным номером, <b>Oct2Bin</b> возвращает #NUM! значение ошибки. </para>
          <para>Если <b>для oct2Bin</b> требуется больше знаков, чем знаков, возвращается #NUM! значение ошибки. </para>
          <para>Если места не являются integer, оно усечено. </para>
          <para>Если количество мест не является числовым, <b>Oct2Bin</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Oct2Bin</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number — октальный номер, который нужно преобразовать. Число не может содержать более 10 октальных символов (30 битов). Наиболее значимым битом числа является бит знака. Оставшиеся 29 битов являются битами величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <summary>Преобразует октальный номер в десятичной.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число не является допустимым октальным номером, <b>Oct2Dec</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number — октальный номер, который нужно преобразовать. Число не может содержать более 10 октальных символов (30 битов). Наиболее значимым битом числа является бит знака. Оставшиеся 29 битов являются битами величины. Отрицательные числа представлены с помощью двух дополняющих нотации.</param>
        <param name="Arg2">Места — количество символов, которые необходимо использовать. Если места не заданы, <b>oct2Hex</b> использует минимальное необходимое количество символов. Места полезны для заполнения возвращаемой величины с нулями в 0.</param>
        <summary>Преобразует восьмую восьмую.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число отрицательное, <b>Oct2Hex</b> игнорирует места и возвращает 10-символьное число. </para>
          <para>Если число не является допустимым октальным номером, <b>Oct2Hex</b> возвращает #NUM! значение ошибки. </para>
          <para>Если <b>для Oct2Hex</b> требуется больше знаков, чем знаков, возвращается #NUM! значение ошибки. </para>
          <para>Если место не является integer, оно усечено. </para>
          <para>Если число мест не задано, <b>Oct2Hex</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если места отрицательные, <b>Oct2Hex</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — значение для округли.</param>
        <summary>Возвращает число, округлив до ближайшего нечетного числа.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если число не является числом, <b>Odd</b> возвращает #VALUE! значение ошибки. </para>
          <para>Независимо от знака числа значение округляется вверх при откорректированном от нуля. Если число нечетное, округление не происходит.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Проблема — дата проблемы безопасности.</param>
        <param name="Arg4">First_coupon - первая дата купона безопасности.</param>
        <param name="Arg5">Ставка — процентная ставка безопасности.</param>
        <param name="Arg6">Yld — годовая доходность системы безопасности.</param>
        <param name="Arg7">Активация — значение активации системы безопасности на 100 долларов США.</param>
        <param name="Arg8">Частота — количество выплат по купонам в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg9">Basis - the type of day count basis to use.</param>
        <summary>Возвращает цену за 100 долларов США за первое значение безопасности с нечетным (коротким или длинным) первым периодом.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст, проблема, first_coupon и основа усечены до integers. </para>
          <para>Если сроки расчета, возраста, first_coupon не являются допустимой датой, <b>OddFPrice</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если значение &lt; 0 или yld &lt; 0, <b>OddFPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>OddFPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>Должно быть удовлетворены следующие условия даты; в <b>противном случае OddFPrice</b> возвращает #NUM! значение ошибки: </para>
          <para>вопрос first_coupon &gt; &gt; расчета &gt;</para>
          <para> </para>
          <para>
            <b>OddFPrice</b> вычисляется следующим образом: нечетный короткий первый купон:</para>
          <para>Рис. 1. Нечетный короткий первый купон</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>A = количество дней от начала купонного периода до даты расчета (начисляемого дня).</para>
          <para>DSC — количество дней от расчета до следующей даты выплат.</para>
          <para>DFC — количество дней от начала первого нечетного купона до даты первого купона.</para>
          <para>E = количество дней в периоде купона.</para>
          <para>N = количество выплат по купонам между датой расчета и датой активации. (Если это число содержит дробную часть, оно вызывается к следующему целому числу.)</para>
          <para>Нечетный длинный первый купон:</para>
          <para>Рис. 2. Нечетный длинный первый купон</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Ai — количество дней от начала ith или последнего квази-купонного периода в течение нечетного периода.</para>
          <para>DCi = количество дней с даты (или даты выпуска) до первого квази-купона (i = 1) или количество дней в квази-купоне (i = 2,..., i = NC).</para>
          <para>DSC — количество дней от расчета до следующей даты купона.</para>
          <para>E = количество дней в купонный период.</para>
          <para>N = количество выплат по купонам между первой датой реального купона и датой активации. (Если это число содержит дробную часть, оно вызывается к следующему целому числу.)</para>
          <para>NC = количество квази-купонных периодов, которые умещаются в нечетный период. (Если это число содержит дробную часть, оно вызывается к следующему целому числу.)</para>
          <para>NLi = обычная длина в днях полного ith или последнего квази-купонного периода в течение нечетного периода.</para>
          <para>Nq = количество целых квази-купонных периодов между датой расчета и первым купоном.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Проблема — дата проблемы безопасности.</param>
        <param name="Arg4">First_coupon - первая дата купона для системы безопасности.</param>
        <param name="Arg5">Ставка — процентная ставка безопасности.</param>
        <param name="Arg6">Pr — цена безопасности.</param>
        <param name="Arg7">Активация — значение активации безопасности для каждого значения лица $100.</param>
        <param name="Arg8">Частота — количество выплат по купонам в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg9">Basis - the type of day count basis to use.</param>
        <summary>Возвращает доходность системы безопасности с нечетным (коротким или длинным) первым периодом.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст, проблема, first_coupon и основа усечены до integers. </para>
          <para>Если расчет, возраст, проблема или first_coupon не являются допустимой датой, <b>OddFYield</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если &lt; 0 или pr ≤ 0, <b>OddFYield</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>OddFYield</b> возвращает #NUM! значение ошибки. </para>
          <para>Должно быть удовлетворены следующие условия даты; в противном <b>случае OddFYield</b> возвращает #NUM! значение ошибки: </para>
          <para>вопрос first_coupon &gt; &gt; расчета &gt;</para>
          <para>Excel использует итеративный метод для вычисления <b>OddFYield.</b> Эта функция использует метод Newton на основе формулы, используемой для <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> функции. Доходность меняется до 100 итераций, пока приблизительная цена с заданной доходностью не будет близко к цене. См. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> формулу, которую <b>использует OddFYield.</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Last_interest - дата последнего купона безопасности.</param>
        <param name="Arg4">Ставка — процентная ставка безопасности.</param>
        <param name="Arg5">Yld — годовая доходность системы безопасности.</param>
        <param name="Arg6">Активация — значение активации системы безопасности на 100 долларов США.</param>
        <param name="Arg7">Частота — количество выплат по купонам в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg8">Basis - the type of day count basis to use.</param>
        <summary>Возвращает цену за 100 долларов США для системы безопасности с нечетным (коротким или длинным) последним периодом купона.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст, last_interest и основа усечены до integers. </para>
          <para>Если расчет, расчет или last_interest не являются допустимой датой, <b>OddLPrice</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если значение &lt; 0 или yld &lt; 0, <b>OddLPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>OddLPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>Должно быть удовлетворены следующие условия даты; в <b>противном случае OddLPrice</b> возвращает #NUM! значение ошибки: </para>
          <para>расчеты &gt; &gt; по last_interest</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Last_interest - дата последнего купона безопасности.</param>
        <param name="Arg4">Ставка — процентная ставка безопасности.</param>
        <param name="Arg5">Pr — цена безопасности.</param>
        <param name="Arg6">Активация — значение активации системы безопасности на 100 долларов США.</param>
        <param name="Arg7">Частота — количество выплат по купонам в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg8">Basis - the type of day count basis to use.</param>
        <summary>Возвращает доходность системы безопасности с нечетным (коротким или длинным) последним периодом.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст, last_interest и основа усечены до integers. </para>
          <para>Если расчет, возраст или last_interest не являются допустимой датой, <b>OddLYield</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если &lt; 0 или pr ≤ 0, <b>OddLYield</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>OddLYield</b> возвращает #NUM! значение ошибки. </para>
          <para>Должно быть удовлетворены следующие условия даты; в <b>противном случае OddLYield</b> возвращает #NUM! значение ошибки: </para>
          <para>расчеты &gt; по &gt; last_interest </para>
          <para>
            <b>OddLYield</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для метода OddLYield</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>Ai — количество начисляемого дня для i-или последнего квази-купонного периода в течение нечетного периода, отсчитывающегося от последней даты процентов до активации.</para>
          <para>DCi = количество дней, подсчитывалось в i- или последнем, квази-купонный период, относимый к длине фактического периода купона.</para>
          <para>NC = количество квази-купонных периодов, которые умещаются в нечетный период; если это число содержит дробную часть, оно будет повышаться до следующего целого числа.</para>
          <para>NLi = обычная длина в днях i-го или последнего квази-купонного периода в нечетном периоде купона.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logical1,logical2,... - от 1 до 30 условий, которые вы хотите проверить, что может быть <b>true</b> или <b>false</b>.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает <b>true,</b> если какой-либо аргумент <b>имеет true;</b> возвращает <b>false,</b> если все аргументы <b>являются</b>false .</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы должны оцениваться до логических значений, таких как <b>true</b> или <b>false,</b>или в массивах или ссылках, содержащих логические значения. </para>
          <para>Если массив или опорный аргумент содержит текст или пустые ячейки, эти значения игнорируются. </para>
          <para>Если указанный диапазон не содержит логических значений, <b>или</b> возвращает #VALUE! значение ошибки. </para>
          <para>Вы можете использовать <b>формулу массива Or,</b> чтобы узнать, имеется ли значение в массиве. Чтобы ввести формулу массива, нажмите CTRL+SHIFT+ВВОД.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает родительский объект для указанного объекта. Только для чтения.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Процентная ставка за период.</param>
        <param name="Arg2">Настоящее значение инвестиций.</param>
        <param name="Arg3">Желаемая будущая стоимость инвестиций.</param>
        <summary>Возвращает количество периодов, необходимых для инвестиций для достижения указанного значения.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — набор независимых значений.</param>
        <param name="Arg2">Array2 — набор зависимых значений.</param>
        <summary>Возвращает коэффициент корреляции моментов продукта Вайсон, r, индекс без измерения, который в диапазоне от -1,0 до 1,0 включительно и отражает степень линейной связи между двумя наборами данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть числа или имена, константы массива или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если массивы array1 и array2 пустые или имеют другое количество точек <b>данных,</b> Вайсон возвращает значение ошибки #N/A. </para>
          <para>Формула для коэффициента корреляции моментов продукта Вайсон, r, является: </para>
          <para>Рис. 1. Коэффициент корреляции моментов продукта Вайсон</para>
          <para> </para>
          <para> </para>
          <para>где x и y — пример означает AVERAGE(array1) и AVERAGE(array2).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон данных, определяя относительное положение.</param>
        <param name="Arg2">K — значение процентили в диапазоне 0,1 включительно.</param>
        <summary>Возвращает k-й процентиль значений в диапазоне. Эту функцию можно использовать для установления порогового значения принятия. Например, можно рассмотреть кандидатов, которые оценят результат выше 90-го процентила.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" /> этом и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" /> методе. </para>
          <para>Если массив пустой, <b>Percentile</b> возвращает #NUM! значение ошибки. </para>
          <para>Если k не является числом, <b>Percentile</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если k — 0 или &lt; k &gt; 1, <b>percentile</b> возвращает #NUM! значение ошибки. </para>
          <para>Если k не является кратным 1/(n - 1), <b>процентиль</b> интерполирует, чтобы определить значение в k-th percentile.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array — массив или диапазон данных, определяя относительное положение.</param>
        <param name="Arg2">K — значение процентили в диапазоне 0,1, монопольное.</param>
        <summary>Возвращает k-й процентиль значений в диапазоне, где k находится в диапазоне 0..1, монопольный.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пустой, <b>Percentile_Exc</b> возвращает #NUM! значение ошибки </para>
          <para>Если k не является <b>числом,</b> Percentile_Exc возвращает #VALUE! значение ошибки. </para>
          <para>Если k ≤ 0 или k ≥ 1, <b></b> Percentile_Exc возвращает #NUM! значение ошибки. </para>
          <para>Если k не является кратным 1/(n - <b>1),</b> Percentile_Exc интерполирует, чтобы определить значение в k-th percentile. </para>
          <para>
            <b>Percentile_Exc</b> интерполирует, когда значение указанного процентила находится между двумя значениями в массиве. Если не удается интерполировать для указанного процентила (k), Excel возвращает #NUM! error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array — массив или диапазон данных, определяя относительное положение.</param>
        <param name="Arg2">K — значение процентили в диапазоне 0,1 включительно.</param>
        <summary>Возвращает k-й процентиль значений в диапазоне. Эту функцию можно использовать для установления порогового значения принятия. Например, можно изучить кандидатов, которые оценят результат выше 90-го процентила.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пустой, <b>Percentile_Inc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если k не является <b>числом,</b> Percentile_Inc возвращает #VALUE! значение ошибки. </para>
          <para>Если k — 0 или &lt; k &gt; 1, Percentile_Inc возвращает #NUM! <b></b> значение ошибки. </para>
          <para>Если k не является кратным 1/(n - <b>1),</b> Percentile_Inc интерполирует, чтобы определить значение в k-th percentile.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон данных с числовых значений, которые определяют относительное положение.</param>
        <param name="Arg2">X — значение, по которому вы хотите узнать ранг.</param>
        <param name="Arg3">Важность — необязательное значение, определяя количество важных цифр для возвращаемого процентного значения. Если опущен, <b>PercentRank</b> использует три цифры (0.xxx).</param>
        <summary>Возвращает ранг значения в наборе данных в процентах от набора данных. Эту функцию можно использовать для оценки относительного положения значения в наборе данных. Например, можно использовать <b>PercentRank</b> для оценки положения теста aptitude среди всех показателей для теста.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в этих <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" /> и других <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" /> методах.</para>
          <para>Если массив пустой, <b>PercentRank</b> возвращает #NUM! значение ошибки. </para>
          <para>Если значение &lt; имеет значение 1, <b>PercentRank</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x не соответствует одному из значений в массиве, <b>PercentRank</b> интерполирует для возврата правильного процентного ранга.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон данных с числовых значений, которые определяют относительное положение.</param>
        <param name="Arg2">X — значение, по которому вы хотите узнать ранг.</param>
        <param name="Arg3">Значительность — значение, которое определяет количество важных цифр для возвращаемого процентного значения. Если опущен, <b>PercentRank_Exc</b> использовать три цифры (0.xxx).</param>
        <summary>Возвращает ранг значения в наборе данных в виде процента (0,1, монопольный) набора данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пустой, <b>PercentRank_Exc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если значение &lt; 1, <b>PercentRank_Exc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x не соответствует одному из <b></b> значений массива, PercentRank_Exc интерполирует для возврата правильного процентного ранга.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон данных с числовых значений, которые определяют относительное положение.</param>
        <param name="Arg2">X — значение, по которому вы хотите узнать ранг.</param>
        <param name="Arg3">Важность — необязательное значение, определяя количество важных цифр для возвращаемого процентного значения. Если опущен, <b>PercentRank_Inc</b> использовать три цифры (0.xxx).</param>
        <summary>Возвращает ранг значения в наборе данных в виде процента (0,1 включительно) набора данных. Эту функцию можно использовать для оценки относительного положения значения в наборе данных. Например, вы можете <b>использовать</b> PercentRank_Inc для оценки положения теста aptitude среди всех показателей для теста.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пустой, <b>PercentRank_Inc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если значение &lt; 1, <b>PercentRank_Inc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x не соответствует одному из <b></b> значений массива, PercentRank_Inc интерполирует для возврата правильного процентного ранга.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — это целый ряд, который описывает количество объектов.</param>
        <param name="Arg2">Number_chosen — это целый ряд, который описывает количество объектов в каждой перемежацией.</param>
        <summary>Возвращает количество перемытов для заданного количества объектов, которые можно выбрать из числа объектов. Перестановка — это любой набор или подмножество объектов или событий, где внутренний порядок имеет значение. Перезапуски отличаются от комбинаций, для которых внутренний порядок не является значимым. Используйте эту функцию для вычислений вероятности в стиле юного стиля.</summary>
        <returns>To be added.</returns>
        <remarks><para>Оба аргумента усечены до integers. </para>
          <para>Если число или number_chosen ненумерные, <b>Permut</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если число ≤ 0 или number_chosen &lt; 0, <b>permut</b> возвращает #NUM! значение ошибки. </para>
          <para>Если число &lt; number_chosen, <b>Permut</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для количества перемытов: </para>
          <para>Рис. 1. Уравнение для количества перемытовок</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Общее количество объектов.</param>
        <param name="Arg2">Количество объектов в каждой перемектации.</param>
        <summary>Возвращает количество перемытов для заданного количества объектов (с повторениями), которые можно выбрать из общего числа объектов.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число, для которого нужна плотность стандартного нормального распределения.</param>
        <summary>Возвращает значение функции плотности для стандартного нормального распределения.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ссылка — текстовая строка или ссылка на одну ячейку или диапазон ячеек, содержащих текстовую строку фуриганы.</param>
        <summary>Извлекает фонетические символы (фуригану) из текстовой строки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если ссылка — это диапазон ячеек, возвращается текстовая строка фуриганы в левом верхнем углу диапазона. </para>
          <para>Если ссылка является диапазоном неадмикционных ячеек, #N/A возвращается значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает число 3,14159265358979, математическая константа pi, точная до 15 цифр.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ставка — процентная ставка по кредиту.</param>
        <param name="Arg2">Nper — общее количество платежей по кредиту.</param>
        <param name="Arg3">Pv — настоящее значение или общая сумма, которую сейчас стоит ряд будущих платежей; также известен как основной.</param>
        <param name="Arg4">Fv — будущее значение или денежный баланс, который вы хотите получить после последнего платежа. Если значение fv опущено, предполагается, что оно будет иметь значение 0 (ноль), то есть будущий размер займа будет 0.</param>
        <param name="Arg5">Тип — число 0 (ноль) или 1 и указывает, когда должны быть платежи.</param>
        <summary>Вычисляет платеж по кредиту на основе постоянных платежей и постоянной процентной ставки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Более полное описание аргументов в <b>Pmt</b>см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> описании функции.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1 </term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Платеж, возвращенный <b>Pmt,</b> включает в себя основной и процентные ставки, но не налоги, резервировать платежи или сборы, иногда связанные с выплатами. </para>
          <para>Убедитесь, что вы согласованы с единицами, которые вы используете для указания скорости и nper. Если вы делаете ежемесячные платежи по кредиту на 4 года с годовым процентом 12 процентов, используйте 12 %/12 для ставки и 4*12 для nper. Если вы делаете годовые платежи по одному кредиту, используйте 12 процентов для ставки и 4 для nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — количество событий.</param>
        <param name="Arg2">Mean — ожидаемое числовом значении.</param>
        <param name="Arg3">Накопительный — логическое значение, которое определяет форму возвращаемого распределения вероятности. Если совокупное значение true, POISSON возвращает накопительную вероятность Poisson, что число случайных событий будет от нуля до x включительно; Если false, возвращает функцию массовой функции вероятности Poisson, что число происходящих событий будет точно x.</param>
        <summary>Возвращает распределение Poisson. Распространенным приложением распространения Poisson является прогнозирование количества событий за определенное время, например количество автомобилей, поступающих на платный номер в течение 1 минуты.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если x не является integer, оно усечено. </para>
          <para>Если x или mean не является числом, <b>Poisson</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>Poisson</b> возвращает #NUM! значение ошибки. </para>
          <para>Если имеет ≤ 0, <b>Poisson</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>Poisson</b> вычисляется следующим образом. </para>
          <para>Для накопительного = <b>false</b>:</para>
          <para>Рис. 1. Calcuation when cumulative is false</para>
          <para> </para>
          <para> </para>
          <para>Для накопительного = <b>true</b>:</para>
          <para>Рис. 2. Calcuation when cumulative is true</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — количество событий.</param>
        <param name="Arg2">Mean — ожидаемое числовое значение.</param>
        <param name="Arg3">Накопительный — логическое значение, которое определяет форму возвращаемого распределения вероятности. Если совокупное значение <b>true,</b> <b>Poisson_Dist</b> возвращает совокупную вероятность того, что число случайных событий будет от 0 (ноль) до x включительно; если <b>false,</b>возвращает функцию массовой функции вероятности Poisson, что число происходящих событий будет точно x.</param>
        <summary>Возвращает распределение Poisson. Распространенным приложением распространения Poisson является прогнозирование количества событий за определенное время, например количество автомобилей, поступающих на платный номер за одну минуту.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x не является integer, оно усечено. </para>
          <para>Если x или mean не <b></b> является числом, Poisson_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>Poisson_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если имеет ≤ 0, <b>Poisson_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>Poisson_Dist</b> вычисляется следующим образом. </para>
          <para>Для накопительного = <b>false</b>:</para>
          <para>Рис. 1. Calcuation when cumulative is false</para>
          <para> </para>
          <para> </para>
          <para>Для накопительного = <b>true</b>:</para>
          <para>Рис. 2. Calcuation when cumulative is true</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — базовый номер. Это может быть любое реальное число.</param>
        <param name="Arg2">Power — показатель, до которого вызывается базовое число.</param>
        <summary>Возвращает результат числа, поднимаемого до питания.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ставка — процентная ставка за период.</param>
        <param name="Arg2">Per — период и должен быть в диапазоне от 1 до nper.</param>
        <param name="Arg3">Nper — общее количество периодов оплаты в аннуитетах.</param>
        <param name="Arg4">Pv — настоящее значение — общая сумма, которую сейчас стоит ряд будущих платежей.</param>
        <param name="Arg5">Fv — будущее значение или денежный баланс, который вы хотите получить после последнего платежа. Если значение fv опущено, предполагается, что оно будет иметь значение 0 (ноль), то есть будущий размер займа будет 0.</param>
        <param name="Arg6">Тип — номер 0 или 1 и указывает время оплаты.</param>
        <summary>Возвращает платеж по основному платежу за заданный период для инвестиций на основе периодических постоянных платежей и постоянной процентной ставки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Более полное описание аргументов в <b>Ppmt</b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> см. в .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1 </term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы согласованы с единицами, которые вы используете для указания скорости и nper. Если вы делаете ежемесячные платежи по кредиту на четыре года под 12 процентов годовых, используйте 12 %/12 для ставки и 4*12 для nper. Если вы делаете годовые платежи по одному кредиту, используйте 12 % для ставки и 4 для nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Ставка — годовая ставка купона для системы безопасности.</param>
        <param name="Arg4">Yld — годовая доходность системы безопасности.</param>
        <param name="Arg5">Активация — значение активации безопасности для каждого значения лица $100.</param>
        <param name="Arg6">Частота — количество выплат по купонам в год. Для годовых платежей частота = 1; для полугодовой частоты = 2; для ежеквартов, частота = 4.</param>
        <param name="Arg7">Basis - the type of day count basis to use.</param>
        <summary>Возвращает цену за 100 долларов США за единицу безопасности, которая периодически платит проценты.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст, частота и основа усечены до integers. </para>
          <para>Если расчет или срок действия не являются допустимой датой, <b>Цена</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если yld &lt; 0 или если ставка &lt; 0, <b>Цена</b> возвращает #NUM! значение ошибки. </para>
          <para>Если активация ≤ 0, <b>Цена</b> возвращает #NUM! значение ошибки. </para>
          <para>Если частота не превышает 1, 2 или <b></b> 4, Цена возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>Цена</b> возвращает #NUM! значение ошибки. </para>
          <para>Если срок ≥ расчетов, <b>Цена</b> возвращает #NUM! значение ошибки. <b>Цена</b> рассчитывается следующим образом: </para>
          <para>Рис. 1. Метод Equation for Price</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>DSC — количество дней от расчета до следующей даты купона.</para>
          <para>E = количество дней в купонный период, в течение которого приходится дата расчета.</para>
          <para>N = количество выплат по купонам между датой расчета и датой активации.</para>
          <para>A = количество дней от начала периода выплат до даты расчета.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Скидка — скидка для системы безопасности.</param>
        <param name="Arg4">Активация — значение активации безопасности для каждого значения лица $100.</param>
        <param name="Arg5">Basis - the type of day count basis to use.</param>
        <summary>Возвращает цену за 100 долларов США со скидкой.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст и основа усечены до integers. </para>
          <para>Если расчет или срок действия не являются допустимой датой, <b>PriceDisc</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если скидка ≤ 0 или активация ≤ 0, <b>PriceDisc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>PriceDisc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если срок ≥, <b>PriceDisc</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>PriceDisc</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для метода PriceDisc</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>B = количество дней в году в зависимости от года.</para>
          <para>DSM — количество дней от расчета до возраста.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Проблема — дата проблемы безопасности, выраженная серийным номером даты.</param>
        <param name="Arg4">Ставка — процентная ставка безопасности на дату проблемы.</param>
        <param name="Arg5">Yld — годовая доходность системы безопасности.</param>
        <param name="Arg6">Basis - the type of day count basis to use.</param>
        <summary>Возвращает цену за 100 долларов США за единицу безопасности, которая платит проценты по сроку жизни.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст, проблема и основа усечены до integers. </para>
          <para>Если расчет, возраст или проблема не являются допустимой датой, <b>PriceMat</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если &lt; 0 или yld &lt; 0, <b>PriceMat</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>PriceMat</b> возвращает #NUM! значение ошибки. </para>
          <para>Если срок ≥, <b>PriceMat</b> возвращает #NUM! значение ошибки. <b>PriceMat</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для метода PriceMat</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>B = количество дней в году в зависимости от года.</para>
          <para>DSM — количество дней от расчета до возраста.</para>
          <para>DIM = количество дней от выпуска до возраста.</para>
          <para>A = количество дней от вопроса до расчета.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X_range — диапазон числных значений x, с которыми связаны вероятности.</param>
        <param name="Arg2">Prob_range — набор вероятностей, связанных со значениями в x_range.</param>
        <param name="Arg3">Lower_limit — нижняя граница значения, для которого вы хотите получить вероятность.</param>
        <param name="Arg4">Upper_limit — необязательная верхняя граница значения, для которого вы хотите получить вероятность.</param>
        <summary>Возвращает вероятность того, что значения в диапазоне находятся между двумя ограничениями. Если upper_limit не предоставлен, возвращается вероятность того, что значения в x_range равны lower_limit.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если любое значение в prob_range ≤ 0 или любое значение в prob_range &gt; 1, <b>prob</b> возвращает #NUM! значение ошибки. </para>
          <para>Если сумма значений в prob_range ¹ 1, <b>prob</b> возвращает #NUM! значение ошибки. </para>
          <para>Если upper_limit опущен, <b>prob</b> возвращает вероятность того, что она равна lower_limit. </para>
          <para>Если x_range и prob_range содержат другое количество точек данных, <b>prob</b> возвращает значение #N/A ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число1, число 2, ... — от 1 до 30 чисел, которые нужно умножить.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Умножает все числа, заданные в качестве аргументов, и возвращает продукт.</summary>
        <returns>To be added.</returns>
        <remarks><para>Учитываются аргументы, которые являются числами, логическими значениями или текстовыми представлениями чисел; аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст — текст, заключенный в кавычках, формулу, возвращаемую текстом, или ссылку на ячейку, содержащую текст, который необходимо частично закамеровать.</param>
        <summary>Закамуляризирует первую букву в текстовой строке и любые другие буквы в тексте, которые следуют за любыми символами, кроме буквы. Преобразует все остальные буквы в строчная буква.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ставка — процентная ставка за период. Например, если вы получите кредит на автомобиль под 10% годовых процентов и будете ежемесячно получать платежи, ваша процентная ставка в месяц составляет 10%/12 или 0,83%. В качестве скорости введите в формулу 10%/12 или 0,83 %, или 0,0083.</param>
        <param name="Arg2">Nper — общее количество периодов оплаты в аннуитетах. Например, если вы получаете четырехлетний кредит на автомобиль и делаете ежемесячные платежи, ваш кредит имеет 4*12 (или 48) периодов. В формулу для nper введите 48.</param>
        <param name="Arg3">Pmt — платеж, сделанный каждый период, и не может измениться в течение срока действия аннуитета. Как правило, pmt включает в себя основной и процентный ставки, но не другие сборы и налоги. Например, ежемесячные платежи в размере 10 000 долларов США, четырехлетний кредит на 12 процентов, составляет 263,33 долларов США. В качестве pmt в формулу введите -263,33. Если pmt опущен, необходимо включить аргумент fv.</param>
        <param name="Arg4">Fv — будущее значение или денежный баланс, который вы хотите получить после последнего платежа. Если значение fv опущено, предполагается, что оно будет иметь значение 0 (будущий размер займа, например, 0). Например, если вы хотите сохранить 50 000 долларов США для оплаты специального проекта через 18 лет, то в будущем будет 50 000 долларов США. Затем вы можете сделать прогноз по процентной ставки и определить, сколько нужно сохранять каждый месяц. Если fv опущен, необходимо включить аргумент pmt.</param>
        <param name="Arg5">Тип — число 0 или 1 и указывает время оплаты.</param>
        <summary>Возвращает настоящее значение инвестиций. Настоящее значение — это общая сумма, которую сейчас стоит ряд будущих платежей. Например, когда вы берете деньги взаймы, сумма займа является настоящей стоимостью для выдавлителя.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1 </term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Убедитесь, что вы согласованы с единицами, которые вы используете для указания скорости и nper. Если вы делаете ежемесячные платежи по кредиту на четыре года под 12 процентов годовых, используйте 12 %/12 для ставки и 4*12 для nper. Если вы делаете годовые платежи по одному кредиту, используйте 12 % для ставки и 4 для nper. </para>
          <para>К аннуитетам применяются следующие функции: </para>
          <list type="table">
            <item>
              <term>CUMIPMT</term>
              <description>PPMT</description>
            </item>
            <item>
              <term>CUMPRINC</term>
              <description>PV</description>
            </item>
            <item>
              <term>FV</term>
              <description>RATE</description>
            </item>
            <item>
              <term>FVSCHEDULE</term>
              <description>XIRR</description>
            </item>
            <item>
              <term>IPMT</term>
              <description>XNPV</description>
            </item>
            <item>
              <term>PMT</term>
              <description />
            </item>
          </list>
          <para>Аннуитет — это ряд постоянных денежных платежей, внося в течение непрерывного периода. Например, кредит на автомобиль или кредит — это аннуитет. Дополнительные сведения см. в описании каждой функции аннуитета. </para>
          <para>В функциях аннуитета денежные средства, которые вы платите( например, вклад на сохранение, представлены отрицательным числом; Получаемые вами денежные средства, например проверка на вымечность, представлены положительным числом. Например, вклад в размере 1000 долларов США в банк будет представлен аргументом -1000, если вы являетсяе вкладчиком, и аргументом 1000, если вы банк. </para>
          <para>Microsoft Excel решает один финансовый аргумент с точки зрения других. Если скорость не 0, то: </para>
          <para>Рис. 1. Уравнение, когда скорость не равна 0</para>
          <para> </para>
          <para> </para>
          <para>Если скорость составляет 0, то:</para>
          <para>(pmt * nper) + pv + fv = 0</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон ячеей числовых значений, для которых необходимо значение квартиль.</param>
        <param name="Arg2">Quart — указывает возвращаемого значения.</param>
        <summary>Возвращает квартиль набора данных. Квартильы часто используются в данных о продажах и опросах, чтобы разделить группы на группы. Например, вы можете использовать <b>квартиль</b> для поиска 25 процентов дохода среди людей с наиболее высоким уровнем дохода.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в этих <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" /> и других <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" /> методах.</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Минимальное значение</description>
            </item>
            <item>
              <term>1 </term>
              <description>Первый квартиль (25-й процентиль)</description>
            </item>
            <item>
              <term>2 </term>
              <description>Медиано-значение (50-й процентиль)</description>
            </item>
            <item>
              <term>3</term>
              <description>Третий квартиль (75-й процентиль)</description>
            </item>
            <item>
              <term>4 </term>
              <description>Максимальное значение</description>
            </item>
          </list>
          <para>Если массив пустой, <b>quartile</b> возвращает #NUM! значение ошибки. </para>
          <para>Если кварта не является integer, она усечена. </para>
          <para>Если &lt; кварт 0 или кварт &gt; 4, <b>квартиль</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, и возвращаем то же значение, что и квартиль, если кварта равна <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (ноль), 2 и 4 соответственно. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array — массив или диапазон ячеей числовых значений, для которых необходимо значение квартиль.</param>
        <param name="Arg2">Quart — возвращаемого значения.</param>
        <summary>Возвращает квартиль набора данных, основанную на значениях процентиля от 0,1, монопольно.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пустой, <b>Quartile_Exc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если кварта не является integer, он усечен. </para>
          <para>Если кварт ≤ 0 или ≥ 4, Quartile_Exc <b></b> возвращает #NUM! значение ошибки. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, и возвращаем то же значение, что и Quartile_Exc, если кварта равна <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (ноль), 2 и 4 соответственно. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон ячеей числовых значений, для которых необходимо значение квартиль.</param>
        <param name="Arg2">Quart — возвращаемого значения.</param>
        <summary>Возвращает квартиль набора данных на основе значений процентиля от 0,1 включительно. Квартильы часто используются в данных о продажах и опросах, чтобы разделить группы на группы. Например, вы можете использовать QUARTILE_INC, чтобы найти 25 процентов наиболее 25 процентов дохода в человеке.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пустой, <b>Quartile_Inc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если кварта не является integer, она усечена. </para>
          <para>Если &lt; кварта 0 или кваrt 4, Quartile_Inc &gt; возвращает <b></b> #NUM! значение ошибки. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, и возвращаем то же значение, что и Quartile_Inc, если кварта равна <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (ноль), 2 и 4 соответственно. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Numerator — заместь.</param>
        <param name="Arg2">Denominator — дивизор.</param>
        <summary>Возвращает многая часть деления. Используйте эту функцию, чтобы отменить оставшуюся часть деления.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если один из аргументов не является числовым, <b>Quotient</b> возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle — угол в градусах, который нужно преобразовать.</param>
        <summary>Преобразует градусы в радианы.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Снизу возвращается наименьшее число RANDBETWEEN.</param>
        <param name="Arg2">Вверху — возвращается наибольшее число RANDBETWEEN.</param>
        <summary>Возвращает случайное integer число между числами, которые вы указываете. При каждом расчете таблицы возвращается новое случайное число.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — номер, рейтинг которого вы хотите найти.</param>
        <param name="Arg2">Ref — массив или ссылка на список чисел. Ненумерные значения в ref игнорируются.</param>
        <param name="Arg3">Порядок — число, определяющие порядок ранжного номера.</param>
        <summary>Возвращает ранг числа в списке чисел. Ранг числа — это его размер относительно других значений в списке. (Если отсортировать список, ранжировать номер будет на его позиции.)</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в этих <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> и других <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> методах.</para>
          <para>Если порядок составляет 0 (ноль) или опущен, Microsoft Excel ранжировать число, как если бы ref был список отсортировали в порядке убываний. </para>
          <para>Если порядок имеет любое значение, отличное от 0, Microsoft Excel оценивает число, как если бы ref был список отсортировали в порядке возрастания.</para>
          <para>
            <b>При</b> ранжировании повторяются номера одного и того же ранга. Однако наличие дублирующихся номеров влияет на ранг последующих чисел. Например, в списке integers sorted in ascending order, if the number 10 appears twice and has a rank of 5, then 11 would have a rank of 7 (no number would have a rank of 6).</para>
          <para>Для некоторых целей может потребоваться использовать определение ранга, учитывая связи. В предыдущем примере для числа 10 может быть изменен рейтинг 5,5. Это можно сделать, добавив следующий коэффициент исправления в <b></b>значение, возвращаемое rank . Этот коэффициент коррекции подходит как для случая, когда ранг вычисляется в порядке убывания (порядок = 0 или пропущен) или в порядке возрастания (порядок = значение без 0).</para>
          <para>Коэффициент исправления для связанных рангов=[COUNT(ref) + 1 – RANK(number, ref, 0) – RANK(number, ref, 1)]/2.</para>
          <para>В следующем примере RANK(A2,A1:A5,1) равно 3. Коэффициент исправления : (5 + 1 – 2 – 3)/2 = 0,5, а пересмотренный ранг, учитывая связи, составляет 3 + 0,5 = 3,5. Если число происходит только один раз в ref, коэффициент <b></b> исправления будет 0, так как рейтинг не нужно будет настраивать для связи.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number — число, рейтинг которого вы хотите найти.</param>
        <param name="Arg2">Ref — массив или ссылка на список чисел. Не числимые значения в ссылке игнорируются.</param>
        <param name="Arg3">Order — число, указыва которое указывает, как ранжирует номер. Если порядок 0 (ноль) или пропущен, Microsoft Excel ранжировать число, как если бы ссылка была список отсортировали в порядке убываний. Если порядок имеет любое значение, отличное от нуля, Microsoft Excel оценивает номер так, как если бы ссылка была списком, отсортным по возрастанию.</param>
        <summary>Возвращает ранг числа в списке чисел; это его размер относительно других значений в списке. Если несколько значений имеет один и тот же ранг, возвращается средний ранг.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number — номер, рейтинг которого вы хотите найти.</param>
        <param name="Arg2">Ref — массив или ссылка на список чисел. Не числимые значения в ссылке игнорируются.</param>
        <param name="Arg3">Order — число, указываваское, как ранжирует номер.</param>
        <summary>Возвращает ранг числа в списке чисел. Ранг числа — это его размер относительно других значений в списке. (Если отсортировать список, ранжировать номер будет на его позиции.)</summary>
        <returns>To be added.</returns>
        <remarks><para>Если порядок 0 (ноль) или пропущен, Microsoft Excel ранжировать число, как если бы ссылка была список отсортировали в порядке убываний. </para>
          <para>Если порядок имеет любое значение, отличное от нуля, Microsoft Excel оценивает число так, как если бы ссылка была списком, отсортным по возрастанию.</para>
          <para>
            <b>Rank_Eq</b> номера повторяют один и тот же ранг. Однако наличие дублирующихся номеров влияет на ранг последующих чисел. Например, в списке integers sorted in ascending order, if the number 10 appears twice and has a rank of 5, then 11 would have a rank of 7 (no number would have a rank of 6).</para>
          <para>Для некоторых целей может потребоваться использовать определение ранга, учитывая связи. В предыдущем примере для числа 10 необходимо иметь пересмотренный ранг 5,5. Для этого добавьте следующий коэффициент исправления к значению, возвращаемом <b>Rank_Eq.</b> Этот коэффициент коррекции подходит как для случая, когда ранг вычисляется в порядке убывания (порядок = 0 или пропущен) или в порядке возрастания (порядок = значение без 0).</para>
          <para>Коэффициент исправления для связанных рангов=[COUNT(ref) + 1 – RANK_EQ(число, ref, 0) – RANK_EQ(число, ref, 1)]/2.В следующем примере RANK_EQ(A2,A1:A5,1) равно 3. Коэффициент исправления : (5 + 1 – 2 – 3)/2 = 0,5, а пересмотренный ранг, учитывая связи, составляет 3 + 0,5 = 3,5. Если число происходит только один <b>раз</b> в ref, коэффициент исправления будет 0, так как Rank_Eq не придется настраивать для связи.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nper — общее количество периодов оплаты в аннуитетах.</param>
        <param name="Arg2">Pmt — платеж, сделанный каждый период, и не может измениться в течение срока действия аннуитета. Как правило, pmt включает в себя основной и процентный ставки, но не другие сборы и налоги. Если pmt опущен, необходимо включить аргумент fv.</param>
        <param name="Arg3">Pv — настоящее значение — общая сумма, которую сейчас стоит ряд будущих платежей.</param>
        <param name="Arg4">Fv — будущее значение или денежный баланс, который вы хотите получить после последнего платежа. Если значение fv опущено, предполагается, что оно будет иметь значение 0 (будущий размер займа, например, 0).</param>
        <param name="Arg5">Тип — номер 0 или 1 и указывает время оплаты.</param>
        <param name="Arg6">Угадать— угадать, какая будет скорость.</param>
        <summary>Возвращает процентную ставку за период аннуитета. СКОРОСТЬ вычисляется по итерации и может иметь ноль или больше решений. Если после 20 итерации успешные результаты rate не будут совметивы в пределах 0,0000001, RATE возвращает #NUM! значение ошибки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Полное описание аргументов nper, pmt, pv, fv и type см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>В конце периода</description>
            </item>
            <item>
              <term>1 </term>
              <description>В начале периода</description>
            </item>
          </list>
          <para>Если не угадать, предполагается, что оно составляет 10 процентов. </para>
          <para>Если <b>значение rate</b> не конвергентно, попробуйте угадать другие значения. <b>Скорость</b> обычно конвергентна, если угадать находится между 0 и 1.</para>
          <para>Убедитесь, что вы согласованы с единицами, которые вы используете для указания guess и nper. Если вы делаете ежемесячные платежи по кредиту на четыре года под 12 процентов годовых, используйте 12 %/12 для угадать и 4*12 для nper. Если вы делаете годовые платежи по одному кредиту, используйте 12 % для угадать и 4 для nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Инвестиции — сумма, вложенная в безопасность.</param>
        <param name="Arg4">Скидка — скидка для системы безопасности.</param>
        <param name="Arg5">Basis - the type of day count basis to use.</param>
        <summary>Возвращает сумму, полученную в срок готовности для полностью вложенной системы безопасности.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст и основа усечены до integers. </para>
          <para>Если расчет или срок действия не являются допустимой датой, <b>received</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если инвестиции ≤ 0 или скидка ≤ 0, <b>received</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>received</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, received возвращает #NUM! значение ошибки. <b>Полученные</b> вычисления рассчитываются следующим образом: </para>
          <para>Рис. 1. Уравнение для метода Received</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>B = количество дней в году в зависимости от года.</para>
          <para>DIM = количество дней от выпуска до возраста.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст, в котором необходимо заменить некоторые символы.</param>
        <param name="Arg2">Положение символа, на <paramref name="Arg1" /> который нужно <paramref name="Arg4" /> заменить.</param>
        <param name="Arg3">Количество символов, в которых необходимо заменить <paramref name="Arg1" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <paramref name="Arg4" /> метод.</param>
        <param name="Arg4">Текст, который будет заменять символы <paramref name="Arg1" /> в .</param>
        <summary>Заменяет часть текстовой строки, основанную на количестве символов, на другую текстовую строку.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Old_text - текст, в котором необходимо заменить некоторые символы.</param>
        <param name="Arg2">Start_num — положение символа в old_text, который необходимо заменить на new_text.</param>
        <param name="Arg3">Num_chars — количество символов в old_text замены на new_text.</param>
        <param name="Arg4">New_text — текст, который будет заменять символы в old_text.</param>
        <summary>REPLACEB заменяет часть текстовой строки в зависимости от количества указавных вами данных на другую текстовую строку.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно:</b>предназначено для использования с языками, которые используют однобайтовые наборы символов (SBCS), тогда как ReplaceB предназначен для использования с языками, которые используют двухбайтовые наборы символов <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> (DBCS). <b></b> Параметр языка по умолчанию на компьютере влияет на возвращаемую величину следующим образом:</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> всегда подсчитываю каждый символ(одно- или двухбайтовую), как 1, независимо от языка по умолчанию. </para>
          <para>
            <b>ReplaceB</b> подсчитывает каждый двухбайтный символ как 2, если вы включили редактирование языка, который поддерживает DBCS, а затем установите его в качестве языка по умолчанию. В противном <b>случае ReplaceB</b> учитывает каждый символ как 1. </para>
          <para>К языкам, поддерживаюным DBCS, относятся японский, китайский (упрощенное), китайский (традиционное) и корейский. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст — текст, который нужно повторить.</param>
        <param name="Arg2">Number_times — положительное число, определяющие количество повторов текста.</param>
        <summary>Повторяет текст заданное количество раз. Используйте REPT для заполнения ячейки числом экземпляров текстовой строки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если number_times 0 (ноль), <b>rept</b> возвращает "" (пустой текст). </para>
          <para>Если number_times не является integer, оно усечено. </para>
          <para>Результат функции <b>Rept</b> не может быть длиннее 32 767 символов, или <b>Rept</b> возвращает #VALUE!. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — арабское число, которые вы хотите преобразовать.</param>
        <param name="Arg2">Form — число, указывающие тип нужного числовых номеров. The roman numeral style ranges from Classic to Simplified, becoming more concise as the value of form increases.</param>
        <summary>Преобразует арабское число в "roman", как текст.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>Классическая.</description>
            </item>
            <item>
              <term>1 </term>
              <description>Более краткий.</description>
            </item>
            <item>
              <term>2 </term>
              <description>Более краткий.</description>
            </item>
            <item>
              <term>3</term>
              <description>Более краткий.</description>
            </item>
            <item>
              <term>4 </term>
              <description>Упрощенное.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Классическая.</description>
            </item>
            <item>
              <term>
                <b>false</b>
              </term>
              <description>Упрощенное.</description>
            </item>
          </list>
          <para>Если число отрицательное, #VALUE! возвращается значение ошибки. </para>
          <para>Если число больше 3999, #VALUE! возвращается значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — номер, который нужно округить.</param>
        <param name="Arg2">Num_digits — указывает число цифр, к которым нужно округить число.</param>
        <summary>Округит число до указанного числа цифр.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если num_digits больше 0 (ноль), то число округляется до указанного количества десятичных точечных знаков. </para>
          <para>Если num_digits 0, число округлится до ближайшего числа. </para>
          <para>Если num_digits меньше 0, число округляется слева от десятичной точки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — любое реальное число, которое необходимо округить вниз.</param>
        <param name="Arg2">Num_digits — количество цифр, к которым нужно округить число.</param>
        <summary>Округляет число вниз, к нулю.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundDown</b> ведет себя как <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> , за исключением того, что он всегда округления числа вниз. </para>
          <para>Если num_digits больше 0 (ноль), то число округляется до указанного количества десятичных точечных знаков. </para>
          <para>Если num_digits 0, число округлится вниз до ближайшего числа. </para>
          <para>Если num_digits меньше 0, число округляется вниз слева от десятичной точки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — любое реальное число, которое необходимо округить.</param>
        <param name="Arg2">Num_digits — количество цифр, к которым нужно округить число.</param>
        <summary>Округляет число вверх, от 0 (ноль).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundUp</b> ведет себя, как <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> , за исключением того, что он всегда округит число вверх. </para>
          <para>Если num_digits больше 0 (ноль), то число округляется до указанного количества десятичных мест. </para>
          <para>Если num_digits 0, число округлится до ближайшего числа. </para>
          <para>Если num_digits меньше 0, число округляется слева от десятичной точки. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Количество периодов для инвестиций.</param>
        <param name="Arg2">Настоящее значение инвестиций.</param>
        <param name="Arg3">Будущее значение инвестиций.</param>
        <summary>Возвращает эквивалентную процентную ставку для роста инвестиций.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y массива или диапазона точек данных.</param>
        <param name="Arg2">Known_x массива или диапазона точек данных.</param>
        <summary>Возвращает квадрат коэффициента корреляции моментов продукта в Known_y в known_x продукта. Дополнительные сведения см. в статье <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />. Значение r-squared можно интерпретировать как пропорцию дисперсии в y, которая связана с дисперсией в x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если known_y и known_x пустые или имеют другое количество точек данных, <b>RSq</b> возвращает значение #N/A ошибки. </para>
          <para>Если known_y и known_x содержат только 1 точку данных, <b>RSq</b> возвращает #DIV/0! значение ошибки. </para>
          <para>Уравнение для коэффициента корреляции моментов продукта Вайсон, r, является: </para>
          <para>Рис. 1. Коэффициент корреляции моментов продукта Вайсон</para>
          <para> </para>
          <para> </para>
          <para>где x и y — пример означает AVERAGE(known_x) и AVERAGE(known_y s).</para>
          <para>
            <b>RSq</b> возвращает r2, который является квадратом этого коэффициента корреляции.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">Строка, представляющая программный идентификатор сервера в режиме реального времени.</param>
        <param name="server">имя сервера, <b>строка NULL</b> или <b>константа vbNullString.</b></param>
        <param name="topic1"><paramref name="topic1" /> – <paramref name="topic28" /> <b>Строка,</b> представляющая тему.</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>Этот метод подключается к источнику для получения данных в режиме реального времени.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text - текст, который вы хотите найти.</param>
        <param name="Arg2">Within_text - текст, в котором вы хотите найти find_text.</param>
        <param name="Arg3">Start_num — номер символа в within_text, по которому вы хотите начать поиск.</param>
        <summary><b>Найдите</b> одну текстовую строку во второй текстовой строке и вернетесь номер начальной позиции первой текстовой строки из первого символа <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> второй текстовой строки.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Поиск предназначен для использования с языками, которые используют однобайтовые наборы символов (SBCS), в то время как предназначен для языков, которые используют двухбайтовые наборы символов <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> (DBCS). Параметр языка по умолчанию на компьютере влияет на возвращаемую величину следующим<b>образом:</b> при поиске всегда учитывается каждый символ( однобайт или двухбайт), как 1, независимо от того, какой язык по умолчанию. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> Учитывает каждый двухбайтный символ как 2, если вы включили редактирование языка, который поддерживает DBCS, а затем установите его в качестве языка по умолчанию. В <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> противном случае каждый символ считается 1.</para>
          <para>К языкам, поддерживаюным DBCS, относятся японский, китайский (упрощенное), китайский (традиционное) и корейский. </para>
          <para>Используйте <b>функцию</b> поиска и определите расположение символа или текстовой строки в другой текстовой строке, чтобы можно было использовать mid и MIDB или функции для изменения <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> текста. </para>
          <para>
            <b>Поиск</b> без <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> чувствительность к делу. Если вы хотите сделать поиск с чувствительным к делу, вы можете <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> использовать и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> . </para>
          <para>В этом find_text. Вопроси метка соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический вопросии или звездочка, введите тильду (~) перед знаком. </para>
          <para>Если find_text не найден, #VALUE! возвращается значение ошибки. </para>
          <para>Если start_num опущен, предполагается, что это 1. </para>
          <para>Если start_num не превышает 0 (ноль) или превышает длину within_text, #VALUE! возвращается значение ошибки. </para>
          <para>Используйте start_num, чтобы пропустить указанное количество символов. <b>Предположим,</b> что вы работаете с текстовой строкой "AYF0093" с помощью поиска в качестве примера. YoungMensApparel". Чтобы найти номер первого "Y" в описательной части текстовой строки, установите start_num равным 8, чтобы не искать часть текста с серийным номером. <b>Поиск</b> начинается с символа 8, find_text на следующем символе и возвращает число 9. <b>При</b> поиске всегда возвращается количество символов из начала within_text с учетом пропуска символов, если start_num больше 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text - текст, который вы хотите найти.</param>
        <param name="Arg2">Within_text - текст, в котором вы хотите найти find_text.</param>
        <param name="Arg3">Start_num — номер символа в within_text, по которому вы хотите начать поиск.</param>
        <summary>SEARCH и SEARCHB найдите одну текстовую строку во второй текстовой строке и вернетесь номер начальной позиции первой текстовой строки из первого символа второй текстовой строки.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Поиск предназначен для использования с языками, которые используют однобайтовые наборы символов (SBCS), в то время как предназначен для языков, которые используют двухбайтовые наборы символов <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> (DBCS). Язык по умолчанию на компьютере влияет на возвращаемую величину следующим<b>образом:</b> при поиске всегда учитывается каждый символ( однобайт или двухбайт), как 1, независимо от того, какой язык по умолчанию. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> Учитывает каждый двухбайтный символ как 2, если вы включили редактирование языка, который поддерживает DBCS, а затем установите его в качестве языка по умолчанию. В <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> противном случае каждый символ считается 1.</para>
          <para>К языкам, поддерживаюным DBCS, относятся японский, китайский (упрощенное), китайский (традиционное) и корейский. </para>
          <para>Используйте <b>функцию</b> поиска и определите расположение символа или текстовой строки в другой текстовой строке, чтобы можно было использовать mid и MIDB или функции для изменения <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> текста. </para>
          <para>
            <b>Поиск</b> без <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> чувствительность к делу. Если вы хотите сделать поиск с конфиденциальным делом, вы можете использовать <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> . </para>
          <para>В этом find_text. Вопроси метка соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти фактический вопросии или звездочка, введите тильду (~) перед знаком. </para>
          <para>Если find_text не найден, #VALUE! возвращается значение ошибки. </para>
          <para>Если start_num опущен, предполагается, что это 1. </para>
          <para>Если start_num не превышает 0 (ноль) или превышает длину within_text, #VALUE! возвращается значение ошибки. </para>
          <para>Используйте start_num, чтобы пропустить указанное количество символов. <b>Предположим,</b> что вы работаете с текстовой строкой "AYF0093" с помощью поиска в качестве примера. YoungMensApparel". Чтобы найти номер первого "Y" в описательной части текстовой строки, установите start_num равным 8, чтобы не искать часть текста с серийным номером. <b>Поиск</b> начинается с символа 8, find_text на следующем символе и возвращает число 9. <b>При</b> поиске всегда возвращается количество символов из начала within_text с учетом пропуска символов, если start_num больше 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которых необходимо секант.</param>
        <summary>Возвращает секант угла.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Угол в радианах, для которых нужен гиперболический секанс.</param>
        <summary>Возвращает гиперболический секант угла.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — входное значение для ряда power.</param>
        <param name="Arg2">N — начальная мощность, до которой вы хотите повысить x.</param>
        <param name="Arg3">M — шаг, с помощью которого можно увеличить n для каждого термина в ряду.</param>
        <param name="Arg4">Коэффициенты — это набор коэффициентов, на которые умножаются все последовательные мощности x. Число значений в коэффициентах определяет количество терминов в ряду power. Например, если существует три значения в коэффициентах, в серии power будут три термина.</param>
        <summary>Возвращает сумму ряда питания на основе формулы: SERIES(x,n,m,a)= a1xn+a2x(n+m)+a3x(n+2m)+...+aix(n+(i-1)m)</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не является числовым, <b>SeriesSum</b> возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — это любое реальное число.</param>
        <summary>Возвращает гиперболический синус числа.</summary>
        <returns>To be added.</returns>
        <remarks><para>Формула гиперболического сина:</para>
          <para>Рис. 1. Формула для гиперболического сина</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2 ... — от 1 до 30 аргументов, для которых нужно вычислить хлев. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает простоту распространения. Откос характеризует степень асимметрии распространения вокруг его многая. Положительное скосочность указывает на распределение с асимметричным задним дистрибутивом, расширяя его до более положительных значений. Отрицательное рывок указывает на распределение с асимметричным задним дистрибутивом, расширяя его до более отрицательных значений.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если имеется менее трех точек данных или стандартное отклонение образца — ноль, <b>Skew</b> возвращает значение #DIV/0! значение ошибки. </para>
          <para>Уравнение для откоса определяется как: </para>
          <para>Рис. 1. Уравнение для откоса</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg2">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg3">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg4">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg5">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg6">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg7">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg8">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg9">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg10">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg11">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg12">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg13">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg14">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg15">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg16">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg17">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg18">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg19">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg20">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg21">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg22">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg23">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg24">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg25">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg26">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg27">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg28">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg29">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <param name="Arg30">От 1 до 254 чисел, имен, массивов или ссылок, содержащих числа, для которых вы хотите, чтобы плотность была нестрога.</param>
        <summary>Возвращает откос распространения на основе осязаемости: характеристика степени асимметрии распределения вокруг его многая.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость — начальная стоимость актива.</param>
        <param name="Arg2">Salvage — значение в конце амортизации (иногда называемое значением salvage для актива).</param>
        <param name="Arg3">Срок жизни — количество периодов, в течение которых актив амортизации (иногда называемый полезным сроком жизни актива).</param>
        <summary>Возвращает прямолинейное амортизация актива в течение одного периода.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y массива или диапазона ячеей числовых зависимых точек данных.</param>
        <param name="Arg2">Known_x — набор независимых точек данных.</param>
        <summary>Возвращает наклон линейной линии регрессии через точки known_y в known_x и known_x. Наклон — это вертикальное расстояние, разделенное на горизонтальное расстояние между любыми двумя точками линии, что является скоростью изменения вдоль линии регрессии.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если known_y и known_x пустые или имеют другое количество точек данных, <b></b> квалифтер возвращает значение #N/A ошибки. </para>
          <para>Уравнение для регрессионной линии: </para>
          <para>Рис. 1. Уравнение для отступа линии регрессии</para>
          <para> </para>
          <para> </para>
          <para>Алгоритм, используемый в <b>Функции и</b> функциях, отличается от алгоритма, используемого <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> функции. Разница между этими алгоритмами может привести к разным результатам, если данные не засвечены и соопределены. Например, если точки данных аргумента known_y 0, а точки данных аргумента known_x 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> Подавить и вернуть #DIV/0! error. Алгоритм <b>и</b> "Отсюзия" предназначены для поиска одного и только одного ответа, и в этом случае может быть несколько <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> ответов. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> возвращает значение 0. Алгоритм разработан для возврата разумных результатов для данных collinear, и в этом случае можно найти хотя бы <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> один ответ.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон числовых данных, для которых необходимо определить наименьшее значение k-th.</param>
        <param name="Arg2">K — положение (от самого маленького) в массиве или диапазоне возвращаемого данных.</param>
        <summary>Возвращает наименьшее значение k-th в наборе данных. Эта функция используется для возврата значений с определенным относительным положением в наборе данных.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пустой, <b>Small</b> возвращает #NUM! значение ошибки. </para>
          <para>Если k ≤ 0 или k превышает количество точек данных, <b>small</b> возвращает #NUM! значение ошибки. </para>
          <para>Если n — число точек данных в массиве, SMALL(array,1) — наименьшее значение, а SMALL(array,n) — наибольшее значение.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — число, на которое умножается pi.</param>
        <summary>Возвращает квадратный корень (число * pi).</summary>
        <returns>To be added.</returns>
        <remarks><para>Если номер &lt; 0, <b>SqrtPi</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, необходимое для нормализации.</param>
        <param name="Arg2">Mean — арифметическое подмывка распространения.</param>
        <param name="Arg3">Standard_dev — стандартное отклонение распространения.</param>
        <summary>Возвращает нормализованные значения из распространения, характеризуемого значением среднего и standard_dev.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если standard_dev ≤ 0, <b>Стандартизация</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для нормализованного значения: </para>
          <para>Рис. 1. Уравнение для нормализованного значения</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 числов аргументов, соответствующих выборке для людей. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Оценивает стандартное отклонение на основе примера. Стандартное отклонение — это показатель того, насколько широко значения распределены по среднему значению (среднее).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новой функцией, которая может обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> методе.</para>
          <para>
            <b>StDev</b> предполагает, что его аргументы являются образцом для людей. Если данные представляют всю группу, вычислите стандартное отклонение с помощью <b>StDev.</b> </para>
          <para>Стандартное отклонение вычисляется с помощью метода "unbiased" или "n-1". </para>
          <para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>
            <b>StDev использует</b> следующую формулу: </para>
          <para>Рис. 1. Уравнение для метода StDev</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего размера (number1,number2,...), а n — размер примера.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 числов аргументов, соответствующих числу пользователей. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Вычисляет стандартное отклонение на основе всей группы, заданной в качестве аргументов. Стандартное отклонение — это показатель того, насколько широко значения распределены по среднему значению (среднее).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_P</b> предполагается, что его аргументами являются все люди. Если ваши данные представляют собой выборку для людей, вычислите стандартное отклонение <b>с помощью StDev_P.</b> </para>
          <para>Для больших размеров образцов <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>и</b> StDev_P приблизительно равные значения. </para>
          <para>Стандартное отклонение вычисляется с помощью метода "biased" или "n". </para>
          <para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>
            <b>StDev_P</b> использует следующую формулу: </para>
          <para>Рис. 1. Уравнение для StDev_P метода</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего (number1,number2,...) и n — размер образца. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 числов аргументов, соответствующих выборке для людей. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Оценивает стандартное отклонение на основе примера. Стандартное отклонение — это показатель того, насколько широко значения распределены по среднему значению (среднее).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_S</b> предполагает, что его аргументы являются образцом для людей. Если данные представляют всю группу, вычислите стандартное отклонение с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Стандартное отклонение вычисляется с помощью метода "unbiased" или "n-1". </para>
          <para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>
            <b>StDev_S</b> использует следующую формулу: </para>
          <para>Рис. 1. Уравнение для StDev_S метода</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего размера (number1,number2,...), а n — размер примера.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 числов аргументов, соответствующих выборке для людей. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Вычисляет стандартное отклонение на основе всей группы, заданной в качестве аргументов. Стандартное отклонение — это показатель того, насколько широко значения распределены по среднему значению (среднее).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> методе.</para>
          <para>
            <b>StDevP</b> предполагает, что его аргументами являются все люди. Если ваши данные представляют собой выборку для людей, вычислите стандартное отклонение с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Для больших размеров образцов и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>StDevP</b> возвращает приблизительно одинаковые значения. </para>
          <para>Стандартное отклонение вычисляется с помощью метода "biased" или "n". Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. <b>StDevP</b> использует следующую формулу: </para>
          <para>Рис. 1. Уравнение для метода StDevP</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y массива или диапазона зависимых точек данных.</param>
        <param name="Arg2">Known_x массива или диапазона независимых точек данных.</param>
        <summary>Возвращает стандартную ошибку прогнозируемого значения y для каждого x в регрессии. Стандартная ошибка — это показатель количества ошибок в прогнозировании y для отдельного x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Если known_y и known_x разное количество точек данных, <b>StEyx</b> возвращает значение #N/A ошибки. </para>
          <para>Если known_y и known_x пустые или имеют менее трех точек данных, <b>StEyx</b> возвращает #DIV/0! значение ошибки. </para>
          <para>Уравнение для стандартной ошибки прогнозируемого y: </para>
          <para>Рис. 1. Уравнение для стандартной ошибки прогнозируемого y</para>
          <para> </para>
          <para> </para>
          <para>где x и y — это пример: AVERAGE(known_x) и AVERAGE(known_y),а n — размер примера.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст — текст или ссылка на ячейку, содержащую текст, для которого нужно заменить символы.</param>
        <param name="Arg2">Old_text - текст, который необходимо заменить.</param>
        <param name="Arg3">New_text - текст, который вы хотите заменить old_text.</param>
        <param name="Arg4">Instance_num - указывает, какой old_text необходимо заменить на new_text. При указании instance_num заменяется только этот old_text. В противном случае каждое old_text в тексте меняется на new_text.</param>
        <summary>Заменяет new_text old_text в текстовую строку. Используйте SUBSTITUTE, чтобы заменить определенный текст в текстовой строке; Используйте REPLACE, чтобы заменить любой текст, который встречается в определенном расположении в текстовой строке.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число, указывающее функцию агрегирования, используемую методом.</param>
        <param name="Arg2">Первый <see cref="T:Microsoft.Office.Interop.Excel.Range" /> объект, для которого вычисляется подстановка.</param>
        <param name="Arg3"><paramref name="Arg3" /> — <paramref name="Arg30" /> <see cref="T:Microsoft.Office.Interop.Excel.Range" /> последующие объекты, для которых вычисляется подстановка.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Создает подстановки.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 аргументов, для которых необходимо общее значение или сумма.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Добавляет все числа в диапазоне ячеек.</summary>
        <returns>To be added.</returns>
        <remarks><para>Учитываются числа, логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения или текст в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Range — диапазон ячеек, который нужно оценить по критериям.</param>
        <param name="Arg2">Критерии — критерии в виде числа, выражения или текста, которые определяют, какие ячейки будут добавлены. Например, критерии могут быть выражены как 32, "32", &gt; "32" или "apples".</param>
        <param name="Arg3">Sum_range - фактические ячейки, которые необходимо добавить, если их соответствующие ячейки в диапазоне соответствуют критериям. Если sum_range опущен, ячейки в диапазоне оцениваются по критериям и добавляются, если они соответствуют критериям.</param>
        <summary>Добавляет ячейки, указанные по заданным критериям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Sum_range не должны иметь тот же размер и форму, что и диапазон. Фактически добавляемая ячейка определяется с помощью верхней левой ячейки в sum_range в качестве первой ячейки, а затем включая ячейки, соответствующие размеру и фигуре диапазону. Например,</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>В критериях можно использовать под wildcard characters, question mark (?) and asterisk (*). Знак вопроса соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти действительный вопросии или звездочка, введите тильду (~) перед знаком.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sum_range — диапазон суммы.</param>
        <param name="Arg2">Criteria_range1, criteria_range2, ... - один или несколько диапазонов для оценки связанных критериев.</param>
        <param name="Arg3">Criteria1, criteria2, ... - один или несколько критериев в виде числа, выражения, ссылки на ячейку или текста, которые определяют, какие ячейки будут добавлены. Например, критерии могут быть выражены как 32, "32", &gt; "32", "apples" или B4.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Добавляет ячейки в диапазоне, которые соответствуют нескольким критериям.</summary>
        <returns>To be added.</returns>
        <remarks><para>Каждая ячейка в sum_range суммируется, только если для этой ячейки соответствуют все указанные условия. </para>
          <para>Ячейки в sum_range, содержащие <b>истина,</b> оцениваются как 1; ячейки в sum_range, содержащие <b>значение false,</b> оцениваются как 0 (ноль). </para>
          <para>В критериях можно использовать поддеревные знаки, вопросии (?) и звездочки (*). Знак вопроса соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти действительный вопросии или звездочка, введите тильду (~) перед знаком. </para>
          <para>Каждый criteria_range не должен иметь одинаковый размер и форму, sum_range. Фактически добавляемая ячейка определяется с помощью верхней левой ячейки в этой criteria_range в качестве первой ячейки, а затем включая ячейки, соответствующие размеру и форме sum_range. Например,</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив1, array2, array3, ... — от 2 до 30 массивов, компоненты которых нужно умножить и добавить.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Умножает соответствующие компоненты в заданных массивах и возвращает сумму этих продуктов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументы массива должны иметь одинаковые размеры. Если этого не сделать, <b>SumProduct</b> возвращает #VALUE! значение ошибки. </para>
          <para>
            <b>SumProduct</b> обрабатывает записи массива, которые не являются числами, как нули.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 аргументов, для которых необходимо сумма квадратов. Вы также можете использовать один массив или ссылку на массив вместо аргументов, разделенных запятой.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Возвращает сумму квадратов аргументов.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются числа, логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x — первый массив или диапазон значений.</param>
        <param name="Arg2">Array_y — второй массив или диапазон значений.</param>
        <summary>Возвращает сумму отличий квадратов соответствующих значений в двух массивах.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если array_x и array_y разное число значений, <b>SumX2MY2returns</b> the #N/A error value. </para>
          <para>Уравнение для суммы разницы квадратов: </para>
          <para>Рис. 1. Уравнение для суммы разницы квадратов</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x — первый массив или диапазон значений.</param>
        <param name="Arg2">Array_y — второй массив или диапазон значений.</param>
        <summary>Возвращает сумму квадратов соответствующих значений в двух массивах. Сумма квадратов является общим термином во многих статистических вычислениях.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если array_x и array_y другое число значений, <b>SumX2PY2</b> возвращает значение #N/A ошибки. </para>
          <para>Уравнение для суммы квадратов: </para>
          <para>Рис. 1. Уравнение для суммы квадратов</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x — первый массив или диапазон значений.</param>
        <param name="Arg2">Array_y — второй массив или диапазон значений.</param>
        <summary>Возвращает сумму квадратов различий соответствующих значений в двух массивах.</summary>
        <returns>To be added.</returns>
        <remarks><para>Аргументами должны быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Если массив или опорный аргумент содержит текст, логические значения или пустые ячейки, эти значения игнорируются; однако ячейки со значением ноль включены. </para>
          <para>Если array_x и array_y разное число значений, <b>SumXMY2</b> возвращает значение #N/A ошибки. </para>
          <para>Уравнение для суммы квадратных различий: </para>
          <para>Рис. 1. Уравнение для суммы квадратных различий</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость — начальная стоимость актива.</param>
        <param name="Arg2">Salvage — значение в конце амортизации (иногда называемое значением salvage для актива).</param>
        <param name="Arg3">Срок жизни — количество периодов, в течение которых актив амортизации (иногда называемый полезным сроком жизни актива).</param>
        <param name="Arg4">Для каждого периода и должны использовать те же единицы, что и для жизни.</param>
        <summary>Возвращает амортизацию актива за указанный период в цифрах за указанный период.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Syd</b> вычисляется следующим образом:</para>
          <para>Рис. 1. Уравнение для метода Syd</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — числовая величина, при которой оценивается распределение.</param>
        <param name="Arg2">Deg_freedom — это целый ряд, который указывает количество степеней свободности.</param>
        <param name="Arg3">Накопительный — логическое значение, которое определяет форму функции. Если <b>совокупное имеет</b> <b>T_Dist</b> возвращает накопительную функцию распределения; Если <b>заведомо</b>ложно, возвращается функция плотности вероятности.</param>
        <summary>Возвращает распределение учащихся, где числовые значения (x) — это вычисляемое значение t, для которого вычисляются процентные точки.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числовым, T_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если deg_freedom &lt; 1, <b>T_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x &lt; 0, T_Dist <b></b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — числовая величина, при которой оценивается распределение.</param>
        <param name="Arg2">Deg_freedom — это целый ряд, который указывает количество степеней свободности.</param>
        <summary>Возвращает двухвостую рассылку учащихся.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числом, T_Dist_2T возвращает #VALUE! значение ошибки. </para>
          <para>Если deg_freedom &lt; 1, <b>T_Dist_2T</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x &lt; 0, T_Dist_2T <b></b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — числовая величина, при которой оценивается распределение.</param>
        <param name="Arg2">Degrees_freedom — это целый ряд, который указывает количество степеней свободности.</param>
        <summary>Возвращает правохвое распределение учащихся, где числовое значение (x) — это вычисляемое значение t, для которого вычисляются процентные точки. Распределение t используется при тестировании небольших примеров данных. Используйте эту функцию в качестве таблицы критически важных значений для распределения.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если какой-либо аргумент не <b></b> является числом, T_Dist_RT возвращает #VALUE! значение ошибки. </para>
          <para>Если degrees_freedom &lt; 1, <b>T_Dist_RT</b> возвращает #NUM! значение ошибки. </para>
          <para>Аргументы degrees_freedom и tails усечены до integers. </para>
          <para>Если для tails есть любое значение, <b></b> кроме 1 или 2, T_Dist_RT возвращает #NUM! значение ошибки. </para>
          <para>Если x &lt; 0, T_Dist_RT <b></b> возвращает #NUM! значение ошибки. </para>
          <para>Если tails = <b>1,</b> T_Dist_RT вычисляется как T_DIST_RT = P( X x), где X — это случайная переменная, которая следует за &gt; t-распределением. Если tails = 2, <b>T_Dist_RT</b> вычисляется как T_DIST_RT = P(| X| &gt; x) = P(X &gt; x или X &lt; -x). </para>
          <para>Так как x 0 не &lt; разрешено использовать <b>T_Dist_RT</b> при x 0, обратите внимание, что &lt; T_DIST_RT(-x,df) = 1 – T_DIST_RT(x,df) = P(X &gt; -x) и T_DIST_2T(-x,df) = T_DIST_2T(x df) = P(| X| &gt; x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с распределением учащихся.</param>
        <param name="Arg2">Deg_freedom - количество степеней свободного отношения, с которыми необходимо химякировать распространение.</param>
        <summary>Возвращает левый концев распространения учащихся.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если один из аргументов не <b></b> является числом, T_Inv возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или &gt; 1, <b></b> T_Inv возвращает #NUM! значение ошибки. </para>
          <para>Если deg_freedom не является integer, оно усечено. </para>
          <para>Если deg_freedom &lt; 1, <b>T_Inv</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с двухвостым распределением учащихся.</param>
        <param name="Arg2">Degrees_freedom - количество степеней свободного отношения, с которыми необходимо химякировать распространение.</param>
        <summary>Возвращает значение t-распределения для учащегося в качестве функции вероятности и степеней свободности.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если один из аргументов не <b></b> является числом, T_Inv_2T возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или &gt; 1, <b></b> T_Inv_2T возвращает #NUM! значение ошибки. Если degrees_freedom не является integer, оно усечено. </para>
          <para>Если degrees_freedom &lt; 1, <b>T_Inv_2T</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>T_Inv_2T</b> возвращает это значение, например P(| X| t) = вероятность, когда X — это случайная переменная, которая следует за &gt; T-распределением и P(| X| &gt; t) = P(X &lt; -t или X &gt; t). </para>
          <para>Значение t-tailed может быть возвращено путем замены вероятности на *2. Для вероятности 0,05 и степеней свободности 10 двухвостовое значение вычисляется с помощью T_INV_2T(0.05,10), который возвращает 2.28139.* Однохвостовое значение той же вероятности и степеней свободности можно вычислить с помощью T_INV_2T(2 0,05,10), который возвращает 1,812462. </para>
          <para>
            <b>Примечание.</b>В некоторых таблицах вероятность описывается как (1-p).</para>
          <para>Если задано значение <b>вероятности, T_Inv_2T</b> ищет это значение x таким образом, что T_DIST_RT(x, degrees_freedom, 2) = вероятность. Таким образом, <b>точность T_Inv_2T</b> зависит от <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> точности. <b>T_Inv_2T</b> использует метод итеративного поиска. Если поиск не сошел после 100 итерации, функция возвращает значение #N/A ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — первый набор данных.</param>
        <param name="Arg2">Array2 — второй набор данных.</param>
        <param name="Arg3">Tails — указывает количество каналов распространения. Если tails = 1, <b>T_Test</b> использует однохвостую рассылку. Если tails = 2, <b>T_Test</b> использует двухвостую рассылку.</param>
        <param name="Arg4">Тип — тип t-Test, который необходимо выполнить.</param>
        <summary>Возвращает вероятность, связанную с тестом для учащихся. Используйте T_TEST, чтобы определить, были ли два примера, скорее всего, были взяты из одного и того же двух групп, которые имеют одинаковое количество.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массивы array1 и array2 имеют разное количество точек <b></b> данных и тип = 1 (сопряженный), T_Test возвращает значение #N/A ошибки. </para>
          <para>Аргументы tails и type усечены до integers. </para>
          <para>Если tails или type не <b>числовое,</b> T_Test возвращает #VALUE! значение ошибки. </para>
          <para>Если для tails есть любое значение, <b></b> кроме 1 или 2, T_Test возвращает #NUM! значение ошибки. </para>
          <para>
            <b>T_Test</b> использует данные в массиве array1 и array2 для вычисления неокритной статистики. Если tails=1, <b>T_Test</b> возвращает вероятность более высокого значения T-статистики при предположении, что array1 и array2 являются примерами из групп с таким же значением. Значение, возвращаемого T_Test, когда tails=2 является двойным, которое возвращается, когда tails=1 и соответствует вероятности более высокого абсолютного значения t-статистики в предположении "то же самое средство population means". <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число — любое реальное число.</param>
        <summary>Возвращает гиперболический тангенс числа.</summary>
        <returns>To be added.</returns>
        <remarks><para>Формула гиперболического тангента:</para>
          <para>Рис. 1. Формула гиперболического тангента</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета счета за выставление счета. Дата расчета безопасности — это дата после даты выдачи, когда счет "Заметь" выставлен покупателю.</param>
        <param name="Arg2">Срок действия — дата возраста счета за выставление счета за 1000 долларов США. Дата давности — это дата окончания срока действия счета "Заметь".</param>
        <param name="Arg3">Значение ImportantDates следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста. Скидка — ставка скидки для счета за выставление счетов за оплату.</param>
        <summary>Возвращает эквивалентную доходность для счета "Заметь".</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Расчеты и возраст усечены до integers. </para>
          <para>Если расчет или срок готовности не являются допустимой датой, <b>TBillEq</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если скидка ≤ 0, <b>TBillEq</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчетная возраста или срок ее расчета составляет более одного года &gt; после расчета, <b>TBillEq</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TBillEq</b> вычисляется как TBILLEQ = (365 x rate)/(360-(rate x DSM)), где DSM — это число дней между расчетами расчета в соответствии с 360 днями в год.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета счета за выставление счета. Дата расчета безопасности — это дата после даты выдачи, когда счет "Засчет" выставлен покупателю.</param>
        <param name="Arg2">Срок действия — дата возраста счета в счете за выставление платежа в 2013 г. Дата давности — это дата окончания срока действия счета "Засвеченный".</param>
        <param name="Arg3">Скидка — ставка скидки для счета за выставление счетов за оплату.</param>
        <summary>Возвращает цену за 100 долларов США для счета "Засвеять".</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Расчеты и возраст усечены до integers. </para>
          <para>Если расчет или срок готовности не являются допустимой датой, <b>TBillPrice</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если скидка ≤ 0, <b>TBillPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>Если срок готовности расчетов превышает один год &gt; после расчета, <b>TBillPrice</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TBillPrice</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для метода TBillPrice</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>DSM — количество дней от расчета до возраста, за исключением любой даты возраста, которая составляет более одного календарного года после даты расчета.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета счета за выставление счета. Дата расчета безопасности — это дата после даты выдачи, когда счет "Засчет" выставлен покупателю.</param>
        <param name="Arg2">Срок действия — дата возраста счета за выставление счета за 1000 долларов США. Дата давности — это дата окончания срока действия счета "Заметь".</param>
        <param name="Arg3">Pr — цена счета за 100 долларов США.</param>
        <summary>Возвращает доходность для счета "Оплата".</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Расчеты и возраст усечены до integers. </para>
          <para>Если сроки расчета или возраста не являются допустимой датой, <b>TBillYield</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если pr ≤ 0, <b>TBillYield</b> возвращает #NUM! значение ошибки. </para>
          <para>Если срок ≥ расчетов или срок их готовности превышает один год после расчета, то <b>TBillYield</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TBillYield</b> вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для метода TBillYield</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>DSM — количество дней от расчета до возраста, за исключением любой даты возраста, которая составляет более одного календарного года после даты расчета.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — числовая величина, при которой оценивается распределение.</param>
        <param name="Arg2">Degrees_freedom — это целый ряд, указывающий количество степеней свободности.</param>
        <param name="Arg3">Tails — указывает количество возвращаемого числа возвращаемого распределения. Если tails = 1, TDIST возвращает однохвостовое распределение. Если tails = 2, TDIST возвращает двухвостую рассылку.</param>
        <summary>Возвращает процентные точки (вероятность) для распределения учащихся, где числовые значения (x) — это вычисляемое значение t, для которого вычисляются процентные точки. Распределение t используется при тестировании небольших примеров данных. Используйте эту функцию в качестве таблицы критически важных значений для распределения.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в сведениях <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" /> о методах и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" /> методах.</para>
          <para>Если какой-либо аргумент не является числовым, <b>TDist</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если degrees_freedom &lt; 1, <b>TDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Аргументы degrees_freedom и tails усечены до integers. </para>
          <para>Если в tails есть любое значение, кроме 1 или 2, <b>TDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если x &lt; 0, <b>TDist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если tails = 1, <b>TDist</b> вычисляется как TDIST = P( X x), где X — это случайная переменная, которая следует за &gt; t-распределением. Если tails = 2, <b>TDist</b> вычисляется как TDIST = P(| X| &gt; x) = P(X &gt; x или X &lt; -x). </para>
          <para>Так как x 0 не &lt; разрешено использовать <b>TDist</b> при x 0, обратите внимание, что &lt; TDIST(-x,df,1) = 1 – TDIST(x,df,1) = P(X &gt; -x) и TDIST(-x,df,2) = TDIST(x df,2) = P(| X| &gt; x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Числовая величина, формула, которая оценивается в числовом значении, или ссылка на ячейку, содержащую числовой значение.</param>
        <param name="Arg2">Числовая форма в текстовом формате в поле "Категория" на вкладке "Число" диалогового окна "Формат ячеек".</param>
        <summary>Преобразует значение в текст в определенном числовом формате.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Зарезервировано для внутреннего использования.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Вероятность — вероятность, связанная с двухвостым распределением учащихся.</param>
        <param name="Arg2">Degrees_freedom - количество степеней свободного отношения, с которыми необходимо химякировать распространение.</param>
        <summary>Возвращает значение t-значения T-распределения учащегося в качестве функции вероятности и степеней свободности.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новых функциях см. в этих <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" /> и других <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" /> методах.</para>
          <para>Если один из аргументов не является числовым, <b>TInv</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если вероятность &lt; 0 или &gt; 1, <b>TInv</b> возвращает #NUM! значение ошибки. </para>
          <para>Если degrees_freedom не является integer, оно усечено. </para>
          <para>Если degrees_freedom &lt; 1, <b>TInv</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TInv</b> возвращает это значение, например P(| X| t) = вероятность, когда X — это случайная переменная, которая следует за &gt; T-распределением и P(| X| &gt; t) = P(X &lt; -t или X &gt; t). </para>
          <para>Значение t-tailed может быть возвращено путем замены вероятности на *2. Для вероятности 0,05 и степеней свободности 10 двухвостовое значение вычисляется с помощью TINV(0.05,10), который возвращает 2.28139.* Однохвостовое значение той же вероятности и степеней свободности можно вычислить с помощью TINV(2 0.05,10), который возвращает 1,812462. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон ячеек на нужном для перезапображении. Перезапись массива создается с помощью первой строки массива в качестве первого столбца нового массива, второй строки массива в качестве второго столбца нового массива и так далее.</param>
        <summary>Возвращает вертикальный диапазон ячеек в качестве горизонтального диапазона или наоборот. TransPOSE необходимо ввести в качестве формулы массива в диапазоне с одинаковым количеством строк и столбцов соответственно, так как массив содержит столбцы и строки. Используйте TRANSPOSE, чтобы сместить вертикальную и горизонтальную ориентацию массива на сайте.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y - набор значений y, которые вы уже знаете в связи y = mx + b.</param>
        <param name="Arg2">Known_x - необязательный набор X-значений, которые вы, возможно, уже знаете в связи y = mx + b.</param>
        <param name="Arg3">New_x - новые X-значения, для которых необходимо, чтобы TREND возвращал соответствующие значения y.</param>
        <param name="Arg4">Const — логическое значение, указывав, следует ли принудительно установить для константы b значение 0.</param>
        <summary>Возвращает значения по линейной тенденции. Соответствует прямой линии (с использованием метода наименьших квадратов) массивам known_y и known_x массивов. Возвращает значения y в этой строке для массива new_x, которые вы указали.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив known_y в одном столбце, каждый столбец known_x интерпретируется как отдельная переменная. </para>
          <para>Если массив known_y в одной строке, каждая строка known_x интерпретируется как отдельная переменная. </para>
          <para>Массив known_x может включать один или несколько наборов переменных. Если используется только одна переменная, known_y и known_x могут быть диапазонами любой фигуры, если они имеют одинаковые размеры. Если используется несколько переменных, known_y должен быть вектором (то есть диапазоном с высотой одной строки или шириной одного столбца). </para>
          <para>Если known_x опущен, предполагается, что это массив {1,2,3,...} такой же размер, known_y, что и у known_y. </para>
          <para>New_x должны включать столбец (или строку) для каждой независимой переменной так же, как known_x для каждой отдельной переменной. Таким образом, known_y в одном столбце, known_x и new_x должны иметь одинаковое количество столбцов. Если known_y находится в одной строке, known_x и new_x должны иметь одинаковое количество строк. </para>
          <para>Если опустить new_x, предполагается, что они такие же, как known_x. </para>
          <para>Если опустить known_x и new_x, предполагается, что они являются массивом {1,2,3,...} такой же размер, known_y, что и у known_y. </para>
          <para>Если const имеет <b>true</b> или опущен, b вычисляется обычным образом. </para>
          <para>Если значение const <b>равно false,</b>для b устанавливается значение 0 (ноль), а значения m настраиваются таким образом, что y = mx. </para>
          <para>Сведения о том, как Microsoft Excel соответствует строке для данных, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> см. в . </para>
          <para>Вы можете использовать <b>Trend</b> для подкаталки многономной кривой, перенаправление на ту же переменную, которая вызывается различными полномочиями. Например, предположим, что столбец A содержит значения y, а столбец B содержит x-значения. Вы можете ввести x^2 в столбце C, x^3 в столбце D и так далее, а затем откатить столбцы B-D к столбцу A. </para>
          <para>Формулы, возвращая массивы, должны быть введены в качестве формул массива. </para>
          <para>При вводе константы массива для аргумента, такого как known_x, используйте запятые, чтобы разделять значения в одной строке и с запятой для разных строк.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Текст — текст, из которого необходимо удалить пробелы.</param>
        <summary>Удаляет из текста все пробелы, кроме одного пробела между словами. Используйте TRIM для текста, полученного от другого приложения с нерегулярным интервалом.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Функция <b>Trim</b> предназначена для обрезки 7-битного пробела ASCII (значение 32) от текста. В наборе символов Юникода имеется дополнительный знак пробела, называемый неразрывным пробелом, который имеет десятичной запятой значение 160. Этот символ часто используется на веб-страницах в качестве объекта HTML, <b> &amp; nbsp;</b>. Сама по себе функция <b>Trim</b> не удаляет этот неразрывный пробел.</para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — массив или диапазон значений для обрезки и среднего значения.</param>
        <param name="Arg2">Процент — дробное число точек данных, исключаемого из вычисления. Например, если процент = 0,2, 4 точки обрезаются из набора данных, который составляет 20 баллов (20 x 0,2): 2 от верхнего и 2 от нижней части набора.</param>
        <summary>Возвращает внутреннее время набора данных. TRIMMEAN вычисляет сумму, сделанную путем исключения процента точек данных из верхнего и нижнего концей набора данных. Эту функцию можно использовать, если вы хотите исключить данные из анализа.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если процент &lt; 0 или &gt; процент 1, <b>TrimMean</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TrimMean</b> округлен число исключенных точек данных до ближайшего числа из 2. Если процент = 0,1, 10 процентов 30 точек данных равно 3 пунктам. Для симметрии <b>TrimMean</b> исключает одно значение из верхней и нижней части набора данных.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 — первый набор данных.</param>
        <param name="Arg2">Array2 — второй набор данных.</param>
        <param name="Arg3">Tails — указывает количество каналов распространения. Если tails = 1, TTEST использует однохвостовое распределение. Если tails = 2, TTEST использует двухвостую рассылку.</param>
        <param name="Arg4">Тип — тип t-Test, который необходимо выполнить.</param>
        <summary>Возвращает вероятность, связанную с тестом учащегося. Используйте TTEST, чтобы определить, были ли два примера, скорее всего, были взяты из одного и того же двух групп, которые имеют одинаковое количество то же самое.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" /> методе.</para>
          <list type="table">
            <item>
              <term>1 </term>
              <description>Paired</description>
            </item>
            <item>
              <term>2 </term>
              <description>Двухсайтовая равная дисперсия (однородность)</description>
            </item>
            <item>
              <term>3</term>
              <description>Отклонение разнородности из двух примеров (heteroscedance)</description>
            </item>
          </list>
          <para>Если массивы array1 и array2 имеют разное количество точек данных и тип = 1 (сопряженный), <b>TTest</b> возвращает значение #N/A ошибки. </para>
          <para>Аргументы tails и type усечены до integers. </para>
          <para>Если tails или type не числовое, <b>TTest</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если в tails есть любое значение, кроме 1 или 2, <b>TTest</b> возвращает #NUM! значение ошибки. </para>
          <para>
            <b>TTest</b> использует данные в массиве array1 и array2 для вычисления нео отрицательной статистики. Если tails=1, <b>TTest</b> возвращает вероятность более высокого значения T-статистики при предположении, что array1 и array2 являются примерами из групп с таким же значением. Значение, возвращаемого <b>tTest,</b> когда tails=2 является двойным, которое возвращается, когда tails=1 и соответствует вероятности более высокого абсолютного значения t-статистики в предположении "то же самое population means".</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Номер Юникод, представляющий символ.</param>
        <summary>Возвращает символ Юникода, на который ссылается заданное число.</summary>
        <returns>Задает логическое условие соответствия для текстовой строки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Символ, для которого необходимо значение Юникод.</param>
        <summary>Возвращает число (кодовая точка), соответствующее первому символу текста.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ссылка на ячейку, содержащую число, или формулу, которая оценивается как число.</param>
        <param name="Arg2">Количество цифр справа от десятичной точки. Если Arg2 отрицательное, число округляется слева от десятичной точки. Если опустить десятичность, предполагается, что это 2.</param>
        <summary>Преобразует число в текстовый формат и применяет символ валюты. Имя метода (и символ, который он применяет) зависит от языковых параметров.</summary>
        <returns>To be added.</returns>
        <remarks><para>Метод <b>USD деформирует</b> число в текст с использованием формата валюты, при этом десятичное число округлено до указанного места. Используемый формат: $#,##0.00_);($#,##0.00).</para>
          <para>Главное различие между форматированием ячейки, которая содержит число с помощью команды "Формат ячеек" и форматированием числа непосредственно с помощью метода, заключается в преобразовании результата в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> текст. Число, отформатированные с помощью команды Format Cells, по-прежнему является числом. Вы можете продолжать использовать числа, отформатированные в формулах, так как Excel преобразовывает числа, которые введены в виде текстовых значений, в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> числа при расчете.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 числов аргументов, соответствующих выборке для людей.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Оценивает дисперсию на основе примера.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var</b> предполагает, что его аргументы являются образцом для людей. Если данные представляют всю группу пользователей, вычислите дисперсию с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>
            <b>Var</b> использует следующую формулу: </para>
          <para>Рис. 1. Уравнение для метода Var</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего (number1,number2,...) и n — размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 числов аргументов, соответствующих числу пользователей.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Вычисляет дисперсию на основе всей группы.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_P</b> предполагается, что его аргументами являются все люди. Если ваши данные представляют выборку для людей, вычислите дисперсию с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Уравнение <b>для</b> Var_P: </para>
          <para>Рис. 1. Уравнение для Var_P метода</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего среднего (number1,number2,...) и n — размер образца.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 числов аргументов, соответствующих выборке для людей.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Оценивает дисперсию на основе примера.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_S</b> предполагает, что его аргументы являются образцом для людей. Если данные представляют всю группу пользователей, вычислите дисперсию с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>
            <b>Var_S</b> использует следующую формулу: </para>
          <para>Рис. 1. Уравнение для Var_S метода</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего размера (number1,number2,...), а n — размер примера.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Число 1, число 2, ... — от 1 до 30 числов аргументов, соответствующих числу пользователей.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Вычисляет дисперсию на основе всей группы.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> методе.</para>
          <para>
            <b>VarP</b> предполагает, что его аргументами является все пополнено. Если ваши данные представляют выборку для людей, вычислите дисперсию с помощью <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Аргументами могут быть числа, имена, массивы или ссылки, содержащие числа. </para>
          <para>Учитываются логические значения и текстовые представления чисел, которые вы введите непосредственно в список аргументов. </para>
          <para>Если аргумент является массивом или ссылкой, учитываются только числа в этом массиве или ссылке. Пустые ячейки, логические значения, текст или значения ошибок в массиве или ссылке игнорируются. </para>
          <para>Аргументы, которые являются значениями ошибок или текстом, которые не могут быть переведены в числа, приводят к ошибкам. </para>
          <para>Уравнение <b>для VarP:</b> </para>
          <para>Рис. 1. Уравнение для метода VarP</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего размера (number1,number2,...), а n — размер примера.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Стоимость — начальная стоимость актива.</param>
        <param name="Arg2">Salvage — значение в конце амортизации (иногда называемое значением salvage для актива). Это значение может быть 0.</param>
        <param name="Arg3">Срок жизни — количество периодов, в течение которых актив амортизации (иногда называемый полезным сроком жизни актива).</param>
        <param name="Arg4">Start_period — начальный период, для которого необходимо рассчитать амортизация. Start_period использовать те же единицы, что и жизненный период.</param>
        <param name="Arg5">End_period — конец периода, для которого необходимо вычислить амортизация. End_period использовать те же единицы, что и жизненный период.</param>
        <param name="Arg6">Фактор — скорость снижения баланса. Если фактор опущен, он считается 2 (метод двойного снижения баланса). Измените фактор, если вы не хотите использовать метод двойного снижения баланса. Описание метода двойного снижения баланса см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" /> описании.</param>
        <param name="Arg7">No_switch — логическое значение, указывое, следует ли переключаться на прямолинейное амортизация, если амортизация больше, чем вычисление баланса при отклонении.</param>
        <summary>Возвращает амортизация актива за любой определенный вами период, включая частичные периоды, с помощью метода двойного снижения баланса или другого указываемого метода. VDB означает переменную баланс упадка.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если no_switch <b>верно,</b>Microsoft Excel не переключается на прямолинейное амортизация, даже если амортизация больше, чем вычисление баланса при отклонении. </para>
          <para>Если no_switch false <b></b> или пропущен, Excel переключается на прямолинейное амортизация, если амортизация больше, чем вычисление баланса при отклонении.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value — значение для поиска в первом столбце массива таблицы. Lookup_value может быть значением или ссылкой. Если lookup_value меньше наименьшего значения в первом столбце table_array, VLOOKUP возвращает значение #N/A ошибки.</param>
        <param name="Arg2">Table_array — два или более столбцов данных. Используйте ссылку на диапазон или имя диапазона. Значения в первом столбце table_array это значения, которые lookup_value. Эти значения могут быть текстом, числами или логическими значениями. Текст в верхнем и нижнем регистрах эквивалентен.</param>
        <param name="Arg3">Col_index_num — номер столбца в table_array, из которого должно быть возвращено совпадающие значения. Значение col_index_num 1 возвращает значение в первом столбце table_array; Значение col_index_num 2 возвращает значение во втором столбце table_array и так далее.</param>
        <param name="Arg4">Range_lookup — логическое значение, которое указывает, нужно ли методу найти точное совпадение или <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> приблизительное совпадение:</param>
        <summary>Выполняет поиск значения в первом столбце массива таблиц и возвращает значение в той же строке из другого столбца в массиве таблиц.</summary>
        <returns>To be added.</returns>
        <remarks><para>V в <b>VLookup означает</b> вертикальную. Используйте метод <b>VLookup</b> вместо метода, если значения сравнения находятся в столбце слева от данных, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> которые нужно найти.</para>
          <para>Если Col_index_num меньше 1, метод <b>VLookup</b> создает ошибку. </para>
          <para>Если Col_index_num больше числа столбцов в table_array, метод <b>VLookup</b> создает ошибку.</para>
          <para>Если Range_lookup true <b>или</b> пропущен, возвращается точное или приблизительное совпадение. Если точное совпадение не найдено, возвращается следующее наибольшее значение lookup_value меньше. </para>
          <para>Значения в первом столбце table_array должны быть размещены в порядке возрастания; в противном случае <b>метод VLookup</b> может дать неправильное значение.</para>
          <para>Если Range_lookup <b>false,</b>метод <b>VLookup</b> найдет только точное совпадение. В этом случае отсортировать значения в первом столбце table_array не требуется. Если в первом столбце столбца table_array есть два или lookup_value, используется первое найденного значения. Если точное совпадение не найдено, создается ошибка.</para>
          <para>При поиске текстовых значений в первом столбце table_array убедитесь, что данные в первом столбце table_array не имеют пробелов в конце, несогласованного использования прямых ( " или " ) и кудрявых ( ' или ") кавычках, или непечатающиеся символы. В таких случаях метод <b>VLookup</b> может дать неверное или неожиданное значение. Сведения о том, как очистить или обрезать значения, см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" /> этих и <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" /> методах. При поиске значений числа или даты убедитесь, что данные в первом столбце table_array не хранятся в виде текстовых значений. В этом случае метод <b>VLookup</b> может дать неверное или неожиданное значение. </para>
          <para>Если range_lookup false, <b></b> а lookup_value текстом, то в lookup_value можно использовать под wildcard characters, question mark (?) and asterisk (*). Вопроси метка соответствует любому отдельному символу; звездочка соответствует любой последовательности символов. Если вы хотите найти действительный вопросии или звездочка, введите тильду (~) перед знаком.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">URL-адрес веб-службы для запроса HTTP GET.</param>
        <summary>Используемая функция, которая асинхронно вызывает веб-службу с помощью HTTP-запроса GET и возвращает ответ.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serial_number - последовательное число, которое представляет дату дня, который вы пытаетесь найти. Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</param>
        <param name="Arg2">Return_type — число, которое определяет тип возвращаемого значения.</param>
        <summary>Возвращает день недели, соответствующий дате. По умолчанию день задается в виде integer, в диапазоне от 1 (воскресенье) до 7 (суббота).</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>1 или пропущено</term>
              <description>Цифры от 1 (воскресенье) до 7 (суббота). Работает так же, как в предыдущих версиях Microsoft Excel.</description>
            </item>
            <item>
              <term>2 </term>
              <description>Цифры от 1 (понедельник) до 7 (воскресенье).</description>
            </item>
            <item>
              <term>3</term>
              <description>Цифры от 0 (понедельник) до 6 (воскресенье).</description>
            </item>
            <item>
              <term>11 </term>
              <description>Цифры от 1 (понедельник) до 7 (воскресенье).</description>
            </item>
            <item>
              <term>12 </term>
              <description>Цифры от 1 (вторник) до 7 (понедельник)</description>
            </item>
            <item>
              <term>13 </term>
              <description>Цифры от 1 (среда) до 7 (вторник)</description>
            </item>
            <item>
              <term>14 </term>
              <description>Цифры от 1 (четверг) до 7 (среда)</description>
            </item>
            <item>
              <term>15 </term>
              <description>Цифры от 1 (в пятницу) до 7 (четверг)</description>
            </item>
            <item>
              <term>16 </term>
              <description>Цифры от 1 (суббота) до 7 (в пятницу)</description>
            </item>
            <item>
              <term>17 </term>
              <description>Цифры от 1 (воскресенье) до 7 (суббота)</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serial_num - дата в течение недели. Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</param>
        <param name="Arg2">Return_type — число, которое определяет день начала недели. По умолчанию используется значение 1.</param>
        <summary>Возвращает число, которое указывает, где неделя попадает в числовом порядке в течение года.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b> <b>Функция WeekNum</b> считает неделю, содержащую 1 января, первой неделей года. Тем не менее, существует европейский стандарт, который определяет первую неделю как первую неделю с большинством дней (четырех или более) в новом году. Это означает, что в течение лет, в течение которых в первую неделю января три дня или меньше, функция <b>WeekNum</b> возвращает некорректные номера недель в соответствии с европейских стандартов.</para>
          <list type="table">
            <item>
              <term>1 </term>
              <description>Неделя начинается в воскресенье. Дни недели имеют число от 1 до 7.</description>
            </item>
            <item>
              <term>2 </term>
              <description>Неделя начинается в понедельник. Дни недели имеют число от 1 до 7.</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, при котором необходимо оценить функцию.</param>
        <param name="Arg2">Alpha — параметр для распространения.</param>
        <param name="Arg3">Бета-версия — параметр для распространения.</param>
        <param name="Arg4">Накопительный — определяет форму функции.</param>
        <summary>Возвращает распределение Weibull. Используйте это распределение при анализе надежности, например при расчете времени сбоя устройства.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует использовать новые функции с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> методе.</para>
          <para>Если x, alpha или beta не является числом, <b>Weibull</b> возвращает #VALUE! значение ошибки. Если x &lt; 0, <b>Weibull</b> возвращает #NUM! значение ошибки. </para>
          <para>Если альфа≤ 0 или бета-версия ≤ 0, <b>Weibull</b> возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции накопительного распределения Weibull: </para>
          <para>Рис. 1. Уравнение для накопительного распределения Weibull</para>
          <para> </para>
          <para> </para>
          <para>Уравнение для функции плотности вероятности Weibull:</para>
          <para>Рис. 2. Уравнение для плотности вероятности Weibull</para>
          <para> </para>
          <para> </para>
          <para>Если альфа = 1, <b>Weibull</b> возвращает экспоненциальное распределение с помощью:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X — значение, при котором необходимо оценить функцию.</param>
        <param name="Arg2">Alpha — параметр для распространения.</param>
        <param name="Arg3">Бета-версия — параметр для распространения.</param>
        <param name="Arg4">Накопительный — определяет форму функции.</param>
        <summary>Возвращает распределение Weibull. Используйте это распределение при анализе надежности, например при расчете времени сбоя устройства.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если x, alpha или beta не числимы, <b></b> Weibull_Dist возвращает #VALUE! значение ошибки. </para>
          <para>Если x &lt; 0, <b>Weibull_Dist</b> возвращает #NUM! значение ошибки. </para>
          <para>Если альфа ≤ 0 или бета-версия ≤ <b></b> 0, Weibull_Dist возвращает #NUM! значение ошибки. </para>
          <para>Уравнение для функции накопительного распределения Weibull: </para>
          <para>Рис. 1. Уравнение для накопительного распределения Weibull</para>
          <para> </para>
          <para> </para>
          <para>Уравнение для функции плотности вероятности Weibull:</para>
          <para>Рис. 2. Уравнение для плотности вероятности Weibull</para>
          <para> </para>
          <para> </para>
          <para>Если альфа = 1, <b>Weibull_Dist</b> возвращает экспоненциальное распределение с помощью:</para>
          <para>Рис. 3. Уравнение</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала.</param>
        <param name="Arg2">Дни — количество дней, не в течение недели до или после start_date. Положительное значение для дней дает будущую дату; отрицательное значение дает даты, прошедшие.</param>
        <param name="Arg3">Праздники — необязательный список из одной или более дат, которые необходимо исключить из рабочего календаря, например праздников в штатах, федеральных и плавающих праздников. Список может представлять собой диапазон ячеек, содержащих даты, или константы массива серийных номеров, которые представляют эти даты.</param>
        <summary>Возвращает число, которое представляет дату, которая является указанным числом рабочих дней до или после даты (начальная дата). Рабочие дни исключают выходные дни и любые даты, которые определены как праздники. Используйте WORKDAY, чтобы исключить выходные и выходные дни при расчете дат оплаты счета, ожидаемого времени доставки или количества рабочих дней.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникать, если даты введены в виде текста.</para>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Если какой-либо аргумент не является допустимой датой, <b>WorkDay</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если start_date "плюс" дает недействительные даты, <b>WorkDay</b> возвращает #NUM! значение ошибки. </para>
          <para>Если дни не являются integer, оно усечено.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - дата начала, усеченная до integer.</param>
        <param name="Arg2">Дни — количество рабочих дней до или после start_date. Положительное значение дает даты в будущем; отрицательное значение дает даты, прошедшие; Значение 0 (ноль) дает start_date. Смещение по дням усечено до 1-го.</param>
        <param name="Arg3">Выходные дни — это дни недели, которые являются выходными и не считаются рабочими днями. Выходные — это номер или строка выходных, задав время выходных.</param>
        <param name="Arg4">Праздники — необязательный набор дат, которые необходимо исключить из календаря рабочего дня. Праздники — это диапазон ячеек, содержащих даты, или константа массива последовательных значений, которые представляют эти даты. Порядок дат или последовательных значений в выходные дни может быть произвольным.</param>
        <summary>Возвращает серийный номер даты до или после указанного числа рабочих дней с пользовательскими параметрами выходных. Параметры выходных указывают, какие и сколько дней являются выходными днями. Дни выходных и любые дни, указанные как праздники, не считаются рабочими днями.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если start_date для текущего базового значения даты находится вне <b>диапазона,</b> WorkDay_Intl возвращает #NUM! значение ошибки. </para>
          <para>Если любая дата в выходные дни выходит за <b></b> диапазон для текущего базового значения даты, WorkDay_Intl возвращает #NUM! значение ошибки. </para>
          <para>Если start_date плюс смещение дня возвращает <b></b> недействительные даты, WorkDay_Intl возвращает #NUM! значение ошибки. </para>
          <para>Если строка выходного дня имеет недействительные длины или <b>содержит недопустимые</b> символы, WorkDay_Intl возвращает #VALUE! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Значения — ряд потоков денежных средств, соответствующих расписанию платежей в датах. Первый платеж является необязательным и соответствует затратам или платежам, которые происходят в начале инвестиций. Если первое значение является затратой или платежом, оно должно быть отрицательным значением. Скидка для всех последующих платежей зависит от 365-дневного года. Ряд значений должен содержать как минимум одно положительное и одно отрицательное значение.</param>
        <param name="Arg2">Даты — расписание дат оплаты, соответствующее платежам в потоке денежных средств. Первая дата оплаты указывает начало расписания платежей. Все остальные даты должны быть позже этой даты, но они могут происходить в любом порядке. Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</param>
        <param name="Arg3">Угадать — число, которое вы угадать, близко к результату <b>Xirr</b>.</param>
        <summary>Возвращает внутреннюю ставку прибыли для расписания потоков денежных средств, которые не обязательно периодически. Чтобы вычислить внутреннюю скорость возврата для ряда периодических потоков денежных средств, используйте функцию IRR.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Числа в датах усечены до чисел. </para>
          <para>
            <b>В Xirr</b> ожидается по крайней мере один положительный денежный поток и один отрицательный. в <b>противном случае Xirr</b> возвращает #NUM! значение ошибки. </para>
          <para>Если любое число в датах не является допустимой датой, <b>Xirr</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если любое число дат предшествует начальной дате, <b>Xirr</b> возвращает #NUM! значение ошибки. </para>
          <para>Если значения и даты содержат другое число значений, <b>Xirr</b> возвращает #NUM! значение ошибки. </para>
          <para>В большинстве случаев вам не нужно угадать вычисление <b>Xirr.</b> Если он опущен, предполагается, что это 0,1 (10 процентов). </para>
          <para>
            <b>Xirr</b> тесно связан с функцией <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" /> net present value. Ставка прибыли, вычисляемая <b>с помощью Xirr,</b> — это процентная ставка, соответствующая XNPV = 0. </para>
          <para>Excel использует итеративный метод для вычисления <b>Xirr</b>. Используя изменяемую скорость (начиная с угадать), <b>Сиrr</b> цикличен вычислением, пока результат не будет точным в пределах 0,0000001 процента. Если <b>Xirr</b> не может найти результат, который работает после 100 попыток, #NUM! возвращается значение ошибки. Скорость меняется до следующего: </para>
          <para>Рис. 1. Уравнение</para>
          <para> </para>
          <para> </para>
          <para>где:</para>
          <para>di = ith, or last, payment date.</para>
          <para>d1 = 0-ая дата оплаты.</para>
          <para>Pi = ith, or last, payment.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ряд потоков денежных средств, соответствующих расписанию платежей в даты. Первый платеж является необязательным и соответствует затратам или платежам, которые происходят в начале инвестиций.</param>
        <param name="Arg2">Расписание дат оплаты, соответствующее платежам с денежным потоком. Первая дата платежа указывает начало расписания платежей. Все остальные даты должны быть позже этой даты, но они могут происходить в любом порядке.</param>
        <summary>Возвращает чистое значение для расписания потоков денежных средств, которое необязательно является периодическим.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Метод <b>Xnpv</b> не предоставляет параметр, соответствующий аргументу скорости, необходимому соответствующей функции XNPV (=XNPV(rate, values, dates)). Чтобы обойти это ограничение в коде VBA, а не использовать метод <b>Xpnv,</b> вызовите функцию XNPV с помощью <see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" /> этого метода.</para>
          <para>Чтобы вычислить чистое значение для серии периодических потоков денежных средств, используйте <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> этот метод.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg2">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg3">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg4">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg5">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg6">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg7">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg8">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg9">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg10">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg11">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg12">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg13">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg14">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg15">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg16">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg17">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg18">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg19">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg20">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg21">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg22">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg23">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg24">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg25">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg26">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg27">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg28">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg29">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <param name="Arg30">От 1 до 254 условий, которые могут иметь значение <b>TRUE</b> или <b>FALSE</b> и могут быть логическими значениями, массивами или ссылками.</param>
        <summary>Возвращает логический монопольный ИЛИ всех аргументов.</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date — дата начала.</param>
        <param name="Arg2">End_date — дата, представляючная дату окончания.</param>
        <param name="Arg3">Basis - the type of day count basis to use.</param>
        <summary>Вычисляет часть года, представленную числом целых дней между двумя датами (start_date и end_date). Используйте функцию таблицы YEARFRAC для определения пропорций льгот или обязательств за целый год, назначаемой конкретному термину.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский (30/360)</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Все аргументы усечены до integers. </para>
          <para>Если start_date или end_date не являются допустимой датой, <b>YearFrac</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>YearFrac</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Pr — цена безопасности за 100 долларов США.</param>
        <param name="Arg4">Активация — значение активации системы безопасности на 100 долларов США.</param>
        <param name="Arg5">Basis - the type of day count basis to use.</param>
        <summary>Возвращает годовую доходность для системы безопасности со скидкой.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты должны быть введены с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel сохраняет даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 г. является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст и основа усечены до integers. </para>
          <para>Если расчет или срок готовности не являются допустимой датой, <b>YieldDisc</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если pr ≤ 0 или при активации ≤ 0, <b>YieldDisc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>YieldDisc</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>YieldDisc</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Расчет — дата расчета безопасности. Дата расчета безопасности — это дата после даты выдачи, когда безопасность будет купирована покупателю.</param>
        <param name="Arg2">Срок действия — дата начала срока действия системы безопасности. Дата возраста — это дата окончания срока действия безопасности.</param>
        <param name="Arg3">Проблема — дата проблемы безопасности, выраженная серийным номером даты.</param>
        <param name="Arg4">Ставка — процентная ставка безопасности на дату проблемы.</param>
        <param name="Arg5">Pr — цена безопасности за 100 долларов США.</param>
        <param name="Arg6">Basis - the type of day count basis to use.</param>
        <summary>Возвращает годовую доходность системы безопасности, которая выплатит проценты по сроку жизни.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Даты следует ввели с помощью функции DATE или в качестве результатов других формул или функций. Например, используйте DATE(2008,5,23) для 23-го дня мая 2008 г. Проблемы могут возникнуть, если даты введены в виде текста.</para>
          <list type="table">
            <item>
              <term>0 или пропущено</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Фактические и фактические</description>
            </item>
            <item>
              <term>2 </term>
              <description>Фактическое/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Фактическое/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Европейский (30/360)</description>
            </item>
          </list>
          <para>Microsoft Excel хранит даты в качестве последовательных серийных номеров, чтобы их можно было использовать в вычислениях. По умолчанию 1 января 1900 года является серийным номером 1, а 1 января 2008 г. — серийным номером 39448, так как после 1 января 1900 года он составляет 39 448 дней. Microsoft Excel для Macintosh использует другую систему дат по умолчанию. </para>
          <para>Дата расчета — это дата покупки покупателем купона, например, валюты. Дата возраста — это дата истечения срока действия купона. Например, предположим, что срок 30-летнего срока выдан 1 января 2008 г. и приобретен покупателем через шесть месяцев. Датой выпуска будет 1 января 2008 г., датой расчета будет 1 июля 2008 г., а датой давности будет 1 января 2038 г., то есть через 30 лет после 1 января 2008 г. </para>
          <para>Расчеты, возраст, проблема и основа усечены до integers. </para>
          <para>Если расчет, срок готовности или проблема не являются допустимой датой, <b>YieldMat</b> возвращает #VALUE! значение ошибки. </para>
          <para>Если ставка &lt; 0 или pr ≤ 0, <b>YieldMat</b> возвращает #NUM! значение ошибки. </para>
          <para>Если за &lt; 0 или &gt; 4, <b>YieldMat</b> возвращает #NUM! значение ошибки. </para>
          <para>Если расчет ≥, <b>YieldMat</b> возвращает #NUM! значение ошибки.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — это массив или диапазон данных, для которых необходимо протестировать количество людей, для которых необходимо протестировать данные.</param>
        <param name="Arg2">Значение для проверки.</param>
        <param name="Arg3">Сигма — стандартное отклонение погон. Если он опущен, используется стандартное отклонение образца.</param>
        <summary>Возвращает однохвостовое значение вероятности z-теста. Для заданного среднего среднего размера Z_TEST возвращает вероятность того, что среднее значение примера будет больше среднего значения наблюдений в наборе данных (массиве), то есть наблюдаемый пример означает.</summary>
        <returns>To be added.</returns>
        <remarks><para>Если массив пуст, <b>Z_Test</b> возвращает значение #N/A ошибки. </para>
          <para>
            <b>Z_Test</b> вычисляется следующим образом, если сигма не пропущена: </para>
          <para>Рис. 1. Уравнение для Z_Test если сигма не пропущена</para>
          <para> </para>
          <para> </para>
          <para>или если сигма опущена:</para>
          <para>Рис. 2. Уравнение для Z_Test, когда опущена сигма</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего значения AVERAGE(array); s — это образец стандартного отклонения STDEV_S(массив); и n — количество наблюдений в примере COUNT(массива).</para>
          <para>
            <b>Z_Test</b> представляет вероятность того, что среднее значение примера будет больше наблюдаемого значения AVERAGE(array), если значение среднего значения для этого значения составляет 10. При симметрии обычного распределения, если AVERAGE(array) 10, Z_Test возвращает значение больше &lt; 0,5. <b></b></para>
          <para>Следующую формулу Excel можно использовать для вычисления двуххвостой вероятности того, что среднее значение примера будет дальше от 10 (в обоих направлениях), чем AVERAGE(array), когда значение среднего значения погон в образце составляет г0:</para>
          <para>=2 * MIN(Z_TEST(array,10,sigma), 1 - Z_TEST(array,г0,sigma)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Массив — это массив или диапазон данных, для которых необходимо протестировать количество людей, для которых необходимо протестировать данные.</param>
        <param name="Arg2">Значение для проверки.</param>
        <param name="Arg3">Сигма — стандартное отклонение погон. Если он опущен, используется стандартное отклонение образца.</param>
        <summary>Возвращает однохвостовое значение вероятности z-теста. Для данной средней средней массы данных ZTEST возвращает вероятность того, что среднее значение примера будет больше среднего значения наблюдений в наборе данных (массиве), то есть в наблюдаемом примере.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Важно!</b>Эта функция заменена одной или более новыми функциями, которые могут обеспечить улучшенную точность и имена которых лучше отражают их использование. Эта функция по-прежнему доступна для совместимости с более ранними версиями Excel. Однако если обратная совместимость не требуется, следует рассмотреть возможность использования новых функций с этого времени, так как они более точно описывают свои функции. Дополнительные сведения о новой функции см. в <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" /> методе.</para>
          <para>Если массив пустой, <b>ZTest</b> возвращает значение #N/A ошибки. </para>
          <para>
            <b>Если сигма</b> не опущена, тест ZTest вычисляется следующим образом: </para>
          <para>Рис. 1. Уравнение для ZTest, если сигма не пропущена</para>
          <para> </para>
          <para> </para>
          <para>или если сигма опущена:</para>
          <para>Рис. 2. Уравнение для ZTest при опущении сигмы</para>
          <para> </para>
          <para> </para>
          <para>где x — пример среднего значения AVERAGE(array); s — пример стандартного отклонения STDEV(array); и n — количество наблюдений в примере COUNT(массива).</para>
          <para>
            <b>ZTest</b> представляет вероятность того, что среднее значение примера будет больше наблюдаемого значения AVERAGE(array), если значение среднего значения для этого значения составляет 10. При симметрии обычного распределения, если AVERAGE(array) г0, ZTEST возвращает значение больше &lt; 0,5.</para>
          <para>Следующую формулу Excel можно использовать для вычисления двухвостой вероятности того, что среднее значение примера будет дальше от 10 (в любом направлении), чем AVERAGE(array), если значение среднего значения для используемого массива — г0:=2 * MIN(ZTEST(array,г0,sigma), 1 - ZTEST(array, анти0,sigma)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>